-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
    output_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_we1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
    outbuf_V_4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    outbuf_V_4_ce0 : OUT STD_LOGIC;
    outbuf_V_4_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
    outbuf_V_4_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    outbuf_V_4_ce1 : OUT STD_LOGIC;
    outbuf_V_4_we1 : OUT STD_LOGIC;
    outbuf_V_4_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    OSIZE : IN STD_LOGIC_VECTOR (6 downto 0);
    TO_r : IN STD_LOGIC_VECTOR (5 downto 0);
    TI : IN STD_LOGIC_VECTOR (6 downto 0);
    K : IN STD_LOGIC_VECTOR (3 downto 0);
    S : IN STD_LOGIC_VECTOR (3 downto 0);
    P : IN STD_LOGIC_VECTOR (0 downto 0);
    OFFSET : IN STD_LOGIC_VECTOR (22 downto 0) );
end;


architecture behav of conv_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1536_lc_1 : STD_LOGIC_VECTOR (1535 downto
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_ln204_2_fu_215_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln204_2_reg_277 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_reg_282 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_fu_250_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_287 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_61_fu_255_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_61_reg_294 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_63_fu_259_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_63_reg_299 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_65_fu_263_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_65_reg_304 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_62_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_62_reg_314 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_64_fu_272_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_64_reg_320 : STD_LOGIC_VECTOR (1 downto 0);
    signal bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_ce0 : STD_LOGIC;
    signal bias_we0 : STD_LOGIC;
    signal bias_q0 : STD_LOGIC_VECTOR (2047 downto 0);
    signal scale_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal scale_ce0 : STD_LOGIC;
    signal scale_we0 : STD_LOGIC;
    signal scale_q0 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_input_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_input_V_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_input_V_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_input_V_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_input_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_input_V_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_input_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_input_V_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d0 : STD_LOGIC_VECTOR (1535 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_continue : STD_LOGIC;
    signal grp_store_output_1_fu_147_ap_start : STD_LOGIC;
    signal grp_store_output_1_fu_147_ap_done : STD_LOGIC;
    signal grp_store_output_1_fu_147_ap_idle : STD_LOGIC;
    signal grp_store_output_1_fu_147_ap_ready : STD_LOGIC;
    signal grp_store_output_1_fu_147_outbuf_V_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_store_output_1_fu_147_outbuf_V_2_ce0 : STD_LOGIC;
    signal grp_store_output_1_fu_147_outbuf_V_2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_store_output_1_fu_147_outbuf_V_2_ce1 : STD_LOGIC;
    signal grp_store_output_1_fu_147_outbuf_V_2_we1 : STD_LOGIC;
    signal grp_store_output_1_fu_147_outbuf_V_2_d1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal grp_store_output_1_fu_147_output_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_store_output_1_fu_147_output_V_ce1 : STD_LOGIC;
    signal grp_store_output_1_fu_147_output_V_we1 : STD_LOGIC;
    signal grp_store_output_1_fu_147_output_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_store_output_1_fu_147_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_1_fu_147_bias_ce0 : STD_LOGIC;
    signal grp_store_output_1_fu_147_scale_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_1_fu_147_scale_ce0 : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_ap_start : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_ap_done : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_ap_idle : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_ap_ready : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_bias_ce0 : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_bias_we0 : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_bias_d0 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_load_bias_scale_fu_163_scale_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_scale_ce0 : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_scale_we0 : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_scale_d0 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal grp_load_bias_scale_fu_163_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done : STD_LOGIC := '0';
    signal grp_store_output_1_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_load_bias_scale_fu_163_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln204_fu_187_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln204_fu_187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln204_fu_187_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln204_1_fu_201_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln204_1_fu_201_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln204_1_fu_201_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln204_2_fu_215_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln204_2_fu_215_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln204_fu_221_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln197_fu_175_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_225_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln204_fu_233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln204_1_fu_201_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln204_1_fu_201_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln204_2_fu_215_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln204_2_fu_215_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln204_fu_187_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln204_fu_187_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component dataflow_parent_loop_1 IS
    port (
        mul_ln204_2 : IN STD_LOGIC_VECTOR (20 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        input_V_we0 : OUT STD_LOGIC;
        input_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        input_V_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
        input_V_we1 : OUT STD_LOGIC;
        outbuf_V_4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_4_ce0 : OUT STD_LOGIC;
        outbuf_V_4_d0 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_4_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_4_we0 : OUT STD_LOGIC;
        outbuf_V_4_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_4_ce1 : OUT STD_LOGIC;
        outbuf_V_4_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_4_q1 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_4_we1 : OUT STD_LOGIC;
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        OFFSET : IN STD_LOGIC_VECTOR (21 downto 0);
        OSIZE : IN STD_LOGIC_VECTOR (5 downto 0);
        TO_r : IN STD_LOGIC_VECTOR (4 downto 0);
        TI : IN STD_LOGIC_VECTOR (5 downto 0);
        S : IN STD_LOGIC_VECTOR (1 downto 0);
        P : IN STD_LOGIC_VECTOR (0 downto 0);
        K : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        OFFSET_ap_vld : IN STD_LOGIC;
        OSIZE_ap_vld : IN STD_LOGIC;
        TO_r_ap_vld : IN STD_LOGIC;
        TI_ap_vld : IN STD_LOGIC;
        S_ap_vld : IN STD_LOGIC;
        P_ap_vld : IN STD_LOGIC;
        K_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component store_output_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outbuf_V_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_2_ce0 : OUT STD_LOGIC;
        outbuf_V_2_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_2_ce1 : OUT STD_LOGIC;
        outbuf_V_2_we1 : OUT STD_LOGIC;
        outbuf_V_2_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        scale_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        scale_ce0 : OUT STD_LOGIC;
        scale_q0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        OSIZE : IN STD_LOGIC_VECTOR (5 downto 0);
        TO_r : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component load_bias_scale IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_we0 : OUT STD_LOGIC;
        bias_d0 : OUT STD_LOGIC_VECTOR (2047 downto 0);
        scale_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        scale_ce0 : OUT STD_LOGIC;
        scale_we0 : OUT STD_LOGIC;
        scale_d0 : OUT STD_LOGIC_VECTOR (2047 downto 0);
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        TO_r : IN STD_LOGIC_VECTOR (4 downto 0);
        offset : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component conv_layer_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;


    component conv_layer_scale IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;



begin
    bias_U : component conv_layer_bias
    generic map (
        DataWidth => 2048,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_address0,
        ce0 => bias_ce0,
        we0 => bias_we0,
        d0 => grp_load_bias_scale_fu_163_bias_d0,
        q0 => bias_q0);

    scale_U : component conv_layer_scale
    generic map (
        DataWidth => 2048,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scale_address0,
        ce0 => scale_ce0,
        we0 => scale_we0,
        d0 => grp_load_bias_scale_fu_163_scale_d0,
        q0 => scale_q0);

    grp_dataflow_parent_loop_1_fu_128 : component dataflow_parent_loop_1
    port map (
        mul_ln204_2 => mul_ln204_2_reg_277,
        input_V_address0 => grp_dataflow_parent_loop_1_fu_128_input_V_address0,
        input_V_ce0 => grp_dataflow_parent_loop_1_fu_128_input_V_ce0,
        input_V_d0 => grp_dataflow_parent_loop_1_fu_128_input_V_d0,
        input_V_q0 => input_V_q0,
        input_V_we0 => grp_dataflow_parent_loop_1_fu_128_input_V_we0,
        input_V_address1 => grp_dataflow_parent_loop_1_fu_128_input_V_address1,
        input_V_ce1 => grp_dataflow_parent_loop_1_fu_128_input_V_ce1,
        input_V_d1 => grp_dataflow_parent_loop_1_fu_128_input_V_d1,
        input_V_q1 => ap_const_lv288_lc_1,
        input_V_we1 => grp_dataflow_parent_loop_1_fu_128_input_V_we1,
        outbuf_V_4_address0 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address0,
        outbuf_V_4_ce0 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce0,
        outbuf_V_4_d0 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d0,
        outbuf_V_4_q0 => outbuf_V_4_q0,
        outbuf_V_4_we0 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we0,
        outbuf_V_4_address1 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address1,
        outbuf_V_4_ce1 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce1,
        outbuf_V_4_d1 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d1,
        outbuf_V_4_q1 => ap_const_lv1536_lc_1,
        outbuf_V_4_we1 => grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we1,
        m_axi_ddr_V_AWVALID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST => m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID => m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER => m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP => m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0,
        OFFSET => empty_61_reg_294,
        OSIZE => empty_62_reg_314,
        TO_r => empty_reg_287,
        TI => empty_63_reg_299,
        S => empty_64_reg_320,
        P => P,
        K => empty_65_reg_304,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        OFFSET_ap_vld => ap_const_logic_1,
        OSIZE_ap_vld => ap_const_logic_1,
        TO_r_ap_vld => ap_const_logic_1,
        TI_ap_vld => ap_const_logic_1,
        S_ap_vld => ap_const_logic_1,
        P_ap_vld => ap_const_logic_1,
        K_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_1_fu_128_ap_start,
        ap_done => grp_dataflow_parent_loop_1_fu_128_ap_done,
        ap_ready => grp_dataflow_parent_loop_1_fu_128_ap_ready,
        ap_idle => grp_dataflow_parent_loop_1_fu_128_ap_idle,
        ap_continue => grp_dataflow_parent_loop_1_fu_128_ap_continue);

    grp_store_output_1_fu_147 : component store_output_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_output_1_fu_147_ap_start,
        ap_done => grp_store_output_1_fu_147_ap_done,
        ap_idle => grp_store_output_1_fu_147_ap_idle,
        ap_ready => grp_store_output_1_fu_147_ap_ready,
        outbuf_V_2_address0 => grp_store_output_1_fu_147_outbuf_V_2_address0,
        outbuf_V_2_ce0 => grp_store_output_1_fu_147_outbuf_V_2_ce0,
        outbuf_V_2_q0 => outbuf_V_4_q0,
        outbuf_V_2_address1 => grp_store_output_1_fu_147_outbuf_V_2_address1,
        outbuf_V_2_ce1 => grp_store_output_1_fu_147_outbuf_V_2_ce1,
        outbuf_V_2_we1 => grp_store_output_1_fu_147_outbuf_V_2_we1,
        outbuf_V_2_d1 => grp_store_output_1_fu_147_outbuf_V_2_d1,
        output_V_address1 => grp_store_output_1_fu_147_output_V_address1,
        output_V_ce1 => grp_store_output_1_fu_147_output_V_ce1,
        output_V_we1 => grp_store_output_1_fu_147_output_V_we1,
        output_V_d1 => grp_store_output_1_fu_147_output_V_d1,
        bias_address0 => grp_store_output_1_fu_147_bias_address0,
        bias_ce0 => grp_store_output_1_fu_147_bias_ce0,
        bias_q0 => bias_q0,
        scale_address0 => grp_store_output_1_fu_147_scale_address0,
        scale_ce0 => grp_store_output_1_fu_147_scale_ce0,
        scale_q0 => scale_q0,
        OSIZE => empty_62_reg_314,
        TO_r => empty_reg_287);

    grp_load_bias_scale_fu_163 : component load_bias_scale
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_bias_scale_fu_163_ap_start,
        ap_done => grp_load_bias_scale_fu_163_ap_done,
        ap_idle => grp_load_bias_scale_fu_163_ap_idle,
        ap_ready => grp_load_bias_scale_fu_163_ap_ready,
        bias_address0 => grp_load_bias_scale_fu_163_bias_address0,
        bias_ce0 => grp_load_bias_scale_fu_163_bias_ce0,
        bias_we0 => grp_load_bias_scale_fu_163_bias_we0,
        bias_d0 => grp_load_bias_scale_fu_163_bias_d0,
        scale_address0 => grp_load_bias_scale_fu_163_scale_address0,
        scale_ce0 => grp_load_bias_scale_fu_163_scale_ce0,
        scale_we0 => grp_load_bias_scale_fu_163_scale_we0,
        scale_d0 => grp_load_bias_scale_fu_163_scale_d0,
        m_axi_ddr_V_AWVALID => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => grp_load_bias_scale_fu_163_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => grp_load_bias_scale_fu_163_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => grp_load_bias_scale_fu_163_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => grp_load_bias_scale_fu_163_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => grp_load_bias_scale_fu_163_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => grp_load_bias_scale_fu_163_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => grp_load_bias_scale_fu_163_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => grp_load_bias_scale_fu_163_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY => grp_load_bias_scale_fu_163_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST => m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID => m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER => m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP => m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => grp_load_bias_scale_fu_163_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0,
        TO_r => empty_reg_287,
        offset => trunc_ln_reg_282);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_128_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_128_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_1_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_1_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_dataflow_parent_loop_1_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_1_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_1_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_bias_scale_fu_163_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_bias_scale_fu_163_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_load_bias_scale_fu_163_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_bias_scale_fu_163_ap_ready = ap_const_logic_1)) then 
                    grp_load_bias_scale_fu_163_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_output_1_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_output_1_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_store_output_1_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_output_1_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_store_output_1_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_61_reg_294 <= empty_61_fu_255_p1;
                empty_63_reg_299 <= empty_63_fu_259_p1;
                empty_65_reg_304 <= empty_65_fu_263_p1;
                empty_reg_287 <= empty_fu_250_p1;
                mul_ln204_2_reg_277 <= mul_ln204_2_fu_215_p2;
                trunc_ln_reg_282 <= add_ln204_fu_233_p2(23 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_62_reg_314 <= empty_62_fu_267_p1;
                empty_64_reg_320 <= empty_64_fu_272_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_store_output_1_fu_147_ap_done, grp_load_bias_scale_fu_163_ap_done, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_load_bias_scale_fu_163_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_store_output_1_fu_147_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln204_fu_233_p2 <= std_logic_vector(unsigned(zext_ln197_fu_175_p1) + unsigned(shl_ln_fu_225_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_ready, ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_ready and ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_store_output_1_fu_147_ap_done, ap_CS_fsm_state6)
    begin
        if ((((grp_store_output_1_fu_147_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_store_output_1_fu_147_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_store_output_1_fu_147_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_done <= (grp_dataflow_parent_loop_1_fu_128_ap_done or ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_done);
    ap_sync_grp_dataflow_parent_loop_1_fu_128_ap_ready <= (grp_dataflow_parent_loop_1_fu_128_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_1_fu_128_ap_ready);

    bias_address0_assign_proc : process(grp_store_output_1_fu_147_bias_address0, grp_load_bias_scale_fu_163_bias_address0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_address0 <= grp_load_bias_scale_fu_163_bias_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_address0 <= grp_store_output_1_fu_147_bias_address0;
        else 
            bias_address0 <= "XXXX";
        end if; 
    end process;


    bias_ce0_assign_proc : process(grp_store_output_1_fu_147_bias_ce0, grp_load_bias_scale_fu_163_bias_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_ce0 <= grp_load_bias_scale_fu_163_bias_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_ce0 <= grp_store_output_1_fu_147_bias_ce0;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_we0_assign_proc : process(grp_load_bias_scale_fu_163_bias_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_we0 <= grp_load_bias_scale_fu_163_bias_we0;
        else 
            bias_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_61_fu_255_p1 <= OFFSET(22 - 1 downto 0);
    empty_62_fu_267_p1 <= OSIZE(6 - 1 downto 0);
    empty_63_fu_259_p1 <= TI(6 - 1 downto 0);
    empty_64_fu_272_p1 <= S(2 - 1 downto 0);
    empty_65_fu_263_p1 <= K(2 - 1 downto 0);
    empty_fu_250_p1 <= TO_r(5 - 1 downto 0);

    grp_dataflow_parent_loop_1_fu_128_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_dataflow_parent_loop_1_fu_128_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_1_fu_128_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_1_fu_128_ap_start <= grp_dataflow_parent_loop_1_fu_128_ap_start_reg;
    grp_load_bias_scale_fu_163_ap_start <= grp_load_bias_scale_fu_163_ap_start_reg;
    grp_store_output_1_fu_147_ap_start <= grp_store_output_1_fu_147_ap_start_reg;
    input_V_address0 <= grp_dataflow_parent_loop_1_fu_128_input_V_address0;
    input_V_ce0 <= grp_dataflow_parent_loop_1_fu_128_input_V_ce0;

    m_axi_ddr_V_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARADDR, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARADDR, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARADDR <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARADDR <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARADDR;
        else 
            m_axi_ddr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_ddr_V_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARBURST, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARBURST, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARBURST <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARBURST <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARBURST;
        else 
            m_axi_ddr_V_ARBURST <= "XX";
        end if; 
    end process;


    m_axi_ddr_V_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARCACHE, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARCACHE, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARCACHE <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARCACHE <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARCACHE;
        else 
            m_axi_ddr_V_ARCACHE <= "XXXX";
        end if; 
    end process;


    m_axi_ddr_V_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARID, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARID, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARID <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARID <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARID;
        else 
            m_axi_ddr_V_ARID <= "X";
        end if; 
    end process;


    m_axi_ddr_V_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLEN, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLEN, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARLEN <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARLEN <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLEN;
        else 
            m_axi_ddr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_ddr_V_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLOCK, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLOCK, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARLOCK <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARLOCK <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARLOCK;
        else 
            m_axi_ddr_V_ARLOCK <= "XX";
        end if; 
    end process;


    m_axi_ddr_V_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARPROT, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARPROT, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARPROT <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARPROT <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARPROT;
        else 
            m_axi_ddr_V_ARPROT <= "XXX";
        end if; 
    end process;


    m_axi_ddr_V_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARQOS, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARQOS, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARQOS <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARQOS <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARQOS;
        else 
            m_axi_ddr_V_ARQOS <= "XXXX";
        end if; 
    end process;


    m_axi_ddr_V_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARREGION, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARREGION, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARREGION <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARREGION <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARREGION;
        else 
            m_axi_ddr_V_ARREGION <= "XXXX";
        end if; 
    end process;


    m_axi_ddr_V_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARSIZE, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARSIZE, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARSIZE <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARSIZE <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARSIZE;
        else 
            m_axi_ddr_V_ARSIZE <= "XXX";
        end if; 
    end process;


    m_axi_ddr_V_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARUSER, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARUSER, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARUSER <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARUSER <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARUSER;
        else 
            m_axi_ddr_V_ARUSER <= "X";
        end if; 
    end process;


    m_axi_ddr_V_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARVALID, grp_load_bias_scale_fu_163_m_axi_ddr_V_ARVALID, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_ARVALID <= grp_load_bias_scale_fu_163_m_axi_ddr_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_ARVALID <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_ARVALID;
        else 
            m_axi_ddr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_V_AWADDR <= ap_const_lv32_0;
    m_axi_ddr_V_AWBURST <= ap_const_lv2_0;
    m_axi_ddr_V_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr_V_AWID <= ap_const_lv1_0;
    m_axi_ddr_V_AWLEN <= ap_const_lv32_0;
    m_axi_ddr_V_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr_V_AWPROT <= ap_const_lv3_0;
    m_axi_ddr_V_AWQOS <= ap_const_lv4_0;
    m_axi_ddr_V_AWREGION <= ap_const_lv4_0;
    m_axi_ddr_V_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr_V_AWUSER <= ap_const_lv1_0;
    m_axi_ddr_V_AWVALID <= ap_const_logic_0;
    m_axi_ddr_V_BREADY <= ap_const_logic_0;

    m_axi_ddr_V_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_RREADY, grp_load_bias_scale_fu_163_m_axi_ddr_V_RREADY, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_ddr_V_RREADY <= grp_load_bias_scale_fu_163_m_axi_ddr_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr_V_RREADY <= grp_dataflow_parent_loop_1_fu_128_m_axi_ddr_V_RREADY;
        else 
            m_axi_ddr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_V_WDATA <= ap_const_lv128_lc_1;
    m_axi_ddr_V_WID <= ap_const_lv1_0;
    m_axi_ddr_V_WLAST <= ap_const_logic_0;
    m_axi_ddr_V_WSTRB <= ap_const_lv16_0;
    m_axi_ddr_V_WUSER <= ap_const_lv1_0;
    m_axi_ddr_V_WVALID <= ap_const_logic_0;
    mul_ln204_1_fu_201_p0 <= mul_ln204_1_fu_201_p00(4 - 1 downto 0);
    mul_ln204_1_fu_201_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(K),17));
    mul_ln204_1_fu_201_p1 <= mul_ln204_1_fu_201_p10(13 - 1 downto 0);
    mul_ln204_1_fu_201_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln204_fu_187_p2),17));
    mul_ln204_1_fu_201_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln204_1_fu_201_p0) * unsigned(mul_ln204_1_fu_201_p1), 17));
    mul_ln204_2_fu_215_p0 <= mul_ln204_2_fu_215_p00(4 - 1 downto 0);
    mul_ln204_2_fu_215_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(K),21));
    mul_ln204_2_fu_215_p1 <= mul_ln204_2_fu_215_p10(17 - 1 downto 0);
    mul_ln204_2_fu_215_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln204_1_fu_201_p2),21));
    mul_ln204_2_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln204_2_fu_215_p0) * unsigned(mul_ln204_2_fu_215_p1), 21));
    mul_ln204_fu_187_p0 <= mul_ln204_fu_187_p00(6 - 1 downto 0);
    mul_ln204_fu_187_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TO_r),13));
    mul_ln204_fu_187_p1 <= mul_ln204_fu_187_p10(7 - 1 downto 0);
    mul_ln204_fu_187_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TI),13));
    mul_ln204_fu_187_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln204_fu_187_p0) * unsigned(mul_ln204_fu_187_p1), 13));

    outbuf_V_4_address0_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address0, grp_store_output_1_fu_147_outbuf_V_2_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_address0 <= grp_store_output_1_fu_147_outbuf_V_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_address0 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address0;
        else 
            outbuf_V_4_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    outbuf_V_4_address1_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address1, grp_store_output_1_fu_147_outbuf_V_2_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_address1 <= grp_store_output_1_fu_147_outbuf_V_2_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_address1 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_address1;
        else 
            outbuf_V_4_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    outbuf_V_4_ce0_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce0, grp_store_output_1_fu_147_outbuf_V_2_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_ce0 <= grp_store_output_1_fu_147_outbuf_V_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_ce0 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce0;
        else 
            outbuf_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_V_4_ce1_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce1, grp_store_output_1_fu_147_outbuf_V_2_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_ce1 <= grp_store_output_1_fu_147_outbuf_V_2_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_ce1 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_ce1;
        else 
            outbuf_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_V_4_d1_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d1, grp_store_output_1_fu_147_outbuf_V_2_d1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_d1 <= grp_store_output_1_fu_147_outbuf_V_2_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_d1 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_d1;
        else 
            outbuf_V_4_d
        end if; 
    end process;


    outbuf_V_4_we1_assign_proc : process(grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we1, grp_store_output_1_fu_147_outbuf_V_2_we1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outbuf_V_4_we1 <= grp_store_output_1_fu_147_outbuf_V_2_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outbuf_V_4_we1 <= grp_dataflow_parent_loop_1_fu_128_outbuf_V_4_we1;
        else 
            outbuf_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_address1 <= grp_store_output_1_fu_147_output_V_address1;
    output_V_ce1 <= grp_store_output_1_fu_147_output_V_ce1;
    output_V_d1 <= grp_store_output_1_fu_147_output_V_d1;
    output_V_we1 <= grp_store_output_1_fu_147_output_V_we1;

    scale_address0_assign_proc : process(grp_store_output_1_fu_147_scale_address0, grp_load_bias_scale_fu_163_scale_address0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scale_address0 <= grp_load_bias_scale_fu_163_scale_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scale_address0 <= grp_store_output_1_fu_147_scale_address0;
        else 
            scale_address0 <= "XXXX";
        end if; 
    end process;


    scale_ce0_assign_proc : process(grp_store_output_1_fu_147_scale_ce0, grp_load_bias_scale_fu_163_scale_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scale_ce0 <= grp_load_bias_scale_fu_163_scale_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scale_ce0 <= grp_store_output_1_fu_147_scale_ce0;
        else 
            scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scale_we0_assign_proc : process(grp_load_bias_scale_fu_163_scale_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scale_we0 <= grp_load_bias_scale_fu_163_scale_we0;
        else 
            scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_225_p3 <= (trunc_ln204_fu_221_p1 & ap_const_lv11_0);
    trunc_ln204_fu_221_p1 <= mul_ln204_2_fu_215_p2(13 - 1 downto 0);
    zext_ln197_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(OFFSET),24));
end behav;
