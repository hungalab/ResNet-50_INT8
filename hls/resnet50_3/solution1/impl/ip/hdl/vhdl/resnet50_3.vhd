-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resnet50_3 is
generic (
    C_M_AXI_DDR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_DDR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DDR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sw0in_V_TDATA : IN STD_LOGIC_VECTOR (175 downto 0);
    sw0in_V_TVALID : IN STD_LOGIC;
    sw0in_V_TREADY : OUT STD_LOGIC;
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH-1 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_WUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_DATA_WIDTH-1 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_RUSER_WIDTH-1 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_ID_WIDTH-1 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_V_BUSER_WIDTH-1 downto 0);
    startt_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    startt_V_TVALID : OUT STD_LOGIC;
    startt_V_TREADY : IN STD_LOGIC;
    stopt_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stopt_V_TVALID : OUT STD_LOGIC;
    stopt_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of resnet50_3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resnet50_3,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=318,HLS_SYN_DSP=1512,HLS_SYN_FF=190473,HLS_SYN_LUT=275693,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_101000 : STD_LOGIC_VECTOR (23 downto 0) := "000100000001000000000000";
    constant ap_const_lv24_342000 : STD_LOGIC_VECTOR (23 downto 0) := "001101000010000000000000";
    constant ap_const_lv24_446000 : STD_LOGIC_VECTOR (23 downto 0) := "010001000110000000000000";
    constant ap_const_lv24_547000 : STD_LOGIC_VECTOR (23 downto 0) := "010101000111000000000000";
    constant ap_const_lv24_788000 : STD_LOGIC_VECTOR (23 downto 0) := "011110001000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3F562C3D : STD_LOGIC_VECTOR (31 downto 0) := "00111111010101100010110000111101";
    constant ap_const_lv32_3F11EB2A : STD_LOGIC_VECTOR (31 downto 0) := "00111111000100011110101100101010";
    constant ap_const_lv32_3F9AF6D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110101111011011010111";
    constant ap_const_lv32_3F472A84 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010001110010101010000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_C3F : STD_LOGIC_VECTOR (11 downto 0) := "110000111111";
    constant ap_const_lv1536_lc_1 : STD_LOGIC_VECTOR (1535 downto
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_117 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010111";
    constant ap_const_lv32_11A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011010";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111000";
    constant ap_const_lv32_3FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal sw0in_V_0_data_out : STD_LOGIC_VECTOR (175 downto 0);
    signal sw0in_V_0_vld_in : STD_LOGIC;
    signal sw0in_V_0_vld_out : STD_LOGIC;
    signal sw0in_V_0_ack_in : STD_LOGIC;
    signal sw0in_V_0_ack_out : STD_LOGIC;
    signal sw0in_V_0_payload_A : STD_LOGIC_VECTOR (175 downto 0);
    signal sw0in_V_0_payload_B : STD_LOGIC_VECTOR (175 downto 0);
    signal sw0in_V_0_sel_rd : STD_LOGIC := '0';
    signal sw0in_V_0_sel_wr : STD_LOGIC := '0';
    signal sw0in_V_0_sel : STD_LOGIC;
    signal sw0in_V_0_load_A : STD_LOGIC;
    signal sw0in_V_0_load_B : STD_LOGIC;
    signal sw0in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sw0in_V_0_state_cmp_full : STD_LOGIC;
    signal startt_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal startt_V_1_vld_in : STD_LOGIC;
    signal startt_V_1_vld_out : STD_LOGIC;
    signal startt_V_1_ack_in : STD_LOGIC;
    signal startt_V_1_ack_out : STD_LOGIC;
    signal startt_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal startt_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal startt_V_1_sel_rd : STD_LOGIC := '0';
    signal startt_V_1_sel_wr : STD_LOGIC := '0';
    signal startt_V_1_sel : STD_LOGIC;
    signal startt_V_1_load_A : STD_LOGIC;
    signal startt_V_1_load_B : STD_LOGIC;
    signal startt_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal startt_V_1_state_cmp_full : STD_LOGIC;
    signal stopt_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stopt_V_1_vld_in : STD_LOGIC;
    signal stopt_V_1_vld_out : STD_LOGIC;
    signal stopt_V_1_ack_in : STD_LOGIC;
    signal stopt_V_1_ack_out : STD_LOGIC;
    signal stopt_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal stopt_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal stopt_V_1_sel_rd : STD_LOGIC := '0';
    signal stopt_V_1_sel_wr : STD_LOGIC := '0';
    signal stopt_V_1_sel : STD_LOGIC;
    signal stopt_V_1_load_A : STD_LOGIC;
    signal stopt_V_1_load_B : STD_LOGIC;
    signal stopt_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stopt_V_1_state_cmp_full : STD_LOGIC;
    signal buf0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf0_V_ce0 : STD_LOGIC;
    signal buf0_V_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal buf0_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf0_V_ce1 : STD_LOGIC;
    signal buf0_V_we1 : STD_LOGIC;
    signal buf0_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal outbuf_V_ce0 : STD_LOGIC;
    signal outbuf_V_q0 : STD_LOGIC_VECTOR (1535 downto 0);
    signal outbuf_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal outbuf_V_ce1 : STD_LOGIC;
    signal outbuf_V_we1 : STD_LOGIC;
    signal outbuf_V_d1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal buf1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf1_V_ce0 : STD_LOGIC;
    signal buf1_V_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal buf1_V_ce1 : STD_LOGIC;
    signal buf1_V_we1 : STD_LOGIC;
    signal buf2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf2_V_ce0 : STD_LOGIC;
    signal buf2_V_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal buf2_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf2_V_ce1 : STD_LOGIC;
    signal buf2_V_we1 : STD_LOGIC;
    signal buf2_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal fc_in_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_in_V_ce0 : STD_LOGIC;
    signal fc_in_V_q0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal fc_in_V_ce1 : STD_LOGIC;
    signal fc_in_V_we1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sw0in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln380_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal startt_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal stopt_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ddr_V_AWREADY : STD_LOGIC;
    signal ddr_V_WREADY : STD_LOGIC;
    signal ddr_V_ARVALID : STD_LOGIC;
    signal ddr_V_ARREADY : STD_LOGIC;
    signal ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RVALID : STD_LOGIC;
    signal ddr_V_RREADY : STD_LOGIC;
    signal ddr_V_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_RLAST : STD_LOGIC;
    signal ddr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_BVALID : STD_LOGIC;
    signal ddr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal trunc_ln647_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_1_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_2_reg_809 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_408_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_3_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_418_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_4_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_5_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_6_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_7_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_458_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_8_reg_839 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_468_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_9_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_478_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_s_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_10_reg_854 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_498_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_11_reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_508_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_12_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_518_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_13_reg_869 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_528_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_0_14_reg_874 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_fu_754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln321_1_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_layer_fu_305_ap_start : STD_LOGIC;
    signal grp_conv_layer_fu_305_ap_done : STD_LOGIC;
    signal grp_conv_layer_fu_305_ap_idle : STD_LOGIC;
    signal grp_conv_layer_fu_305_ap_ready : STD_LOGIC;
    signal grp_conv_layer_fu_305_input_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_layer_fu_305_input_V_ce0 : STD_LOGIC;
    signal grp_conv_layer_fu_305_input_V_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_conv_layer_fu_305_output_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_layer_fu_305_output_V_ce1 : STD_LOGIC;
    signal grp_conv_layer_fu_305_output_V_we1 : STD_LOGIC;
    signal grp_conv_layer_fu_305_output_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_conv_layer_fu_305_outbuf_V_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_layer_fu_305_outbuf_V_4_ce0 : STD_LOGIC;
    signal grp_conv_layer_fu_305_outbuf_V_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_layer_fu_305_outbuf_V_4_ce1 : STD_LOGIC;
    signal grp_conv_layer_fu_305_outbuf_V_4_we1 : STD_LOGIC;
    signal grp_conv_layer_fu_305_outbuf_V_4_d1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal grp_conv_layer_fu_305_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal grp_conv_layer_fu_305_TO_r : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_layer_fu_305_TI : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_layer_fu_305_K : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_layer_fu_305_P : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_OFFSET : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_add_fu_344_ap_start : STD_LOGIC;
    signal grp_add_fu_344_ap_done : STD_LOGIC;
    signal grp_add_fu_344_ap_idle : STD_LOGIC;
    signal grp_add_fu_344_ap_ready : STD_LOGIC;
    signal grp_add_fu_344_input1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_add_fu_344_input1_V_ce0 : STD_LOGIC;
    signal grp_add_fu_344_input1_V_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_add_fu_344_output_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_add_fu_344_output_V_ce1 : STD_LOGIC;
    signal grp_add_fu_344_output_V_we1 : STD_LOGIC;
    signal grp_add_fu_344_output_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_add_fu_344_SCALE1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_add_fu_344_SCALE2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_add_fu_344_buf1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_add_fu_344_buf1_V_ce0 : STD_LOGIC;
    signal grp_fc_fu_366_ap_start : STD_LOGIC;
    signal grp_fc_fu_366_ap_done : STD_LOGIC;
    signal grp_fc_fu_366_ap_idle : STD_LOGIC;
    signal grp_fc_fu_366_ap_ready : STD_LOGIC;
    signal grp_fc_fu_366_input_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_input_V_ce0 : STD_LOGIC;
    signal grp_fc_fu_366_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fc_fu_366_output_r_ce0 : STD_LOGIC;
    signal grp_fc_fu_366_output_r_we0 : STD_LOGIC;
    signal grp_fc_fu_366_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal grp_fc_fu_366_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal grp_fc_fu_366_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal grp_fc_fu_366_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal grp_fc_fu_366_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_fu_366_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal grp_fc_fu_366_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal grp_average_pool_fu_376_ap_start : STD_LOGIC;
    signal grp_average_pool_fu_376_ap_done : STD_LOGIC;
    signal grp_average_pool_fu_376_ap_idle : STD_LOGIC;
    signal grp_average_pool_fu_376_ap_ready : STD_LOGIC;
    signal grp_average_pool_fu_376_input_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_average_pool_fu_376_input_V_ce0 : STD_LOGIC;
    signal grp_average_pool_fu_376_output_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_average_pool_fu_376_output_V_ce1 : STD_LOGIC;
    signal grp_average_pool_fu_376_output_V_we1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_average_pool_fu_376_output_V_d1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal l_0_reg_282 : STD_LOGIC_VECTOR (11 downto 0);
    signal i1_0_reg_294 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln395_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer_fu_305_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_add_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fc_fu_366_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_average_pool_fu_376_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln388_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_fu_739_p1 : STD_LOGIC_VECTOR (287 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal trunc_ln647_1_fu_607_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln78_30_fu_667_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_29_fu_663_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_28_fu_659_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_27_fu_655_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_26_fu_651_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_25_fu_647_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_24_fu_643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_23_fu_639_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_22_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_21_fu_631_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_20_fu_627_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_19_fu_623_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_18_fu_619_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_17_fu_615_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_16_fu_611_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_15_fu_604_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_14_fu_601_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_13_fu_598_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_12_fu_595_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_11_fu_592_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_10_fu_589_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_9_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_8_fu_583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_7_fu_580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_6_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_5_fu_574_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_4_fu_571_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_3_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_2_fu_565_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_1_fu_562_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_671_p33 : STD_LOGIC_VECTOR (286 downto 0);
    signal trunc_ln_fu_744_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln296_2_fu_776_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state30 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component conv_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        outbuf_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        outbuf_V_4_ce0 : OUT STD_LOGIC;
        outbuf_V_4_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_4_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        outbuf_V_4_ce1 : OUT STD_LOGIC;
        outbuf_V_4_we1 : OUT STD_LOGIC;
        outbuf_V_4_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        TO_r : IN STD_LOGIC_VECTOR (6 downto 0);
        TI : IN STD_LOGIC_VECTOR (7 downto 0);
        K : IN STD_LOGIC_VECTOR (3 downto 0);
        P : IN STD_LOGIC_VECTOR (0 downto 0);
        OFFSET : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input1_V_ce0 : OUT STD_LOGIC;
        input1_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        SCALE1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SCALE2 : IN STD_LOGIC_VECTOR (31 downto 0);
        buf1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        buf1_V_ce0 : OUT STD_LOGIC;
        buf1_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component fc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component average_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        output_V_d1 : OUT STD_LOGIC_VECTOR (1023 downto 0) );
    end component;


    component resnet50_3_buf0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component resnet50_3_outbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (1535 downto 0) );
    end component;


    component resnet50_3_fc_in_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (127 downto 0);
        d1 : IN STD_LOGIC_VECTOR (1023 downto 0) );
    end component;


    component resnet50_3_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_r_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component resnet50_3_ddr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    buf0_V_U : component resnet50_3_buf0_V
    generic map (
        DataWidth => 288,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf0_V_address0,
        ce0 => buf0_V_ce0,
        q0 => buf0_V_q0,
        address1 => buf0_V_address1,
        ce1 => buf0_V_ce1,
        we1 => buf0_V_we1,
        d1 => buf0_V_d1);

    outbuf_V_U : component resnet50_3_outbuf_V
    generic map (
        DataWidth => 1536,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_conv_layer_fu_305_outbuf_V_4_address0,
        ce0 => outbuf_V_ce0,
        q0 => outbuf_V_q0,
        address1 => outbuf_V_address1,
        ce1 => outbuf_V_ce1,
        we1 => outbuf_V_we1,
        d1 => outbuf_V_d1);

    buf1_V_U : component resnet50_3_buf0_V
    generic map (
        DataWidth => 288,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf1_V_address0,
        ce0 => buf1_V_ce0,
        q0 => buf1_V_q0,
        address1 => grp_conv_layer_fu_305_output_V_address1,
        ce1 => buf1_V_ce1,
        we1 => buf1_V_we1,
        d1 => grp_conv_layer_fu_305_output_V_d1);

    buf2_V_U : component resnet50_3_buf0_V
    generic map (
        DataWidth => 288,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf2_V_address0,
        ce0 => buf2_V_ce0,
        q0 => buf2_V_q0,
        address1 => buf2_V_address1,
        ce1 => buf2_V_ce1,
        we1 => buf2_V_we1,
        d1 => buf2_V_d1);

    fc_in_V_U : component resnet50_3_fc_in_V
    generic map (
        DataWidth => 1024,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc_in_V_address0,
        ce0 => fc_in_V_ce0,
        q0 => fc_in_V_q0,
        address1 => grp_average_pool_fu_376_output_V_address1,
        ce1 => fc_in_V_ce1,
        we1 => fc_in_V_we1,
        d1 => grp_average_pool_fu_376_output_V_d1);

    resnet50_3_AXILiteS_s_axi_U : component resnet50_3_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_r_address0 => grp_fc_fu_366_output_r_address0,
        output_r_ce0 => grp_fc_fu_366_output_r_ce0,
        output_r_we0 => grp_fc_fu_366_output_r_we0,
        output_r_d0 => grp_fc_fu_366_output_r_d0);

    resnet50_3_ddr_V_m_axi_U : component resnet50_3_ddr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr_V_AWVALID,
        AWREADY => m_axi_ddr_V_AWREADY,
        AWADDR => m_axi_ddr_V_AWADDR,
        AWID => m_axi_ddr_V_AWID,
        AWLEN => m_axi_ddr_V_AWLEN,
        AWSIZE => m_axi_ddr_V_AWSIZE,
        AWBURST => m_axi_ddr_V_AWBURST,
        AWLOCK => m_axi_ddr_V_AWLOCK,
        AWCACHE => m_axi_ddr_V_AWCACHE,
        AWPROT => m_axi_ddr_V_AWPROT,
        AWQOS => m_axi_ddr_V_AWQOS,
        AWREGION => m_axi_ddr_V_AWREGION,
        AWUSER => m_axi_ddr_V_AWUSER,
        WVALID => m_axi_ddr_V_WVALID,
        WREADY => m_axi_ddr_V_WREADY,
        WDATA => m_axi_ddr_V_WDATA,
        WSTRB => m_axi_ddr_V_WSTRB,
        WLAST => m_axi_ddr_V_WLAST,
        WID => m_axi_ddr_V_WID,
        WUSER => m_axi_ddr_V_WUSER,
        ARVALID => m_axi_ddr_V_ARVALID,
        ARREADY => m_axi_ddr_V_ARREADY,
        ARADDR => m_axi_ddr_V_ARADDR,
        ARID => m_axi_ddr_V_ARID,
        ARLEN => m_axi_ddr_V_ARLEN,
        ARSIZE => m_axi_ddr_V_ARSIZE,
        ARBURST => m_axi_ddr_V_ARBURST,
        ARLOCK => m_axi_ddr_V_ARLOCK,
        ARCACHE => m_axi_ddr_V_ARCACHE,
        ARPROT => m_axi_ddr_V_ARPROT,
        ARQOS => m_axi_ddr_V_ARQOS,
        ARREGION => m_axi_ddr_V_ARREGION,
        ARUSER => m_axi_ddr_V_ARUSER,
        RVALID => m_axi_ddr_V_RVALID,
        RREADY => m_axi_ddr_V_RREADY,
        RDATA => m_axi_ddr_V_RDATA,
        RLAST => m_axi_ddr_V_RLAST,
        RID => m_axi_ddr_V_RID,
        RUSER => m_axi_ddr_V_RUSER,
        RRESP => m_axi_ddr_V_RRESP,
        BVALID => m_axi_ddr_V_BVALID,
        BREADY => m_axi_ddr_V_BREADY,
        BRESP => m_axi_ddr_V_BRESP,
        BID => m_axi_ddr_V_BID,
        BUSER => m_axi_ddr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ddr_V_ARVALID,
        I_ARREADY => ddr_V_ARREADY,
        I_ARADDR => ddr_V_ARADDR,
        I_ARID => ddr_V_ARID,
        I_ARLEN => ddr_V_ARLEN,
        I_ARSIZE => ddr_V_ARSIZE,
        I_ARLOCK => ddr_V_ARLOCK,
        I_ARCACHE => ddr_V_ARCACHE,
        I_ARQOS => ddr_V_ARQOS,
        I_ARPROT => ddr_V_ARPROT,
        I_ARUSER => ddr_V_ARUSER,
        I_ARBURST => ddr_V_ARBURST,
        I_ARREGION => ddr_V_ARREGION,
        I_RVALID => ddr_V_RVALID,
        I_RREADY => ddr_V_RREADY,
        I_RDATA => ddr_V_RDATA,
        I_RID => ddr_V_RID,
        I_RUSER => ddr_V_RUSER,
        I_RRESP => ddr_V_RRESP,
        I_RLAST => ddr_V_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ddr_V_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ddr_V_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ddr_V_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ddr_V_BRESP,
        I_BID => ddr_V_BID,
        I_BUSER => ddr_V_BUSER);

    grp_conv_layer_fu_305 : component conv_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_layer_fu_305_ap_start,
        ap_done => grp_conv_layer_fu_305_ap_done,
        ap_idle => grp_conv_layer_fu_305_ap_idle,
        ap_ready => grp_conv_layer_fu_305_ap_ready,
        input_V_address0 => grp_conv_layer_fu_305_input_V_address0,
        input_V_ce0 => grp_conv_layer_fu_305_input_V_ce0,
        input_V_q0 => grp_conv_layer_fu_305_input_V_q0,
        output_V_address1 => grp_conv_layer_fu_305_output_V_address1,
        output_V_ce1 => grp_conv_layer_fu_305_output_V_ce1,
        output_V_we1 => grp_conv_layer_fu_305_output_V_we1,
        output_V_d1 => grp_conv_layer_fu_305_output_V_d1,
        outbuf_V_4_address0 => grp_conv_layer_fu_305_outbuf_V_4_address0,
        outbuf_V_4_ce0 => grp_conv_layer_fu_305_outbuf_V_4_ce0,
        outbuf_V_4_q0 => outbuf_V_q0,
        outbuf_V_4_address1 => grp_conv_layer_fu_305_outbuf_V_4_address1,
        outbuf_V_4_ce1 => grp_conv_layer_fu_305_outbuf_V_4_ce1,
        outbuf_V_4_we1 => grp_conv_layer_fu_305_outbuf_V_4_we1,
        outbuf_V_4_d1 => grp_conv_layer_fu_305_outbuf_V_4_d1,
        m_axi_ddr_V_AWVALID => grp_conv_layer_fu_305_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => grp_conv_layer_fu_305_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => grp_conv_layer_fu_305_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => grp_conv_layer_fu_305_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => grp_conv_layer_fu_305_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => grp_conv_layer_fu_305_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => grp_conv_layer_fu_305_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => grp_conv_layer_fu_305_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => grp_conv_layer_fu_305_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => grp_conv_layer_fu_305_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => grp_conv_layer_fu_305_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => grp_conv_layer_fu_305_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => grp_conv_layer_fu_305_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => grp_conv_layer_fu_305_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => grp_conv_layer_fu_305_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => grp_conv_layer_fu_305_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => grp_conv_layer_fu_305_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => grp_conv_layer_fu_305_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => grp_conv_layer_fu_305_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => ddr_V_RVALID,
        m_axi_ddr_V_RREADY => grp_conv_layer_fu_305_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => ddr_V_RDATA,
        m_axi_ddr_V_RLAST => ddr_V_RLAST,
        m_axi_ddr_V_RID => ddr_V_RID,
        m_axi_ddr_V_RUSER => ddr_V_RUSER,
        m_axi_ddr_V_RRESP => ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => grp_conv_layer_fu_305_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0,
        TO_r => grp_conv_layer_fu_305_TO_r,
        TI => grp_conv_layer_fu_305_TI,
        K => grp_conv_layer_fu_305_K,
        P => grp_conv_layer_fu_305_P,
        OFFSET => grp_conv_layer_fu_305_OFFSET);

    grp_add_fu_344 : component add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_add_fu_344_ap_start,
        ap_done => grp_add_fu_344_ap_done,
        ap_idle => grp_add_fu_344_ap_idle,
        ap_ready => grp_add_fu_344_ap_ready,
        input1_V_address0 => grp_add_fu_344_input1_V_address0,
        input1_V_ce0 => grp_add_fu_344_input1_V_ce0,
        input1_V_q0 => grp_add_fu_344_input1_V_q0,
        output_V_address1 => grp_add_fu_344_output_V_address1,
        output_V_ce1 => grp_add_fu_344_output_V_ce1,
        output_V_we1 => grp_add_fu_344_output_V_we1,
        output_V_d1 => grp_add_fu_344_output_V_d1,
        SCALE1 => grp_add_fu_344_SCALE1,
        SCALE2 => grp_add_fu_344_SCALE2,
        buf1_V_address0 => grp_add_fu_344_buf1_V_address0,
        buf1_V_ce0 => grp_add_fu_344_buf1_V_ce0,
        buf1_V_q0 => buf1_V_q0);

    grp_fc_fu_366 : component fc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_fu_366_ap_start,
        ap_done => grp_fc_fu_366_ap_done,
        ap_idle => grp_fc_fu_366_ap_idle,
        ap_ready => grp_fc_fu_366_ap_ready,
        input_V_address0 => grp_fc_fu_366_input_V_address0,
        input_V_ce0 => grp_fc_fu_366_input_V_ce0,
        input_V_q0 => fc_in_V_q0,
        output_r_address0 => grp_fc_fu_366_output_r_address0,
        output_r_ce0 => grp_fc_fu_366_output_r_ce0,
        output_r_we0 => grp_fc_fu_366_output_r_we0,
        output_r_d0 => grp_fc_fu_366_output_r_d0,
        m_axi_ddr_V_AWVALID => grp_fc_fu_366_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => grp_fc_fu_366_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => grp_fc_fu_366_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => grp_fc_fu_366_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => grp_fc_fu_366_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => grp_fc_fu_366_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => grp_fc_fu_366_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => grp_fc_fu_366_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => grp_fc_fu_366_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => grp_fc_fu_366_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => grp_fc_fu_366_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => grp_fc_fu_366_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => grp_fc_fu_366_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => grp_fc_fu_366_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => grp_fc_fu_366_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => grp_fc_fu_366_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => grp_fc_fu_366_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => grp_fc_fu_366_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => grp_fc_fu_366_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => grp_fc_fu_366_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => grp_fc_fu_366_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => grp_fc_fu_366_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => grp_fc_fu_366_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => grp_fc_fu_366_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => grp_fc_fu_366_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => grp_fc_fu_366_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => grp_fc_fu_366_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => grp_fc_fu_366_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => grp_fc_fu_366_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => grp_fc_fu_366_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => ddr_V_RVALID,
        m_axi_ddr_V_RREADY => grp_fc_fu_366_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => ddr_V_RDATA,
        m_axi_ddr_V_RLAST => ddr_V_RLAST,
        m_axi_ddr_V_RID => ddr_V_RID,
        m_axi_ddr_V_RUSER => ddr_V_RUSER,
        m_axi_ddr_V_RRESP => ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => grp_fc_fu_366_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0);

    grp_average_pool_fu_376 : component average_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_average_pool_fu_376_ap_start,
        ap_done => grp_average_pool_fu_376_ap_done,
        ap_idle => grp_average_pool_fu_376_ap_idle,
        ap_ready => grp_average_pool_fu_376_ap_ready,
        input_V_address0 => grp_average_pool_fu_376_input_V_address0,
        input_V_ce0 => grp_average_pool_fu_376_input_V_ce0,
        input_V_q0 => buf0_V_q0,
        output_V_address1 => grp_average_pool_fu_376_output_V_address1,
        output_V_ce1 => grp_average_pool_fu_376_output_V_ce1,
        output_V_we1 => grp_average_pool_fu_376_output_V_we1,
        output_V_d1 => grp_average_pool_fu_376_output_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_add_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_add_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_add_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_add_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_average_pool_fu_376_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_average_pool_fu_376_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_average_pool_fu_376_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_average_pool_fu_376_ap_ready = ap_const_logic_1)) then 
                    grp_average_pool_fu_376_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_layer_fu_305_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_layer_fu_305_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_conv_layer_fu_305_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_layer_fu_305_ap_ready = ap_const_logic_1)) then 
                    grp_conv_layer_fu_305_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_fu_366_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_fu_366_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_fc_fu_366_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_fu_366_ap_ready = ap_const_logic_1)) then 
                    grp_fc_fu_366_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    startt_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                startt_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((startt_V_1_ack_out = ap_const_logic_1) and (startt_V_1_vld_out = ap_const_logic_1))) then 
                                        startt_V_1_sel_rd <= not(startt_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    startt_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                startt_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((startt_V_1_ack_in = ap_const_logic_1) and (startt_V_1_vld_in = ap_const_logic_1))) then 
                                        startt_V_1_sel_wr <= not(startt_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    startt_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                startt_V_1_state <= ap_const_lv2_0;
            else
                if ((((startt_V_1_state = ap_const_lv2_2) and (startt_V_1_vld_in = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_1_vld_in = ap_const_logic_0) and (startt_V_1_ack_out = ap_const_logic_1)))) then 
                    startt_V_1_state <= ap_const_lv2_2;
                elsif ((((startt_V_1_state = ap_const_lv2_1) and (startt_V_TREADY = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_TREADY = ap_const_logic_0) and (startt_V_1_vld_in = ap_const_logic_1)))) then 
                    startt_V_1_state <= ap_const_lv2_1;
                elsif (((not(((startt_V_1_vld_in = ap_const_logic_0) and (startt_V_1_ack_out = ap_const_logic_1))) and not(((startt_V_TREADY = ap_const_logic_0) and (startt_V_1_vld_in = ap_const_logic_1))) and (startt_V_1_state = ap_const_lv2_3)) or ((startt_V_1_state = ap_const_lv2_1) and (startt_V_1_ack_out = ap_const_logic_1)) or ((startt_V_1_state = ap_const_lv2_2) and (startt_V_1_vld_in = ap_const_logic_1)))) then 
                    startt_V_1_state <= ap_const_lv2_3;
                else 
                    startt_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stopt_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stopt_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stopt_V_1_ack_out = ap_const_logic_1) and (stopt_V_1_vld_out = ap_const_logic_1))) then 
                                        stopt_V_1_sel_rd <= not(stopt_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stopt_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stopt_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stopt_V_1_ack_in = ap_const_logic_1) and (stopt_V_1_vld_in = ap_const_logic_1))) then 
                                        stopt_V_1_sel_wr <= not(stopt_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stopt_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stopt_V_1_state <= ap_const_lv2_0;
            else
                if ((((stopt_V_1_state = ap_const_lv2_2) and (stopt_V_1_vld_in = ap_const_logic_0)) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_1_vld_in = ap_const_logic_0) and (stopt_V_1_ack_out = ap_const_logic_1)))) then 
                    stopt_V_1_state <= ap_const_lv2_2;
                elsif ((((stopt_V_1_state = ap_const_lv2_1) and (stopt_V_TREADY = ap_const_logic_0)) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_TREADY = ap_const_logic_0) and (stopt_V_1_vld_in = ap_const_logic_1)))) then 
                    stopt_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stopt_V_1_vld_in = ap_const_logic_0) and (stopt_V_1_ack_out = ap_const_logic_1))) and not(((stopt_V_TREADY = ap_const_logic_0) and (stopt_V_1_vld_in = ap_const_logic_1))) and (stopt_V_1_state = ap_const_lv2_3)) or ((stopt_V_1_state = ap_const_lv2_1) and (stopt_V_1_ack_out = ap_const_logic_1)) or ((stopt_V_1_state = ap_const_lv2_2) and (stopt_V_1_vld_in = ap_const_logic_1)))) then 
                    stopt_V_1_state <= ap_const_lv2_3;
                else 
                    stopt_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sw0in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sw0in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((sw0in_V_0_ack_out = ap_const_logic_1) and (sw0in_V_0_vld_out = ap_const_logic_1))) then 
                                        sw0in_V_0_sel_rd <= not(sw0in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sw0in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sw0in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((sw0in_V_0_ack_in = ap_const_logic_1) and (sw0in_V_0_vld_in = ap_const_logic_1))) then 
                                        sw0in_V_0_sel_wr <= not(sw0in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sw0in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sw0in_V_0_state <= ap_const_lv2_0;
            else
                if ((((sw0in_V_0_state = ap_const_lv2_2) and (sw0in_V_0_vld_in = ap_const_logic_0)) or ((sw0in_V_0_state = ap_const_lv2_3) and (sw0in_V_0_vld_in = ap_const_logic_0) and (sw0in_V_0_ack_out = ap_const_logic_1)))) then 
                    sw0in_V_0_state <= ap_const_lv2_2;
                elsif ((((sw0in_V_0_state = ap_const_lv2_1) and (sw0in_V_0_ack_out = ap_const_logic_0)) or ((sw0in_V_0_state = ap_const_lv2_3) and (sw0in_V_0_ack_out = ap_const_logic_0) and (sw0in_V_0_vld_in = ap_const_logic_1)))) then 
                    sw0in_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sw0in_V_0_vld_in = ap_const_logic_0) and (sw0in_V_0_ack_out = ap_const_logic_1))) and not(((sw0in_V_0_ack_out = ap_const_logic_0) and (sw0in_V_0_vld_in = ap_const_logic_1))) and (sw0in_V_0_state = ap_const_lv2_3)) or ((sw0in_V_0_state = ap_const_lv2_1) and (sw0in_V_0_ack_out = ap_const_logic_1)) or ((sw0in_V_0_state = ap_const_lv2_2) and (sw0in_V_0_vld_in = ap_const_logic_1)))) then 
                    sw0in_V_0_state <= ap_const_lv2_3;
                else 
                    sw0in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln395_fu_759_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_294 <= i_fu_765_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (startt_V_1_ack_in = ap_const_logic_1))) then 
                i1_0_reg_294 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    l_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sw0in_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_0_reg_282 <= l_reg_794;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l_0_reg_282 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                l_reg_794 <= l_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0))) and (icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_0_10_reg_854 <= sw0in_V_0_data_out(95 downto 88);
                p_Result_0_11_reg_859 <= sw0in_V_0_data_out(103 downto 96);
                p_Result_0_12_reg_864 <= sw0in_V_0_data_out(111 downto 104);
                p_Result_0_13_reg_869 <= sw0in_V_0_data_out(119 downto 112);
                p_Result_0_14_reg_874 <= sw0in_V_0_data_out(127 downto 120);
                p_Result_0_1_reg_804 <= sw0in_V_0_data_out(15 downto 8);
                p_Result_0_2_reg_809 <= sw0in_V_0_data_out(23 downto 16);
                p_Result_0_3_reg_814 <= sw0in_V_0_data_out(31 downto 24);
                p_Result_0_4_reg_819 <= sw0in_V_0_data_out(39 downto 32);
                p_Result_0_5_reg_824 <= sw0in_V_0_data_out(47 downto 40);
                p_Result_0_6_reg_829 <= sw0in_V_0_data_out(55 downto 48);
                p_Result_0_7_reg_834 <= sw0in_V_0_data_out(63 downto 56);
                p_Result_0_8_reg_839 <= sw0in_V_0_data_out(71 downto 64);
                p_Result_0_9_reg_844 <= sw0in_V_0_data_out(79 downto 72);
                p_Result_0_s_reg_849 <= sw0in_V_0_data_out(87 downto 80);
                trunc_ln647_reg_799 <= trunc_ln647_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((startt_V_1_load_A = ap_const_logic_1)) then
                startt_V_1_payload_A <= zext_ln321_fu_754_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((startt_V_1_load_B = ap_const_logic_1)) then
                startt_V_1_payload_B <= zext_ln321_fu_754_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stopt_V_1_load_A = ap_const_logic_1)) then
                stopt_V_1_payload_A <= zext_ln321_1_fu_786_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stopt_V_1_load_B = ap_const_logic_1)) then
                stopt_V_1_payload_B <= zext_ln321_1_fu_786_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sw0in_V_0_load_A = ap_const_logic_1)) then
                sw0in_V_0_payload_A <= sw0in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sw0in_V_0_load_B = ap_const_logic_1)) then
                sw0in_V_0_payload_B <= sw0in_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, sw0in_V_0_vld_out, startt_V_TREADY, startt_V_1_ack_in, startt_V_1_state, stopt_V_TREADY, stopt_V_1_ack_in, stopt_V_1_state, ap_CS_fsm_state2, icmp_ln380_fu_538_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state7, grp_conv_layer_fu_305_ap_done, grp_add_fu_344_ap_done, grp_fc_fu_366_ap_done, grp_average_pool_fu_376_ap_done, icmp_ln395_fu_759_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0))) and (icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0))) and (icmp_ln380_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((sw0in_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (startt_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (startt_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln395_fu_759_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_add_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_conv_layer_fu_305_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_add_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_average_pool_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_fc_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((stopt_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if ((not(((stopt_V_1_state = ap_const_lv2_1) or (startt_V_1_state = ap_const_lv2_1) or (stopt_V_1_ack_in = ap_const_logic_0) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_TREADY = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(sw0in_V_0_vld_out, icmp_ln380_fu_538_p2)
    begin
                ap_block_state2 <= ((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state30_assign_proc : process(startt_V_TREADY, startt_V_1_state, stopt_V_TREADY, stopt_V_1_state)
    begin
                ap_block_state30 <= ((stopt_V_1_state = ap_const_lv2_1) or (startt_V_1_state = ap_const_lv2_1) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_TREADY = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_TREADY = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(startt_V_TREADY, startt_V_1_state, stopt_V_TREADY, stopt_V_1_ack_in, stopt_V_1_state, ap_CS_fsm_state30)
    begin
        if ((not(((stopt_V_1_state = ap_const_lv2_1) or (startt_V_1_state = ap_const_lv2_1) or (stopt_V_1_ack_in = ap_const_logic_0) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_TREADY = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(startt_V_TREADY, startt_V_1_state, stopt_V_TREADY, stopt_V_1_ack_in, stopt_V_1_state, ap_CS_fsm_state30)
    begin
        if ((not(((stopt_V_1_state = ap_const_lv2_1) or (startt_V_1_state = ap_const_lv2_1) or (stopt_V_1_ack_in = ap_const_logic_0) or ((stopt_V_1_state = ap_const_lv2_3) and (stopt_V_TREADY = ap_const_logic_0)) or ((startt_V_1_state = ap_const_lv2_3) and (startt_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf0_V_address0_assign_proc : process(grp_conv_layer_fu_305_input_V_address0, grp_add_fu_344_input1_V_address0, grp_average_pool_fu_376_input_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf0_V_address0 <= ap_const_lv12_C3F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf0_V_address0 <= grp_average_pool_fu_376_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf0_V_address0 <= grp_add_fu_344_input1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf0_V_address0 <= grp_conv_layer_fu_305_input_V_address0;
        else 
            buf0_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf0_V_address1_assign_proc : process(ap_CS_fsm_state3, grp_conv_layer_fu_305_output_V_address1, grp_add_fu_344_output_V_address1, ap_CS_fsm_state19, ap_CS_fsm_state23, zext_ln388_fu_554_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf0_V_address1 <= zext_ln388_fu_554_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf0_V_address1 <= grp_add_fu_344_output_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf0_V_address1 <= grp_conv_layer_fu_305_output_V_address1;
        else 
            buf0_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf0_V_ce0_assign_proc : process(grp_conv_layer_fu_305_input_V_ce0, grp_add_fu_344_input1_V_ce0, grp_average_pool_fu_376_input_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf0_V_ce0 <= grp_average_pool_fu_376_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf0_V_ce0 <= grp_add_fu_344_input1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf0_V_ce0 <= grp_conv_layer_fu_305_input_V_ce0;
        else 
            buf0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf0_V_ce1_assign_proc : process(sw0in_V_0_vld_out, ap_CS_fsm_state3, grp_conv_layer_fu_305_output_V_ce1, grp_add_fu_344_output_V_ce1, ap_CS_fsm_state19, ap_CS_fsm_state23)
    begin
        if (((sw0in_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buf0_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf0_V_ce1 <= grp_add_fu_344_output_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf0_V_ce1 <= grp_conv_layer_fu_305_output_V_ce1;
        else 
            buf0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf0_V_d1_assign_proc : process(ap_CS_fsm_state3, grp_conv_layer_fu_305_output_V_d1, grp_add_fu_344_output_V_d1, ap_CS_fsm_state19, ap_CS_fsm_state23, zext_ln180_fu_739_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf0_V_d1 <= zext_ln180_fu_739_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf0_V_d1 <= grp_add_fu_344_output_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf0_V_d1 <= grp_conv_layer_fu_305_output_V_d1;
        else 
            buf0_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf0_V_we1_assign_proc : process(sw0in_V_0_vld_out, ap_CS_fsm_state3, grp_conv_layer_fu_305_output_V_we1, grp_add_fu_344_output_V_we1, ap_CS_fsm_state19, ap_CS_fsm_state23)
    begin
        if (((sw0in_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buf0_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf0_V_we1 <= grp_add_fu_344_output_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf0_V_we1 <= grp_conv_layer_fu_305_output_V_we1;
        else 
            buf0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_V_address0_assign_proc : process(grp_conv_layer_fu_305_input_V_address0, grp_add_fu_344_buf1_V_address0, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf1_V_address0 <= grp_add_fu_344_buf1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            buf1_V_address0 <= grp_conv_layer_fu_305_input_V_address0;
        else 
            buf1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf1_V_ce0_assign_proc : process(grp_conv_layer_fu_305_input_V_ce0, grp_add_fu_344_buf1_V_ce0, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            buf1_V_ce0 <= grp_add_fu_344_buf1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            buf1_V_ce0 <= grp_conv_layer_fu_305_input_V_ce0;
        else 
            buf1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_V_ce1_assign_proc : process(grp_conv_layer_fu_305_output_V_ce1, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf1_V_ce1 <= grp_conv_layer_fu_305_output_V_ce1;
        else 
            buf1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_V_we1_assign_proc : process(grp_conv_layer_fu_305_output_V_we1, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            buf1_V_we1 <= grp_conv_layer_fu_305_output_V_we1;
        else 
            buf1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_V_address0_assign_proc : process(grp_conv_layer_fu_305_input_V_address0, grp_add_fu_344_input1_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf2_V_address0 <= grp_add_fu_344_input1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf2_V_address0 <= grp_conv_layer_fu_305_input_V_address0;
        else 
            buf2_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf2_V_address1_assign_proc : process(grp_conv_layer_fu_305_output_V_address1, grp_add_fu_344_output_V_address1, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf2_V_address1 <= grp_add_fu_344_output_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf2_V_address1 <= grp_conv_layer_fu_305_output_V_address1;
        else 
            buf2_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf2_V_ce0_assign_proc : process(grp_conv_layer_fu_305_input_V_ce0, grp_add_fu_344_input1_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf2_V_ce0 <= grp_add_fu_344_input1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf2_V_ce0 <= grp_conv_layer_fu_305_input_V_ce0;
        else 
            buf2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_V_ce1_assign_proc : process(grp_conv_layer_fu_305_output_V_ce1, grp_add_fu_344_output_V_ce1, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf2_V_ce1 <= grp_add_fu_344_output_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf2_V_ce1 <= grp_conv_layer_fu_305_output_V_ce1;
        else 
            buf2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_V_d1_assign_proc : process(grp_conv_layer_fu_305_output_V_d1, grp_add_fu_344_output_V_d1, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf2_V_d1 <= grp_add_fu_344_output_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf2_V_d1 <= grp_conv_layer_fu_305_output_V_d1;
        else 
            buf2_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf2_V_we1_assign_proc : process(grp_conv_layer_fu_305_output_V_we1, grp_add_fu_344_output_V_we1, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf2_V_we1 <= grp_add_fu_344_output_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf2_V_we1 <= grp_conv_layer_fu_305_output_V_we1;
        else 
            buf2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_V_ARADDR_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR, grp_fc_fu_366_m_axi_ddr_V_ARADDR, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARADDR <= grp_fc_fu_366_m_axi_ddr_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARADDR <= grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR;
        else 
            ddr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ddr_V_ARBURST_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST, grp_fc_fu_366_m_axi_ddr_V_ARBURST, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARBURST <= grp_fc_fu_366_m_axi_ddr_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARBURST <= grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST;
        else 
            ddr_V_ARBURST <= "XX";
        end if; 
    end process;


    ddr_V_ARCACHE_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE, grp_fc_fu_366_m_axi_ddr_V_ARCACHE, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARCACHE <= grp_fc_fu_366_m_axi_ddr_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARCACHE <= grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE;
        else 
            ddr_V_ARCACHE <= "XXXX";
        end if; 
    end process;


    ddr_V_ARID_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARID, grp_fc_fu_366_m_axi_ddr_V_ARID, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARID <= grp_fc_fu_366_m_axi_ddr_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARID <= grp_conv_layer_fu_305_m_axi_ddr_V_ARID;
        else 
            ddr_V_ARID <= "X";
        end if; 
    end process;


    ddr_V_ARLEN_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN, grp_fc_fu_366_m_axi_ddr_V_ARLEN, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARLEN <= grp_fc_fu_366_m_axi_ddr_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARLEN <= grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN;
        else 
            ddr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ddr_V_ARLOCK_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK, grp_fc_fu_366_m_axi_ddr_V_ARLOCK, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARLOCK <= grp_fc_fu_366_m_axi_ddr_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARLOCK <= grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK;
        else 
            ddr_V_ARLOCK <= "XX";
        end if; 
    end process;


    ddr_V_ARPROT_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT, grp_fc_fu_366_m_axi_ddr_V_ARPROT, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARPROT <= grp_fc_fu_366_m_axi_ddr_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARPROT <= grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT;
        else 
            ddr_V_ARPROT <= "XXX";
        end if; 
    end process;


    ddr_V_ARQOS_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS, grp_fc_fu_366_m_axi_ddr_V_ARQOS, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARQOS <= grp_fc_fu_366_m_axi_ddr_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARQOS <= grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS;
        else 
            ddr_V_ARQOS <= "XXXX";
        end if; 
    end process;


    ddr_V_ARREGION_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION, grp_fc_fu_366_m_axi_ddr_V_ARREGION, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARREGION <= grp_fc_fu_366_m_axi_ddr_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARREGION <= grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION;
        else 
            ddr_V_ARREGION <= "XXXX";
        end if; 
    end process;


    ddr_V_ARSIZE_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE, grp_fc_fu_366_m_axi_ddr_V_ARSIZE, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARSIZE <= grp_fc_fu_366_m_axi_ddr_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARSIZE <= grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE;
        else 
            ddr_V_ARSIZE <= "XXX";
        end if; 
    end process;


    ddr_V_ARUSER_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER, grp_fc_fu_366_m_axi_ddr_V_ARUSER, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARUSER <= grp_fc_fu_366_m_axi_ddr_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARUSER <= grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER;
        else 
            ddr_V_ARUSER <= "X";
        end if; 
    end process;


    ddr_V_ARVALID_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID, grp_fc_fu_366_m_axi_ddr_V_ARVALID, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_ARVALID <= grp_fc_fu_366_m_axi_ddr_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_ARVALID <= grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID;
        else 
            ddr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ddr_V_RREADY_assign_proc : process(grp_conv_layer_fu_305_m_axi_ddr_V_RREADY, grp_fc_fu_366_m_axi_ddr_V_RREADY, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ddr_V_RREADY <= grp_fc_fu_366_m_axi_ddr_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ddr_V_RREADY <= grp_conv_layer_fu_305_m_axi_ddr_V_RREADY;
        else 
            ddr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_V_address0_assign_proc : process(grp_fc_fu_366_input_V_address0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fc_in_V_address0 <= ap_const_lv4_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fc_in_V_address0 <= grp_fc_fu_366_input_V_address0;
        else 
            fc_in_V_address0 <= "XXXX";
        end if; 
    end process;


    fc_in_V_ce0_assign_proc : process(grp_fc_fu_366_input_V_ce0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fc_in_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fc_in_V_ce0 <= grp_fc_fu_366_input_V_ce0;
        else 
            fc_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_V_ce1_assign_proc : process(grp_average_pool_fu_376_output_V_ce1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fc_in_V_ce1 <= grp_average_pool_fu_376_output_V_ce1;
        else 
            fc_in_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_V_we1_assign_proc : process(grp_average_pool_fu_376_output_V_we1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fc_in_V_we1 <= grp_average_pool_fu_376_output_V_we1;
        else 
            fc_in_V_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    grp_add_fu_344_SCALE1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_add_fu_344_SCALE1 <= ap_const_lv32_3F11EB2A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_add_fu_344_SCALE1 <= ap_const_lv32_3F562C3D;
        else 
            grp_add_fu_344_SCALE1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_add_fu_344_SCALE2_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_add_fu_344_SCALE2 <= ap_const_lv32_3F472A84;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_add_fu_344_SCALE2 <= ap_const_lv32_3F9AF6D7;
        else 
            grp_add_fu_344_SCALE2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_add_fu_344_ap_start <= grp_add_fu_344_ap_start_reg;

    grp_add_fu_344_input1_V_q0_assign_proc : process(buf0_V_q0, buf2_V_q0, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_add_fu_344_input1_V_q0 <= buf2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_add_fu_344_input1_V_q0 <= buf0_V_q0;
        else 
            grp_add_fu_344_input1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_average_pool_fu_376_ap_start <= grp_average_pool_fu_376_ap_start_reg;

    grp_conv_layer_fu_305_K_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_conv_layer_fu_305_K <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_conv_layer_fu_305_K <= ap_const_lv4_1;
        else 
            grp_conv_layer_fu_305_K <= "XXXX";
        end if; 
    end process;


    grp_conv_layer_fu_305_OFFSET_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_788000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_547000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_446000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_342000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_101000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_conv_layer_fu_305_OFFSET <= ap_const_lv24_0;
        else 
            grp_conv_layer_fu_305_OFFSET <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_conv_layer_fu_305_P_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_conv_layer_fu_305_P <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_conv_layer_fu_305_P <= ap_const_lv1_0;
        else 
            grp_conv_layer_fu_305_P <= "X";
        end if; 
    end process;


    grp_conv_layer_fu_305_TI_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_conv_layer_fu_305_TI <= ap_const_lv8_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_conv_layer_fu_305_TI <= ap_const_lv8_40;
        else 
            grp_conv_layer_fu_305_TI <= "XXXXXXXX";
        end if; 
    end process;


    grp_conv_layer_fu_305_TO_r_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_conv_layer_fu_305_TO_r <= ap_const_lv7_20;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_conv_layer_fu_305_TO_r <= ap_const_lv7_8;
        else 
            grp_conv_layer_fu_305_TO_r <= "XXXXXXX";
        end if; 
    end process;

    grp_conv_layer_fu_305_ap_start <= grp_conv_layer_fu_305_ap_start_reg;

    grp_conv_layer_fu_305_input_V_q0_assign_proc : process(buf0_V_q0, buf1_V_q0, buf2_V_q0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_conv_layer_fu_305_input_V_q0 <= buf2_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_conv_layer_fu_305_input_V_q0 <= buf1_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_conv_layer_fu_305_input_V_q0 <= buf0_V_q0;
        else 
            grp_conv_layer_fu_305_input_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fc_fu_366_ap_start <= grp_fc_fu_366_ap_start_reg;
    grp_fu_388_p4 <= sw0in_V_0_data_out(15 downto 8);
    grp_fu_398_p4 <= sw0in_V_0_data_out(23 downto 16);
    grp_fu_408_p4 <= sw0in_V_0_data_out(31 downto 24);
    grp_fu_418_p4 <= sw0in_V_0_data_out(39 downto 32);
    grp_fu_428_p4 <= sw0in_V_0_data_out(47 downto 40);
    grp_fu_438_p4 <= sw0in_V_0_data_out(55 downto 48);
    grp_fu_448_p4 <= sw0in_V_0_data_out(63 downto 56);
    grp_fu_458_p4 <= sw0in_V_0_data_out(71 downto 64);
    grp_fu_468_p4 <= sw0in_V_0_data_out(79 downto 72);
    grp_fu_478_p4 <= sw0in_V_0_data_out(87 downto 80);
    grp_fu_488_p4 <= sw0in_V_0_data_out(95 downto 88);
    grp_fu_498_p4 <= sw0in_V_0_data_out(103 downto 96);
    grp_fu_508_p4 <= sw0in_V_0_data_out(111 downto 104);
    grp_fu_518_p4 <= sw0in_V_0_data_out(119 downto 112);
    grp_fu_528_p4 <= sw0in_V_0_data_out(127 downto 120);
    i_fu_765_p2 <= std_logic_vector(unsigned(i1_0_reg_294) + unsigned(ap_const_lv11_1));
    icmp_ln380_fu_538_p2 <= "1" when (l_0_reg_282 = ap_const_lv12_C40) else "0";
    icmp_ln395_fu_759_p2 <= "1" when (i1_0_reg_294 = ap_const_lv11_620) else "0";
    l_fu_544_p2 <= std_logic_vector(unsigned(l_0_reg_282) + unsigned(ap_const_lv12_1));

    outbuf_V_address1_assign_proc : process(ap_CS_fsm_state7, grp_conv_layer_fu_305_outbuf_V_4_address1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, zext_ln398_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outbuf_V_address1 <= zext_ln398_fu_771_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outbuf_V_address1 <= grp_conv_layer_fu_305_outbuf_V_4_address1;
        else 
            outbuf_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    outbuf_V_ce0_assign_proc : process(grp_conv_layer_fu_305_outbuf_V_4_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outbuf_V_ce0 <= grp_conv_layer_fu_305_outbuf_V_4_ce0;
        else 
            outbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_V_ce1_assign_proc : process(ap_CS_fsm_state7, grp_conv_layer_fu_305_outbuf_V_4_ce1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outbuf_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outbuf_V_ce1 <= grp_conv_layer_fu_305_outbuf_V_4_ce1;
        else 
            outbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_V_d1_assign_proc : process(ap_CS_fsm_state7, grp_conv_layer_fu_305_outbuf_V_4_d1, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outbuf_V_d1 <= ap_const_lv1536_lc_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outbuf_V_d1 <= grp_conv_layer_fu_305_outbuf_V_4_d1;
        else 
            outbuf_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outbuf_V_we1_assign_proc : process(ap_CS_fsm_state7, grp_conv_layer_fu_305_outbuf_V_4_we1, icmp_ln395_fu_759_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((icmp_ln395_fu_759_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            outbuf_V_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outbuf_V_we1 <= grp_conv_layer_fu_305_outbuf_V_4_we1;
        else 
            outbuf_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    startt_V_1_ack_in <= startt_V_1_state(1);
    startt_V_1_ack_out <= startt_V_TREADY;

    startt_V_1_data_out_assign_proc : process(startt_V_1_payload_A, startt_V_1_payload_B, startt_V_1_sel)
    begin
        if ((startt_V_1_sel = ap_const_logic_1)) then 
            startt_V_1_data_out <= startt_V_1_payload_B;
        else 
            startt_V_1_data_out <= startt_V_1_payload_A;
        end if; 
    end process;

    startt_V_1_load_A <= (startt_V_1_state_cmp_full and not(startt_V_1_sel_wr));
    startt_V_1_load_B <= (startt_V_1_state_cmp_full and startt_V_1_sel_wr);
    startt_V_1_sel <= startt_V_1_sel_rd;
    startt_V_1_state_cmp_full <= '0' when (startt_V_1_state = ap_const_lv2_1) else '1';

    startt_V_1_vld_in_assign_proc : process(startt_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (startt_V_1_ack_in = ap_const_logic_1))) then 
            startt_V_1_vld_in <= ap_const_logic_1;
        else 
            startt_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    startt_V_1_vld_out <= startt_V_1_state(0);
    startt_V_TDATA <= startt_V_1_data_out;

    startt_V_TDATA_blk_n_assign_proc : process(startt_V_1_state, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            startt_V_TDATA_blk_n <= startt_V_1_state(1);
        else 
            startt_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    startt_V_TVALID <= startt_V_1_state(0);
    stopt_V_1_ack_in <= stopt_V_1_state(1);
    stopt_V_1_ack_out <= stopt_V_TREADY;

    stopt_V_1_data_out_assign_proc : process(stopt_V_1_payload_A, stopt_V_1_payload_B, stopt_V_1_sel)
    begin
        if ((stopt_V_1_sel = ap_const_logic_1)) then 
            stopt_V_1_data_out <= stopt_V_1_payload_B;
        else 
            stopt_V_1_data_out <= stopt_V_1_payload_A;
        end if; 
    end process;

    stopt_V_1_load_A <= (stopt_V_1_state_cmp_full and not(stopt_V_1_sel_wr));
    stopt_V_1_load_B <= (stopt_V_1_state_cmp_full and stopt_V_1_sel_wr);
    stopt_V_1_sel <= stopt_V_1_sel_rd;
    stopt_V_1_state_cmp_full <= '0' when (stopt_V_1_state = ap_const_lv2_1) else '1';

    stopt_V_1_vld_in_assign_proc : process(stopt_V_1_ack_in, ap_CS_fsm_state29)
    begin
        if (((stopt_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            stopt_V_1_vld_in <= ap_const_logic_1;
        else 
            stopt_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stopt_V_1_vld_out <= stopt_V_1_state(0);
    stopt_V_TDATA <= stopt_V_1_data_out;

    stopt_V_TDATA_blk_n_assign_proc : process(stopt_V_1_state, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            stopt_V_TDATA_blk_n <= stopt_V_1_state(1);
        else 
            stopt_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stopt_V_TVALID <= stopt_V_1_state(0);
    sw0in_V_0_ack_in <= sw0in_V_0_state(1);

    sw0in_V_0_ack_out_assign_proc : process(sw0in_V_0_vld_out, ap_CS_fsm_state2, icmp_ln380_fu_538_p2, ap_CS_fsm_state3)
    begin
        if ((((sw0in_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (sw0in_V_0_vld_out = ap_const_logic_0))) and (icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sw0in_V_0_ack_out <= ap_const_logic_1;
        else 
            sw0in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    sw0in_V_0_data_out_assign_proc : process(sw0in_V_0_payload_A, sw0in_V_0_payload_B, sw0in_V_0_sel)
    begin
        if ((sw0in_V_0_sel = ap_const_logic_1)) then 
            sw0in_V_0_data_out <= sw0in_V_0_payload_B;
        else 
            sw0in_V_0_data_out <= sw0in_V_0_payload_A;
        end if; 
    end process;

    sw0in_V_0_load_A <= (sw0in_V_0_state_cmp_full and not(sw0in_V_0_sel_wr));
    sw0in_V_0_load_B <= (sw0in_V_0_state_cmp_full and sw0in_V_0_sel_wr);
    sw0in_V_0_sel <= sw0in_V_0_sel_rd;
    sw0in_V_0_state_cmp_full <= '0' when (sw0in_V_0_state = ap_const_lv2_1) else '1';
    sw0in_V_0_vld_in <= sw0in_V_TVALID;
    sw0in_V_0_vld_out <= sw0in_V_0_state(0);

    sw0in_V_TDATA_blk_n_assign_proc : process(sw0in_V_0_state, ap_CS_fsm_state2, icmp_ln380_fu_538_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln380_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sw0in_V_TDATA_blk_n <= sw0in_V_0_state(0);
        else 
            sw0in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sw0in_V_TREADY <= sw0in_V_0_state(1);
    tmp_fu_671_p33 <= (((((((((((((((((((((((((((((((grp_fu_528_p4 & zext_ln78_30_fu_667_p1) & zext_ln78_29_fu_663_p1) & zext_ln78_28_fu_659_p1) & zext_ln78_27_fu_655_p1) & zext_ln78_26_fu_651_p1) & zext_ln78_25_fu_647_p1) & zext_ln78_24_fu_643_p1) & zext_ln78_23_fu_639_p1) & zext_ln78_22_fu_635_p1) & zext_ln78_21_fu_631_p1) & zext_ln78_20_fu_627_p1) & zext_ln78_19_fu_623_p1) & zext_ln78_18_fu_619_p1) & zext_ln78_17_fu_615_p1) & zext_ln78_16_fu_611_p1) & zext_ln78_15_fu_604_p1) & zext_ln78_14_fu_601_p1) & zext_ln78_13_fu_598_p1) & zext_ln78_12_fu_595_p1) & zext_ln78_11_fu_592_p1) & zext_ln78_10_fu_589_p1) & zext_ln78_9_fu_586_p1) & zext_ln78_8_fu_583_p1) & zext_ln78_7_fu_580_p1) & zext_ln78_6_fu_577_p1) & zext_ln78_5_fu_574_p1) & zext_ln78_4_fu_571_p1) & zext_ln78_3_fu_568_p1) & zext_ln78_2_fu_565_p1) & zext_ln78_1_fu_562_p1) & zext_ln78_fu_559_p1);
    trunc_ln296_2_fu_776_p4 <= fc_in_V_q0(1019 downto 1016);
    trunc_ln647_1_fu_607_p1 <= sw0in_V_0_data_out(8 - 1 downto 0);
    trunc_ln647_fu_550_p1 <= sw0in_V_0_data_out(8 - 1 downto 0);
    trunc_ln_fu_744_p4 <= buf0_V_q0(282 downto 279);
    zext_ln180_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_671_p33),288));
    zext_ln321_1_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln296_2_fu_776_p4),8));
    zext_ln321_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_744_p4),8));
    zext_ln388_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_282),64));
    zext_ln398_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_294),64));
    zext_ln78_10_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_s_reg_849),9));
    zext_ln78_11_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_10_reg_854),9));
    zext_ln78_12_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_11_reg_859),9));
    zext_ln78_13_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_12_reg_864),9));
    zext_ln78_14_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_13_reg_869),9));
    zext_ln78_15_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_14_reg_874),9));
    zext_ln78_16_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_1_fu_607_p1),9));
    zext_ln78_17_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_388_p4),9));
    zext_ln78_18_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_398_p4),9));
    zext_ln78_19_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_408_p4),9));
    zext_ln78_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_1_reg_804),9));
    zext_ln78_20_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_418_p4),9));
    zext_ln78_21_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_428_p4),9));
    zext_ln78_22_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_438_p4),9));
    zext_ln78_23_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_448_p4),9));
    zext_ln78_24_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_458_p4),9));
    zext_ln78_25_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_468_p4),9));
    zext_ln78_26_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_478_p4),9));
    zext_ln78_27_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_488_p4),9));
    zext_ln78_28_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_498_p4),9));
    zext_ln78_29_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_508_p4),9));
    zext_ln78_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_2_reg_809),9));
    zext_ln78_30_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_518_p4),9));
    zext_ln78_3_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_3_reg_814),9));
    zext_ln78_4_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_4_reg_819),9));
    zext_ln78_5_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_5_reg_824),9));
    zext_ln78_6_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_6_reg_829),9));
    zext_ln78_7_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_7_reg_834),9));
    zext_ln78_8_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_8_reg_839),9));
    zext_ln78_9_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_0_9_reg_844),9));
    zext_ln78_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_reg_799),9));
end behav;
