// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_load_weight (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_we0,
        weight_V_d0,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        och_0,
        och_0_out_din,
        och_0_out_full_n,
        och_0_out_write
);

parameter    ap_ST_fsm_state1 = 137'd1;
parameter    ap_ST_fsm_state2 = 137'd2;
parameter    ap_ST_fsm_state3 = 137'd4;
parameter    ap_ST_fsm_state4 = 137'd8;
parameter    ap_ST_fsm_state5 = 137'd16;
parameter    ap_ST_fsm_state6 = 137'd32;
parameter    ap_ST_fsm_state7 = 137'd64;
parameter    ap_ST_fsm_state8 = 137'd128;
parameter    ap_ST_fsm_state9 = 137'd256;
parameter    ap_ST_fsm_state10 = 137'd512;
parameter    ap_ST_fsm_state11 = 137'd1024;
parameter    ap_ST_fsm_state12 = 137'd2048;
parameter    ap_ST_fsm_state13 = 137'd4096;
parameter    ap_ST_fsm_state14 = 137'd8192;
parameter    ap_ST_fsm_state15 = 137'd16384;
parameter    ap_ST_fsm_state16 = 137'd32768;
parameter    ap_ST_fsm_state17 = 137'd65536;
parameter    ap_ST_fsm_state18 = 137'd131072;
parameter    ap_ST_fsm_state19 = 137'd262144;
parameter    ap_ST_fsm_state20 = 137'd524288;
parameter    ap_ST_fsm_state21 = 137'd1048576;
parameter    ap_ST_fsm_state22 = 137'd2097152;
parameter    ap_ST_fsm_state23 = 137'd4194304;
parameter    ap_ST_fsm_state24 = 137'd8388608;
parameter    ap_ST_fsm_state25 = 137'd16777216;
parameter    ap_ST_fsm_state26 = 137'd33554432;
parameter    ap_ST_fsm_state27 = 137'd67108864;
parameter    ap_ST_fsm_state28 = 137'd134217728;
parameter    ap_ST_fsm_state29 = 137'd268435456;
parameter    ap_ST_fsm_state30 = 137'd536870912;
parameter    ap_ST_fsm_state31 = 137'd1073741824;
parameter    ap_ST_fsm_state32 = 137'd2147483648;
parameter    ap_ST_fsm_state33 = 137'd4294967296;
parameter    ap_ST_fsm_state34 = 137'd8589934592;
parameter    ap_ST_fsm_state35 = 137'd17179869184;
parameter    ap_ST_fsm_state36 = 137'd34359738368;
parameter    ap_ST_fsm_state37 = 137'd68719476736;
parameter    ap_ST_fsm_state38 = 137'd137438953472;
parameter    ap_ST_fsm_state39 = 137'd274877906944;
parameter    ap_ST_fsm_state40 = 137'd549755813888;
parameter    ap_ST_fsm_state41 = 137'd1099511627776;
parameter    ap_ST_fsm_state42 = 137'd2199023255552;
parameter    ap_ST_fsm_state43 = 137'd4398046511104;
parameter    ap_ST_fsm_state44 = 137'd8796093022208;
parameter    ap_ST_fsm_state45 = 137'd17592186044416;
parameter    ap_ST_fsm_state46 = 137'd35184372088832;
parameter    ap_ST_fsm_state47 = 137'd70368744177664;
parameter    ap_ST_fsm_state48 = 137'd140737488355328;
parameter    ap_ST_fsm_state49 = 137'd281474976710656;
parameter    ap_ST_fsm_state50 = 137'd562949953421312;
parameter    ap_ST_fsm_state51 = 137'd1125899906842624;
parameter    ap_ST_fsm_state52 = 137'd2251799813685248;
parameter    ap_ST_fsm_state53 = 137'd4503599627370496;
parameter    ap_ST_fsm_state54 = 137'd9007199254740992;
parameter    ap_ST_fsm_state55 = 137'd18014398509481984;
parameter    ap_ST_fsm_state56 = 137'd36028797018963968;
parameter    ap_ST_fsm_state57 = 137'd72057594037927936;
parameter    ap_ST_fsm_state58 = 137'd144115188075855872;
parameter    ap_ST_fsm_state59 = 137'd288230376151711744;
parameter    ap_ST_fsm_state60 = 137'd576460752303423488;
parameter    ap_ST_fsm_state61 = 137'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 137'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 137'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 137'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 137'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 137'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 137'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 137'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 137'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 137'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 137'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 137'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 137'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 137'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 137'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 137'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 137'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 137'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 137'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 137'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 137'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 137'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 137'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 137'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 137'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 137'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 137'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 137'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 137'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 137'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 137'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 137'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 137'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 137'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 137'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 137'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 137'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 137'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 137'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 137'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 137'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 137'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 137'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 137'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 137'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 137'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 137'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 137'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 137'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 137'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 137'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 137'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 137'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 137'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 137'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 137'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 137'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 137'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 137'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 137'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 137'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 137'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 137'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 137'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 137'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 137'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 137'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 137'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 137'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 137'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 137'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 137'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 137'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 137'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 137'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 137'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 137'd87112285931760246646623899502532662132736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] weight_V_address0;
output   weight_V_ce0;
output   weight_V_we0;
output  [1023:0] weight_V_d0;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [31:0] m_axi_ddr_V_AWADDR;
output  [0:0] m_axi_ddr_V_AWID;
output  [31:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [0:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [127:0] m_axi_ddr_V_WDATA;
output  [15:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [0:0] m_axi_ddr_V_WID;
output  [0:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [31:0] m_axi_ddr_V_ARADDR;
output  [0:0] m_axi_ddr_V_ARID;
output  [31:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [0:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [127:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [0:0] m_axi_ddr_V_RID;
input  [0:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [0:0] m_axi_ddr_V_BID;
input  [0:0] m_axi_ddr_V_BUSER;
input  [9:0] och_0;
output  [9:0] och_0_out_din;
input   och_0_out_full_n;
output   och_0_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] weight_V_address0;
reg weight_V_ce0;
reg weight_V_we0;
reg[1023:0] weight_V_d0;
reg m_axi_ddr_V_ARVALID;
reg m_axi_ddr_V_RREADY;
reg och_0_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [136:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ddr_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    ddr_V_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state136;
reg    och_0_out_blk_n;
reg   [127:0] reg_257;
reg   [127:0] reg_261;
reg   [127:0] reg_265;
reg   [127:0] reg_269;
reg   [127:0] reg_273;
reg   [127:0] reg_277;
reg   [127:0] reg_281;
reg   [127:0] reg_285;
reg   [19:0] lshr_ln_reg_663;
reg    ap_block_state1;
wire    ap_CS_fsm_state137;
wire   [63:0] zext_ln269_fu_317_p1;
wire   [1023:0] tmp_680_i_i_fu_327_p9;
wire   [1023:0] tmp_808_i_i_fu_348_p9;
wire   [1023:0] tmp_936_i_i_fu_369_p9;
wire   [1023:0] tmp_1064_i_i_fu_390_p9;
wire   [1023:0] tmp_1192_i_i_fu_411_p9;
wire   [1023:0] tmp_1320_i_i_fu_432_p9;
wire   [1023:0] tmp_1448_i_i_fu_453_p9;
wire   [1023:0] tmp_1576_i_i_fu_474_p9;
wire   [1023:0] tmp_1704_i_i_fu_495_p9;
wire   [1023:0] tmp_1832_i_i_fu_516_p9;
wire   [1023:0] tmp_1960_i_i_fu_537_p9;
wire   [1023:0] tmp_2088_i_i_fu_558_p9;
wire   [1023:0] tmp_2216_i_i_fu_579_p9;
wire   [1023:0] tmp_2344_i_i_fu_600_p9;
wire   [1023:0] tmp_2472_i_i_fu_621_p9;
wire   [1023:0] tmp_2600_i_i_fu_642_p9;
wire   [20:0] shl_ln_fu_289_p3;
wire   [23:0] zext_ln340_fu_297_p1;
wire   [23:0] add_ln340_fu_301_p2;
reg   [136:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 137'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state137)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((och_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        lshr_ln_reg_663 <= {{add_ln340_fu_301_p2[23:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state129)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state121)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state105)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_257 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state122)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state114)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state98)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_261 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state131)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state123)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state115)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state99)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        reg_265 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state132)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state108)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state100)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_269 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state133)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state117)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state93)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state69)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_273 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state110)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state94)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state62)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        reg_277 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state135)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state127)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state119)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state111)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state95)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state87)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state79)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state63)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        reg_281 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state128)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state120)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state112)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state104)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state96)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state88)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state80)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state136)))) begin
        reg_285 <= m_axi_ddr_V_RDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ddr_V_blk_n_AR = m_axi_ddr_V_ARREADY;
    end else begin
        ddr_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ddr_V_blk_n_R = m_axi_ddr_V_RVALID;
    end else begin
        ddr_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_ddr_V_ARREADY == 1'b1))) begin
        m_axi_ddr_V_ARVALID = 1'b1;
    end else begin
        m_axi_ddr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state135)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state133)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state132)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state131)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state129)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state128)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state127)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state123)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state122)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state121)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state120)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state119)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state117)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state115)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state114)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state112)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state111)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state110)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state108)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state105)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state104)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state100)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state99)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state98)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state96)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state95)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state94)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state93)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state88)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state87)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state80)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state79)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state69)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state63)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state62)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state136)))) begin
        m_axi_ddr_V_RREADY = 1'b1;
    end else begin
        m_axi_ddr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        och_0_out_blk_n = och_0_out_full_n;
    end else begin
        och_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((och_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        och_0_out_write = 1'b1;
    end else begin
        och_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        weight_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        weight_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        weight_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        weight_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        weight_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        weight_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        weight_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        weight_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        weight_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        weight_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        weight_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        weight_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        weight_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        weight_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        weight_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        weight_V_address0 = 64'd0;
    end else begin
        weight_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state129)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state121)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state105)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        weight_V_d0 = tmp_2600_i_i_fu_642_p9;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        weight_V_d0 = tmp_2472_i_i_fu_621_p9;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        weight_V_d0 = tmp_2344_i_i_fu_600_p9;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        weight_V_d0 = tmp_2216_i_i_fu_579_p9;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        weight_V_d0 = tmp_2088_i_i_fu_558_p9;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        weight_V_d0 = tmp_1960_i_i_fu_537_p9;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        weight_V_d0 = tmp_1832_i_i_fu_516_p9;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        weight_V_d0 = tmp_1704_i_i_fu_495_p9;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        weight_V_d0 = tmp_1576_i_i_fu_474_p9;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        weight_V_d0 = tmp_1448_i_i_fu_453_p9;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        weight_V_d0 = tmp_1320_i_i_fu_432_p9;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        weight_V_d0 = tmp_1192_i_i_fu_411_p9;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        weight_V_d0 = tmp_1064_i_i_fu_390_p9;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        weight_V_d0 = tmp_936_i_i_fu_369_p9;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        weight_V_d0 = tmp_808_i_i_fu_348_p9;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        weight_V_d0 = tmp_680_i_i_fu_327_p9;
    end else begin
        weight_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state129)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state121)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state113)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state105)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state97)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        weight_V_we0 = 1'b1;
    end else begin
        weight_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((och_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_ddr_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state99 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state101 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state103 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_state105 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state106 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state107 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state108 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state109 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_state110 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state111 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state112 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state113 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state114 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        ap_ST_fsm_state115 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state115))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state116 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state117 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        ap_ST_fsm_state118 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state119 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state120 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        ap_ST_fsm_state121 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end
        end
        ap_ST_fsm_state122 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state123 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state124 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_state125 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end
        end
        ap_ST_fsm_state126 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state127 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_state128 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state128))) begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state129 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state129))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end
        end
        ap_ST_fsm_state130 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state131 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state131))) begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end
        end
        ap_ST_fsm_state132 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state133 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state134 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state135 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        ap_ST_fsm_state136 : begin
            if (((m_axi_ddr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state136))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln340_fu_301_p2 = ($signed(zext_ln340_fu_297_p1) + $signed(24'd8962048));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state1 = ((och_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign m_axi_ddr_V_ARADDR = zext_ln269_fu_317_p1;

assign m_axi_ddr_V_ARBURST = 2'd0;

assign m_axi_ddr_V_ARCACHE = 4'd0;

assign m_axi_ddr_V_ARID = 1'd0;

assign m_axi_ddr_V_ARLEN = 32'd128;

assign m_axi_ddr_V_ARLOCK = 2'd0;

assign m_axi_ddr_V_ARPROT = 3'd0;

assign m_axi_ddr_V_ARQOS = 4'd0;

assign m_axi_ddr_V_ARREGION = 4'd0;

assign m_axi_ddr_V_ARSIZE = 3'd0;

assign m_axi_ddr_V_ARUSER = 1'd0;

assign m_axi_ddr_V_AWADDR = 32'd0;

assign m_axi_ddr_V_AWBURST = 2'd0;

assign m_axi_ddr_V_AWCACHE = 4'd0;

assign m_axi_ddr_V_AWID = 1'd0;

assign m_axi_ddr_V_AWLEN = 32'd0;

assign m_axi_ddr_V_AWLOCK = 2'd0;

assign m_axi_ddr_V_AWPROT = 3'd0;

assign m_axi_ddr_V_AWQOS = 4'd0;

assign m_axi_ddr_V_AWREGION = 4'd0;

assign m_axi_ddr_V_AWSIZE = 3'd0;

assign m_axi_ddr_V_AWUSER = 1'd0;

assign m_axi_ddr_V_AWVALID = 1'b0;

assign m_axi_ddr_V_BREADY = 1'b0;

assign m_axi_ddr_V_WDATA = 128'd0;

assign m_axi_ddr_V_WID = 1'd0;

assign m_axi_ddr_V_WLAST = 1'b0;

assign m_axi_ddr_V_WSTRB = 16'd0;

assign m_axi_ddr_V_WUSER = 1'd0;

assign m_axi_ddr_V_WVALID = 1'b0;

assign och_0_out_din = och_0;

assign shl_ln_fu_289_p3 = {{och_0}, {11'd0}};

assign tmp_1064_i_i_fu_390_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1192_i_i_fu_411_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1320_i_i_fu_432_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1448_i_i_fu_453_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1576_i_i_fu_474_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1704_i_i_fu_495_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1832_i_i_fu_516_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_1960_i_i_fu_537_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_2088_i_i_fu_558_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_2216_i_i_fu_579_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_2344_i_i_fu_600_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_2472_i_i_fu_621_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_2600_i_i_fu_642_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_680_i_i_fu_327_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_808_i_i_fu_348_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign tmp_936_i_i_fu_369_p9 = {{{{{{{{reg_285}, {reg_281}}, {reg_277}}, {reg_273}}, {reg_269}}, {reg_265}}, {reg_261}}, {reg_257}};

assign zext_ln269_fu_317_p1 = lshr_ln_reg_663;

assign zext_ln340_fu_297_p1 = shl_ln_fu_289_p3;

endmodule //fc_load_weight
