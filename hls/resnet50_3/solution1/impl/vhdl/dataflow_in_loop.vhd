-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    och_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    input_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    input_V_we0 : OUT STD_LOGIC;
    input_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_d1 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    input_V_q1 : IN STD_LOGIC_VECTOR (1023 downto 0);
    input_V_we1 : OUT STD_LOGIC;
    bias_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_we0 : OUT STD_LOGIC;
    bias_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    bias_ce1 : OUT STD_LOGIC;
    bias_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bias_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_we1 : OUT STD_LOGIC;
    scale_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    scale_ce0 : OUT STD_LOGIC;
    scale_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    scale_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale_we0 : OUT STD_LOGIC;
    scale_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    scale_ce1 : OUT STD_LOGIC;
    scale_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    scale_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale_we1 : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_we0 : OUT STD_LOGIC;
    och_0_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal weight_V_i_q0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal weight_V_t_q0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal fc_load_weight_U0_ap_start : STD_LOGIC;
    signal fc_load_weight_U0_ap_done : STD_LOGIC;
    signal fc_load_weight_U0_ap_continue : STD_LOGIC;
    signal fc_load_weight_U0_ap_idle : STD_LOGIC;
    signal fc_load_weight_U0_ap_ready : STD_LOGIC;
    signal fc_load_weight_U0_weight_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_weight_V_ce0 : STD_LOGIC;
    signal fc_load_weight_U0_weight_V_we0 : STD_LOGIC;
    signal fc_load_weight_U0_weight_V_d0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal fc_load_weight_U0_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal fc_load_weight_U0_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal fc_load_weight_U0_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal fc_load_weight_U0_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_load_weight_U0_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal fc_load_weight_U0_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal fc_load_weight_U0_och_0_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_load_weight_U0_och_0_out_write : STD_LOGIC;
    signal ap_channel_done_weight_V : STD_LOGIC;
    signal fc_load_weight_U0_weight_V_full_n : STD_LOGIC;
    signal fc_compute_1_U0_ap_start : STD_LOGIC;
    signal fc_compute_1_U0_ap_done : STD_LOGIC;
    signal fc_compute_1_U0_ap_continue : STD_LOGIC;
    signal fc_compute_1_U0_ap_idle : STD_LOGIC;
    signal fc_compute_1_U0_ap_ready : STD_LOGIC;
    signal fc_compute_1_U0_weight_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_compute_1_U0_weight_V_ce0 : STD_LOGIC;
    signal fc_compute_1_U0_input_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc_compute_1_U0_input_V_ce0 : STD_LOGIC;
    signal fc_compute_1_U0_bias_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_compute_1_U0_bias_ce0 : STD_LOGIC;
    signal fc_compute_1_U0_scale_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_compute_1_U0_scale_ce0 : STD_LOGIC;
    signal fc_compute_1_U0_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_compute_1_U0_output_r_ce0 : STD_LOGIC;
    signal fc_compute_1_U0_output_r_we0 : STD_LOGIC;
    signal fc_compute_1_U0_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_compute_1_U0_och_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal weight_V_i_full_n : STD_LOGIC;
    signal weight_V_t_empty_n : STD_LOGIC;
    signal och_0_c_full_n : STD_LOGIC;
    signal och_0_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal och_0_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal fc_load_weight_U0_start_full_n : STD_LOGIC;
    signal fc_load_weight_U0_start_write : STD_LOGIC;
    signal fc_compute_1_U0_start_full_n : STD_LOGIC;
    signal fc_compute_1_U0_start_write : STD_LOGIC;

    component fc_load_weight IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weight_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        weight_V_ce0 : OUT STD_LOGIC;
        weight_V_we0 : OUT STD_LOGIC;
        weight_V_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        och_0 : IN STD_LOGIC_VECTOR (9 downto 0);
        och_0_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        och_0_out_full_n : IN STD_LOGIC;
        och_0_out_write : OUT STD_LOGIC );
    end component;


    component fc_compute_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weight_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        weight_V_ce0 : OUT STD_LOGIC;
        weight_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        scale_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        scale_ce0 : OUT STD_LOGIC;
        scale_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        och_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        och_empty_n : IN STD_LOGIC;
        och_read : OUT STD_LOGIC );
    end component;


    component dataflow_in_loop_weight_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (1023 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    weight_V_U : component dataflow_in_loop_weight_V
    generic map (
        DataWidth => 1024,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => fc_load_weight_U0_weight_V_address0,
        i_ce0 => fc_load_weight_U0_weight_V_ce0,
        i_we0 => fc_load_weight_U0_weight_V_we0,
        i_d0 => fc_load_weight_U0_weight_V_d0,
        i_q0 => weight_V_i_q0,
        t_address0 => fc_compute_1_U0_weight_V_address0,
        t_ce0 => fc_compute_1_U0_weight_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv1024_lc_1,
        t_q0 => weight_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => weight_V_i_full_n,
        i_write => fc_load_weight_U0_ap_done,
        t_empty_n => weight_V_t_empty_n,
        t_read => fc_compute_1_U0_ap_ready);

    fc_load_weight_U0 : component fc_load_weight
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fc_load_weight_U0_ap_start,
        ap_done => fc_load_weight_U0_ap_done,
        ap_continue => fc_load_weight_U0_ap_continue,
        ap_idle => fc_load_weight_U0_ap_idle,
        ap_ready => fc_load_weight_U0_ap_ready,
        weight_V_address0 => fc_load_weight_U0_weight_V_address0,
        weight_V_ce0 => fc_load_weight_U0_weight_V_ce0,
        weight_V_we0 => fc_load_weight_U0_weight_V_we0,
        weight_V_d0 => fc_load_weight_U0_weight_V_d0,
        m_axi_ddr_V_AWVALID => fc_load_weight_U0_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => fc_load_weight_U0_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => fc_load_weight_U0_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => fc_load_weight_U0_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => fc_load_weight_U0_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => fc_load_weight_U0_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => fc_load_weight_U0_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => fc_load_weight_U0_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => fc_load_weight_U0_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => fc_load_weight_U0_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => fc_load_weight_U0_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => fc_load_weight_U0_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => fc_load_weight_U0_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => fc_load_weight_U0_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => fc_load_weight_U0_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => fc_load_weight_U0_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => fc_load_weight_U0_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => fc_load_weight_U0_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => fc_load_weight_U0_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => fc_load_weight_U0_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => fc_load_weight_U0_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => fc_load_weight_U0_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => fc_load_weight_U0_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => fc_load_weight_U0_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => fc_load_weight_U0_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => fc_load_weight_U0_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => fc_load_weight_U0_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => fc_load_weight_U0_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => fc_load_weight_U0_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => fc_load_weight_U0_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY => fc_load_weight_U0_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST => m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID => m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER => m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP => m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => fc_load_weight_U0_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0,
        och_0 => och_0,
        och_0_out_din => fc_load_weight_U0_och_0_out_din,
        och_0_out_full_n => och_0_c_full_n,
        och_0_out_write => fc_load_weight_U0_och_0_out_write);

    fc_compute_1_U0 : component fc_compute_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fc_compute_1_U0_ap_start,
        ap_done => fc_compute_1_U0_ap_done,
        ap_continue => fc_compute_1_U0_ap_continue,
        ap_idle => fc_compute_1_U0_ap_idle,
        ap_ready => fc_compute_1_U0_ap_ready,
        weight_V_address0 => fc_compute_1_U0_weight_V_address0,
        weight_V_ce0 => fc_compute_1_U0_weight_V_ce0,
        weight_V_q0 => weight_V_t_q0,
        input_V_address0 => fc_compute_1_U0_input_V_address0,
        input_V_ce0 => fc_compute_1_U0_input_V_ce0,
        input_V_q0 => input_V_q0,
        bias_address0 => fc_compute_1_U0_bias_address0,
        bias_ce0 => fc_compute_1_U0_bias_ce0,
        bias_q0 => bias_q0,
        scale_address0 => fc_compute_1_U0_scale_address0,
        scale_ce0 => fc_compute_1_U0_scale_ce0,
        scale_q0 => scale_q0,
        output_r_address0 => fc_compute_1_U0_output_r_address0,
        output_r_ce0 => fc_compute_1_U0_output_r_ce0,
        output_r_we0 => fc_compute_1_U0_output_r_we0,
        output_r_d0 => fc_compute_1_U0_output_r_d0,
        och_dout => och_0_c_dout,
        och_empty_n => och_0_c_empty_n,
        och_read => fc_compute_1_U0_och_read);

    och_0_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fc_load_weight_U0_och_0_out_din,
        if_full_n => och_0_c_full_n,
        if_write => fc_load_weight_U0_och_0_out_write,
        if_dout => och_0_c_dout,
        if_empty_n => och_0_c_empty_n,
        if_read => fc_compute_1_U0_och_read);




    ap_channel_done_weight_V <= fc_load_weight_U0_ap_done;
    ap_done <= fc_compute_1_U0_ap_done;
    ap_idle <= (fc_load_weight_U0_ap_idle and fc_compute_1_U0_ap_idle and (weight_V_t_empty_n xor ap_const_logic_1));
    ap_ready <= fc_load_weight_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= fc_compute_1_U0_ap_done;
    ap_sync_ready <= fc_load_weight_U0_ap_ready;
    bias_address0 <= fc_compute_1_U0_bias_address0;
    bias_address1 <= ap_const_lv10_0;
    bias_ce0 <= fc_compute_1_U0_bias_ce0;
    bias_ce1 <= ap_const_logic_0;
    bias_d0 <= ap_const_lv32_0;
    bias_d1 <= ap_const_lv32_0;
    bias_we0 <= ap_const_logic_0;
    bias_we1 <= ap_const_logic_0;
    fc_compute_1_U0_ap_continue <= ap_continue;
    fc_compute_1_U0_ap_start <= weight_V_t_empty_n;
    fc_compute_1_U0_start_full_n <= ap_const_logic_1;
    fc_compute_1_U0_start_write <= ap_const_logic_0;
    fc_load_weight_U0_ap_continue <= weight_V_i_full_n;
    fc_load_weight_U0_ap_start <= ap_start;
    fc_load_weight_U0_start_full_n <= ap_const_logic_1;
    fc_load_weight_U0_start_write <= ap_const_logic_0;
    fc_load_weight_U0_weight_V_full_n <= weight_V_i_full_n;
    input_V_address0 <= fc_compute_1_U0_input_V_address0;
    input_V_address1 <= ap_const_lv4_0;
    input_V_ce0 <= fc_compute_1_U0_input_V_ce0;
    input_V_ce1 <= ap_const_logic_0;
    input_V_d0 <= ap_const_lv1024_lc_1;
    input_V_d1 <= ap_const_lv1024_lc_1;
    input_V_we0 <= ap_const_logic_0;
    input_V_we1 <= ap_const_logic_0;
    m_axi_ddr_V_ARADDR <= fc_load_weight_U0_m_axi_ddr_V_ARADDR;
    m_axi_ddr_V_ARBURST <= fc_load_weight_U0_m_axi_ddr_V_ARBURST;
    m_axi_ddr_V_ARCACHE <= fc_load_weight_U0_m_axi_ddr_V_ARCACHE;
    m_axi_ddr_V_ARID <= fc_load_weight_U0_m_axi_ddr_V_ARID;
    m_axi_ddr_V_ARLEN <= fc_load_weight_U0_m_axi_ddr_V_ARLEN;
    m_axi_ddr_V_ARLOCK <= fc_load_weight_U0_m_axi_ddr_V_ARLOCK;
    m_axi_ddr_V_ARPROT <= fc_load_weight_U0_m_axi_ddr_V_ARPROT;
    m_axi_ddr_V_ARQOS <= fc_load_weight_U0_m_axi_ddr_V_ARQOS;
    m_axi_ddr_V_ARREGION <= fc_load_weight_U0_m_axi_ddr_V_ARREGION;
    m_axi_ddr_V_ARSIZE <= fc_load_weight_U0_m_axi_ddr_V_ARSIZE;
    m_axi_ddr_V_ARUSER <= fc_load_weight_U0_m_axi_ddr_V_ARUSER;
    m_axi_ddr_V_ARVALID <= fc_load_weight_U0_m_axi_ddr_V_ARVALID;
    m_axi_ddr_V_AWADDR <= ap_const_lv32_0;
    m_axi_ddr_V_AWBURST <= ap_const_lv2_0;
    m_axi_ddr_V_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr_V_AWID <= ap_const_lv1_0;
    m_axi_ddr_V_AWLEN <= ap_const_lv32_0;
    m_axi_ddr_V_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr_V_AWPROT <= ap_const_lv3_0;
    m_axi_ddr_V_AWQOS <= ap_const_lv4_0;
    m_axi_ddr_V_AWREGION <= ap_const_lv4_0;
    m_axi_ddr_V_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr_V_AWUSER <= ap_const_lv1_0;
    m_axi_ddr_V_AWVALID <= ap_const_logic_0;
    m_axi_ddr_V_BREADY <= ap_const_logic_0;
    m_axi_ddr_V_RREADY <= fc_load_weight_U0_m_axi_ddr_V_RREADY;
    m_axi_ddr_V_WDATA <= ap_const_lv128_lc_1;
    m_axi_ddr_V_WID <= ap_const_lv1_0;
    m_axi_ddr_V_WLAST <= ap_const_logic_0;
    m_axi_ddr_V_WSTRB <= ap_const_lv16_0;
    m_axi_ddr_V_WUSER <= ap_const_lv1_0;
    m_axi_ddr_V_WVALID <= ap_const_logic_0;
    output_r_address0 <= fc_compute_1_U0_output_r_address0;
    output_r_ce0 <= fc_compute_1_U0_output_r_ce0;
    output_r_d0 <= fc_compute_1_U0_output_r_d0;
    output_r_we0 <= fc_compute_1_U0_output_r_we0;
    scale_address0 <= fc_compute_1_U0_scale_address0;
    scale_address1 <= ap_const_lv10_0;
    scale_ce0 <= fc_compute_1_U0_scale_ce0;
    scale_ce1 <= ap_const_logic_0;
    scale_d0 <= ap_const_lv32_0;
    scale_d1 <= ap_const_lv32_0;
    scale_we0 <= ap_const_logic_0;
    scale_we1 <= ap_const_logic_0;
end behav;
