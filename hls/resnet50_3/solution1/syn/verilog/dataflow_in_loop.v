// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_in_loop (
        ap_clk,
        ap_rst,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        och_0,
        input_V_address0,
        input_V_ce0,
        input_V_d0,
        input_V_q0,
        input_V_we0,
        input_V_address1,
        input_V_ce1,
        input_V_d1,
        input_V_q1,
        input_V_we1,
        bias_address0,
        bias_ce0,
        bias_d0,
        bias_q0,
        bias_we0,
        bias_address1,
        bias_ce1,
        bias_d1,
        bias_q1,
        bias_we1,
        scale_address0,
        scale_ce0,
        scale_d0,
        scale_q0,
        scale_we0,
        scale_address1,
        scale_ce1,
        scale_d1,
        scale_q1,
        scale_we1,
        output_r_address0,
        output_r_ce0,
        output_r_d0,
        output_r_q0,
        output_r_we0,
        och_0_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_clk;
input   ap_rst;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [31:0] m_axi_ddr_V_AWADDR;
output  [0:0] m_axi_ddr_V_AWID;
output  [31:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [0:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [127:0] m_axi_ddr_V_WDATA;
output  [15:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [0:0] m_axi_ddr_V_WID;
output  [0:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [31:0] m_axi_ddr_V_ARADDR;
output  [0:0] m_axi_ddr_V_ARID;
output  [31:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [0:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [127:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [0:0] m_axi_ddr_V_RID;
input  [0:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [0:0] m_axi_ddr_V_BID;
input  [0:0] m_axi_ddr_V_BUSER;
input  [9:0] och_0;
output  [3:0] input_V_address0;
output   input_V_ce0;
output  [1023:0] input_V_d0;
input  [1023:0] input_V_q0;
output   input_V_we0;
output  [3:0] input_V_address1;
output   input_V_ce1;
output  [1023:0] input_V_d1;
input  [1023:0] input_V_q1;
output   input_V_we1;
output  [9:0] bias_address0;
output   bias_ce0;
output  [31:0] bias_d0;
input  [31:0] bias_q0;
output   bias_we0;
output  [9:0] bias_address1;
output   bias_ce1;
output  [31:0] bias_d1;
input  [31:0] bias_q1;
output   bias_we1;
output  [9:0] scale_address0;
output   scale_ce0;
output  [31:0] scale_d0;
input  [31:0] scale_q0;
output   scale_we0;
output  [9:0] scale_address1;
output   scale_ce1;
output  [31:0] scale_d1;
input  [31:0] scale_q1;
output   scale_we1;
output  [9:0] output_r_address0;
output   output_r_ce0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output   output_r_we0;
input   och_0_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [1023:0] weight_V_i_q0;
wire   [1023:0] weight_V_t_q0;
wire    fc_load_weight_U0_ap_start;
wire    fc_load_weight_U0_ap_done;
wire    fc_load_weight_U0_ap_continue;
wire    fc_load_weight_U0_ap_idle;
wire    fc_load_weight_U0_ap_ready;
wire   [3:0] fc_load_weight_U0_weight_V_address0;
wire    fc_load_weight_U0_weight_V_ce0;
wire    fc_load_weight_U0_weight_V_we0;
wire   [1023:0] fc_load_weight_U0_weight_V_d0;
wire    fc_load_weight_U0_m_axi_ddr_V_AWVALID;
wire   [31:0] fc_load_weight_U0_m_axi_ddr_V_AWADDR;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_AWID;
wire   [31:0] fc_load_weight_U0_m_axi_ddr_V_AWLEN;
wire   [2:0] fc_load_weight_U0_m_axi_ddr_V_AWSIZE;
wire   [1:0] fc_load_weight_U0_m_axi_ddr_V_AWBURST;
wire   [1:0] fc_load_weight_U0_m_axi_ddr_V_AWLOCK;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_AWCACHE;
wire   [2:0] fc_load_weight_U0_m_axi_ddr_V_AWPROT;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_AWQOS;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_AWREGION;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_AWUSER;
wire    fc_load_weight_U0_m_axi_ddr_V_WVALID;
wire   [127:0] fc_load_weight_U0_m_axi_ddr_V_WDATA;
wire   [15:0] fc_load_weight_U0_m_axi_ddr_V_WSTRB;
wire    fc_load_weight_U0_m_axi_ddr_V_WLAST;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_WID;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_WUSER;
wire    fc_load_weight_U0_m_axi_ddr_V_ARVALID;
wire   [31:0] fc_load_weight_U0_m_axi_ddr_V_ARADDR;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_ARID;
wire   [31:0] fc_load_weight_U0_m_axi_ddr_V_ARLEN;
wire   [2:0] fc_load_weight_U0_m_axi_ddr_V_ARSIZE;
wire   [1:0] fc_load_weight_U0_m_axi_ddr_V_ARBURST;
wire   [1:0] fc_load_weight_U0_m_axi_ddr_V_ARLOCK;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_ARCACHE;
wire   [2:0] fc_load_weight_U0_m_axi_ddr_V_ARPROT;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_ARQOS;
wire   [3:0] fc_load_weight_U0_m_axi_ddr_V_ARREGION;
wire   [0:0] fc_load_weight_U0_m_axi_ddr_V_ARUSER;
wire    fc_load_weight_U0_m_axi_ddr_V_RREADY;
wire    fc_load_weight_U0_m_axi_ddr_V_BREADY;
wire   [9:0] fc_load_weight_U0_och_0_out_din;
wire    fc_load_weight_U0_och_0_out_write;
wire    ap_channel_done_weight_V;
wire    fc_load_weight_U0_weight_V_full_n;
wire    fc_compute_1_U0_ap_start;
wire    fc_compute_1_U0_ap_done;
wire    fc_compute_1_U0_ap_continue;
wire    fc_compute_1_U0_ap_idle;
wire    fc_compute_1_U0_ap_ready;
wire   [3:0] fc_compute_1_U0_weight_V_address0;
wire    fc_compute_1_U0_weight_V_ce0;
wire   [3:0] fc_compute_1_U0_input_V_address0;
wire    fc_compute_1_U0_input_V_ce0;
wire   [9:0] fc_compute_1_U0_bias_address0;
wire    fc_compute_1_U0_bias_ce0;
wire   [9:0] fc_compute_1_U0_scale_address0;
wire    fc_compute_1_U0_scale_ce0;
wire   [9:0] fc_compute_1_U0_output_r_address0;
wire    fc_compute_1_U0_output_r_ce0;
wire    fc_compute_1_U0_output_r_we0;
wire   [31:0] fc_compute_1_U0_output_r_d0;
wire    fc_compute_1_U0_och_read;
wire    ap_sync_continue;
wire    weight_V_i_full_n;
wire    weight_V_t_empty_n;
wire    och_0_c_full_n;
wire   [9:0] och_0_c_dout;
wire    och_0_c_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    fc_load_weight_U0_start_full_n;
wire    fc_load_weight_U0_start_write;
wire    fc_compute_1_U0_start_full_n;
wire    fc_compute_1_U0_start_write;

dataflow_in_loop_weight_V #(
    .DataWidth( 1024 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
weight_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(fc_load_weight_U0_weight_V_address0),
    .i_ce0(fc_load_weight_U0_weight_V_ce0),
    .i_we0(fc_load_weight_U0_weight_V_we0),
    .i_d0(fc_load_weight_U0_weight_V_d0),
    .i_q0(weight_V_i_q0),
    .t_address0(fc_compute_1_U0_weight_V_address0),
    .t_ce0(fc_compute_1_U0_weight_V_ce0),
    .t_we0(1'b0),
    .t_d0(1024'd0),
    .t_q0(weight_V_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(weight_V_i_full_n),
    .i_write(fc_load_weight_U0_ap_done),
    .t_empty_n(weight_V_t_empty_n),
    .t_read(fc_compute_1_U0_ap_ready)
);

fc_load_weight fc_load_weight_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fc_load_weight_U0_ap_start),
    .ap_done(fc_load_weight_U0_ap_done),
    .ap_continue(fc_load_weight_U0_ap_continue),
    .ap_idle(fc_load_weight_U0_ap_idle),
    .ap_ready(fc_load_weight_U0_ap_ready),
    .weight_V_address0(fc_load_weight_U0_weight_V_address0),
    .weight_V_ce0(fc_load_weight_U0_weight_V_ce0),
    .weight_V_we0(fc_load_weight_U0_weight_V_we0),
    .weight_V_d0(fc_load_weight_U0_weight_V_d0),
    .m_axi_ddr_V_AWVALID(fc_load_weight_U0_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(fc_load_weight_U0_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(fc_load_weight_U0_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(fc_load_weight_U0_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(fc_load_weight_U0_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(fc_load_weight_U0_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(fc_load_weight_U0_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(fc_load_weight_U0_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(fc_load_weight_U0_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(fc_load_weight_U0_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(fc_load_weight_U0_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(fc_load_weight_U0_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(fc_load_weight_U0_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(fc_load_weight_U0_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(fc_load_weight_U0_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(fc_load_weight_U0_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(fc_load_weight_U0_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(fc_load_weight_U0_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(fc_load_weight_U0_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(m_axi_ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(fc_load_weight_U0_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(fc_load_weight_U0_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(fc_load_weight_U0_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(fc_load_weight_U0_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(fc_load_weight_U0_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(fc_load_weight_U0_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(fc_load_weight_U0_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(fc_load_weight_U0_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(fc_load_weight_U0_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(fc_load_weight_U0_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(fc_load_weight_U0_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(m_axi_ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(fc_load_weight_U0_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(m_axi_ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(m_axi_ddr_V_RLAST),
    .m_axi_ddr_V_RID(m_axi_ddr_V_RID),
    .m_axi_ddr_V_RUSER(m_axi_ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(m_axi_ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(fc_load_weight_U0_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0),
    .och_0(och_0),
    .och_0_out_din(fc_load_weight_U0_och_0_out_din),
    .och_0_out_full_n(och_0_c_full_n),
    .och_0_out_write(fc_load_weight_U0_och_0_out_write)
);

fc_compute_1 fc_compute_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fc_compute_1_U0_ap_start),
    .ap_done(fc_compute_1_U0_ap_done),
    .ap_continue(fc_compute_1_U0_ap_continue),
    .ap_idle(fc_compute_1_U0_ap_idle),
    .ap_ready(fc_compute_1_U0_ap_ready),
    .weight_V_address0(fc_compute_1_U0_weight_V_address0),
    .weight_V_ce0(fc_compute_1_U0_weight_V_ce0),
    .weight_V_q0(weight_V_t_q0),
    .input_V_address0(fc_compute_1_U0_input_V_address0),
    .input_V_ce0(fc_compute_1_U0_input_V_ce0),
    .input_V_q0(input_V_q0),
    .bias_address0(fc_compute_1_U0_bias_address0),
    .bias_ce0(fc_compute_1_U0_bias_ce0),
    .bias_q0(bias_q0),
    .scale_address0(fc_compute_1_U0_scale_address0),
    .scale_ce0(fc_compute_1_U0_scale_ce0),
    .scale_q0(scale_q0),
    .output_r_address0(fc_compute_1_U0_output_r_address0),
    .output_r_ce0(fc_compute_1_U0_output_r_ce0),
    .output_r_we0(fc_compute_1_U0_output_r_we0),
    .output_r_d0(fc_compute_1_U0_output_r_d0),
    .och_dout(och_0_c_dout),
    .och_empty_n(och_0_c_empty_n),
    .och_read(fc_compute_1_U0_och_read)
);

fifo_w10_d2_A och_0_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fc_load_weight_U0_och_0_out_din),
    .if_full_n(och_0_c_full_n),
    .if_write(fc_load_weight_U0_och_0_out_write),
    .if_dout(och_0_c_dout),
    .if_empty_n(och_0_c_empty_n),
    .if_read(fc_compute_1_U0_och_read)
);

assign ap_channel_done_weight_V = fc_load_weight_U0_ap_done;

assign ap_done = fc_compute_1_U0_ap_done;

assign ap_idle = (fc_load_weight_U0_ap_idle & fc_compute_1_U0_ap_idle & (weight_V_t_empty_n ^ 1'b1));

assign ap_ready = fc_load_weight_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = fc_compute_1_U0_ap_done;

assign ap_sync_ready = fc_load_weight_U0_ap_ready;

assign bias_address0 = fc_compute_1_U0_bias_address0;

assign bias_address1 = 10'd0;

assign bias_ce0 = fc_compute_1_U0_bias_ce0;

assign bias_ce1 = 1'b0;

assign bias_d0 = 32'd0;

assign bias_d1 = 32'd0;

assign bias_we0 = 1'b0;

assign bias_we1 = 1'b0;

assign fc_compute_1_U0_ap_continue = ap_continue;

assign fc_compute_1_U0_ap_start = weight_V_t_empty_n;

assign fc_compute_1_U0_start_full_n = 1'b1;

assign fc_compute_1_U0_start_write = 1'b0;

assign fc_load_weight_U0_ap_continue = weight_V_i_full_n;

assign fc_load_weight_U0_ap_start = ap_start;

assign fc_load_weight_U0_start_full_n = 1'b1;

assign fc_load_weight_U0_start_write = 1'b0;

assign fc_load_weight_U0_weight_V_full_n = weight_V_i_full_n;

assign input_V_address0 = fc_compute_1_U0_input_V_address0;

assign input_V_address1 = 4'd0;

assign input_V_ce0 = fc_compute_1_U0_input_V_ce0;

assign input_V_ce1 = 1'b0;

assign input_V_d0 = 1024'd0;

assign input_V_d1 = 1024'd0;

assign input_V_we0 = 1'b0;

assign input_V_we1 = 1'b0;

assign m_axi_ddr_V_ARADDR = fc_load_weight_U0_m_axi_ddr_V_ARADDR;

assign m_axi_ddr_V_ARBURST = fc_load_weight_U0_m_axi_ddr_V_ARBURST;

assign m_axi_ddr_V_ARCACHE = fc_load_weight_U0_m_axi_ddr_V_ARCACHE;

assign m_axi_ddr_V_ARID = fc_load_weight_U0_m_axi_ddr_V_ARID;

assign m_axi_ddr_V_ARLEN = fc_load_weight_U0_m_axi_ddr_V_ARLEN;

assign m_axi_ddr_V_ARLOCK = fc_load_weight_U0_m_axi_ddr_V_ARLOCK;

assign m_axi_ddr_V_ARPROT = fc_load_weight_U0_m_axi_ddr_V_ARPROT;

assign m_axi_ddr_V_ARQOS = fc_load_weight_U0_m_axi_ddr_V_ARQOS;

assign m_axi_ddr_V_ARREGION = fc_load_weight_U0_m_axi_ddr_V_ARREGION;

assign m_axi_ddr_V_ARSIZE = fc_load_weight_U0_m_axi_ddr_V_ARSIZE;

assign m_axi_ddr_V_ARUSER = fc_load_weight_U0_m_axi_ddr_V_ARUSER;

assign m_axi_ddr_V_ARVALID = fc_load_weight_U0_m_axi_ddr_V_ARVALID;

assign m_axi_ddr_V_AWADDR = 32'd0;

assign m_axi_ddr_V_AWBURST = 2'd0;

assign m_axi_ddr_V_AWCACHE = 4'd0;

assign m_axi_ddr_V_AWID = 1'd0;

assign m_axi_ddr_V_AWLEN = 32'd0;

assign m_axi_ddr_V_AWLOCK = 2'd0;

assign m_axi_ddr_V_AWPROT = 3'd0;

assign m_axi_ddr_V_AWQOS = 4'd0;

assign m_axi_ddr_V_AWREGION = 4'd0;

assign m_axi_ddr_V_AWSIZE = 3'd0;

assign m_axi_ddr_V_AWUSER = 1'd0;

assign m_axi_ddr_V_AWVALID = 1'b0;

assign m_axi_ddr_V_BREADY = 1'b0;

assign m_axi_ddr_V_RREADY = fc_load_weight_U0_m_axi_ddr_V_RREADY;

assign m_axi_ddr_V_WDATA = 128'd0;

assign m_axi_ddr_V_WID = 1'd0;

assign m_axi_ddr_V_WLAST = 1'b0;

assign m_axi_ddr_V_WSTRB = 16'd0;

assign m_axi_ddr_V_WUSER = 1'd0;

assign m_axi_ddr_V_WVALID = 1'b0;

assign output_r_address0 = fc_compute_1_U0_output_r_address0;

assign output_r_ce0 = fc_compute_1_U0_output_r_ce0;

assign output_r_d0 = fc_compute_1_U0_output_r_d0;

assign output_r_we0 = fc_compute_1_U0_output_r_we0;

assign scale_address0 = fc_compute_1_U0_scale_address0;

assign scale_address1 = 10'd0;

assign scale_ce0 = fc_compute_1_U0_scale_ce0;

assign scale_ce1 = 1'b0;

assign scale_d0 = 32'd0;

assign scale_d1 = 32'd0;

assign scale_we0 = 1'b0;

assign scale_we1 = 1'b0;

endmodule //dataflow_in_loop
