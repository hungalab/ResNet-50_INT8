// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="resnet50_3,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=318,HLS_SYN_DSP=1512,HLS_SYN_FF=190473,HLS_SYN_LUT=275693,HLS_VERSION=2019_1_3}" *)

module resnet50_3 (
        ap_clk,
        ap_rst_n,
        sw0in_V_TDATA,
        sw0in_V_TVALID,
        sw0in_V_TREADY,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        startt_V_TDATA,
        startt_V_TVALID,
        startt_V_TREADY,
        stopt_V_TDATA,
        stopt_V_TVALID,
        stopt_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DDR_V_ID_WIDTH = 1;
parameter    C_M_AXI_DDR_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR_V_DATA_WIDTH = 128;
parameter    C_M_AXI_DDR_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_TARGET_ADDR = 0;
parameter    C_M_AXI_DDR_V_USER_VALUE = 0;
parameter    C_M_AXI_DDR_V_PROT_VALUE = 0;
parameter    C_M_AXI_DDR_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DDR_V_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [175:0] sw0in_V_TDATA;
input   sw0in_V_TVALID;
output   sw0in_V_TREADY;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [C_M_AXI_DDR_V_ADDR_WIDTH - 1:0] m_axi_ddr_V_AWADDR;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_AWID;
output  [7:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [C_M_AXI_DDR_V_AWUSER_WIDTH - 1:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [C_M_AXI_DDR_V_DATA_WIDTH - 1:0] m_axi_ddr_V_WDATA;
output  [C_M_AXI_DDR_V_WSTRB_WIDTH - 1:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_WID;
output  [C_M_AXI_DDR_V_WUSER_WIDTH - 1:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [C_M_AXI_DDR_V_ADDR_WIDTH - 1:0] m_axi_ddr_V_ARADDR;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_ARID;
output  [7:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [C_M_AXI_DDR_V_ARUSER_WIDTH - 1:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [C_M_AXI_DDR_V_DATA_WIDTH - 1:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_RID;
input  [C_M_AXI_DDR_V_RUSER_WIDTH - 1:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_BID;
input  [C_M_AXI_DDR_V_BUSER_WIDTH - 1:0] m_axi_ddr_V_BUSER;
output  [7:0] startt_V_TDATA;
output   startt_V_TVALID;
input   startt_V_TREADY;
output  [7:0] stopt_V_TDATA;
output   stopt_V_TVALID;
input   stopt_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [175:0] sw0in_V_0_data_out;
wire    sw0in_V_0_vld_in;
wire    sw0in_V_0_vld_out;
wire    sw0in_V_0_ack_in;
reg    sw0in_V_0_ack_out;
reg   [175:0] sw0in_V_0_payload_A;
reg   [175:0] sw0in_V_0_payload_B;
reg    sw0in_V_0_sel_rd;
reg    sw0in_V_0_sel_wr;
wire    sw0in_V_0_sel;
wire    sw0in_V_0_load_A;
wire    sw0in_V_0_load_B;
reg   [1:0] sw0in_V_0_state;
wire    sw0in_V_0_state_cmp_full;
reg   [7:0] startt_V_1_data_out;
reg    startt_V_1_vld_in;
wire    startt_V_1_vld_out;
wire    startt_V_1_ack_in;
wire    startt_V_1_ack_out;
reg   [7:0] startt_V_1_payload_A;
reg   [7:0] startt_V_1_payload_B;
reg    startt_V_1_sel_rd;
reg    startt_V_1_sel_wr;
wire    startt_V_1_sel;
wire    startt_V_1_load_A;
wire    startt_V_1_load_B;
reg   [1:0] startt_V_1_state;
wire    startt_V_1_state_cmp_full;
reg   [7:0] stopt_V_1_data_out;
reg    stopt_V_1_vld_in;
wire    stopt_V_1_vld_out;
wire    stopt_V_1_ack_in;
wire    stopt_V_1_ack_out;
reg   [7:0] stopt_V_1_payload_A;
reg   [7:0] stopt_V_1_payload_B;
reg    stopt_V_1_sel_rd;
reg    stopt_V_1_sel_wr;
wire    stopt_V_1_sel;
wire    stopt_V_1_load_A;
wire    stopt_V_1_load_B;
reg   [1:0] stopt_V_1_state;
wire    stopt_V_1_state_cmp_full;
reg   [11:0] buf0_V_address0;
reg    buf0_V_ce0;
wire   [287:0] buf0_V_q0;
reg   [11:0] buf0_V_address1;
reg    buf0_V_ce1;
reg    buf0_V_we1;
reg   [287:0] buf0_V_d1;
reg    outbuf_V_ce0;
wire   [1535:0] outbuf_V_q0;
reg   [10:0] outbuf_V_address1;
reg    outbuf_V_ce1;
reg    outbuf_V_we1;
reg   [1535:0] outbuf_V_d1;
reg   [11:0] buf1_V_address0;
reg    buf1_V_ce0;
wire   [287:0] buf1_V_q0;
reg    buf1_V_ce1;
reg    buf1_V_we1;
reg   [11:0] buf2_V_address0;
reg    buf2_V_ce0;
wire   [287:0] buf2_V_q0;
reg   [11:0] buf2_V_address1;
reg    buf2_V_ce1;
reg    buf2_V_we1;
reg   [287:0] buf2_V_d1;
reg   [3:0] fc_in_V_address0;
reg    fc_in_V_ce0;
wire   [1023:0] fc_in_V_q0;
reg    fc_in_V_ce1;
reg   [127:0] fc_in_V_we1;
reg    sw0in_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln380_fu_538_p2;
wire    ap_CS_fsm_state3;
reg    startt_V_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    stopt_V_TDATA_blk_n;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ddr_V_AWREADY;
wire    ddr_V_WREADY;
reg    ddr_V_ARVALID;
wire    ddr_V_ARREADY;
reg   [31:0] ddr_V_ARADDR;
reg   [0:0] ddr_V_ARID;
reg   [31:0] ddr_V_ARLEN;
reg   [2:0] ddr_V_ARSIZE;
reg   [1:0] ddr_V_ARBURST;
reg   [1:0] ddr_V_ARLOCK;
reg   [3:0] ddr_V_ARCACHE;
reg   [2:0] ddr_V_ARPROT;
reg   [3:0] ddr_V_ARQOS;
reg   [3:0] ddr_V_ARREGION;
reg   [0:0] ddr_V_ARUSER;
wire    ddr_V_RVALID;
reg    ddr_V_RREADY;
wire   [127:0] ddr_V_RDATA;
wire    ddr_V_RLAST;
wire   [0:0] ddr_V_RID;
wire   [0:0] ddr_V_RUSER;
wire   [1:0] ddr_V_RRESP;
wire    ddr_V_BVALID;
wire   [1:0] ddr_V_BRESP;
wire   [0:0] ddr_V_BID;
wire   [0:0] ddr_V_BUSER;
wire   [11:0] l_fu_544_p2;
reg   [11:0] l_reg_794;
reg    ap_block_state2;
wire   [7:0] trunc_ln647_fu_550_p1;
reg   [7:0] trunc_ln647_reg_799;
wire   [7:0] grp_fu_388_p4;
reg   [7:0] p_Result_0_1_reg_804;
wire   [7:0] grp_fu_398_p4;
reg   [7:0] p_Result_0_2_reg_809;
wire   [7:0] grp_fu_408_p4;
reg   [7:0] p_Result_0_3_reg_814;
wire   [7:0] grp_fu_418_p4;
reg   [7:0] p_Result_0_4_reg_819;
wire   [7:0] grp_fu_428_p4;
reg   [7:0] p_Result_0_5_reg_824;
wire   [7:0] grp_fu_438_p4;
reg   [7:0] p_Result_0_6_reg_829;
wire   [7:0] grp_fu_448_p4;
reg   [7:0] p_Result_0_7_reg_834;
wire   [7:0] grp_fu_458_p4;
reg   [7:0] p_Result_0_8_reg_839;
wire   [7:0] grp_fu_468_p4;
reg   [7:0] p_Result_0_9_reg_844;
wire   [7:0] grp_fu_478_p4;
reg   [7:0] p_Result_0_s_reg_849;
wire   [7:0] grp_fu_488_p4;
reg   [7:0] p_Result_0_10_reg_854;
wire   [7:0] grp_fu_498_p4;
reg   [7:0] p_Result_0_11_reg_859;
wire   [7:0] grp_fu_508_p4;
reg   [7:0] p_Result_0_12_reg_864;
wire   [7:0] grp_fu_518_p4;
reg   [7:0] p_Result_0_13_reg_869;
wire   [7:0] grp_fu_528_p4;
reg   [7:0] p_Result_0_14_reg_874;
wire   [7:0] zext_ln321_fu_754_p1;
wire   [10:0] i_fu_765_p2;
wire    ap_CS_fsm_state7;
wire   [7:0] zext_ln321_1_fu_786_p1;
wire    grp_conv_layer_fu_305_ap_start;
wire    grp_conv_layer_fu_305_ap_done;
wire    grp_conv_layer_fu_305_ap_idle;
wire    grp_conv_layer_fu_305_ap_ready;
wire   [11:0] grp_conv_layer_fu_305_input_V_address0;
wire    grp_conv_layer_fu_305_input_V_ce0;
reg   [287:0] grp_conv_layer_fu_305_input_V_q0;
wire   [11:0] grp_conv_layer_fu_305_output_V_address1;
wire    grp_conv_layer_fu_305_output_V_ce1;
wire    grp_conv_layer_fu_305_output_V_we1;
wire   [287:0] grp_conv_layer_fu_305_output_V_d1;
wire   [10:0] grp_conv_layer_fu_305_outbuf_V_4_address0;
wire    grp_conv_layer_fu_305_outbuf_V_4_ce0;
wire   [10:0] grp_conv_layer_fu_305_outbuf_V_4_address1;
wire    grp_conv_layer_fu_305_outbuf_V_4_ce1;
wire    grp_conv_layer_fu_305_outbuf_V_4_we1;
wire   [1535:0] grp_conv_layer_fu_305_outbuf_V_4_d1;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_AWVALID;
wire   [31:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWADDR;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWID;
wire   [31:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWLEN;
wire   [2:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWSIZE;
wire   [1:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWBURST;
wire   [1:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWLOCK;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWCACHE;
wire   [2:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWPROT;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWQOS;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWREGION;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_AWUSER;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_WVALID;
wire   [127:0] grp_conv_layer_fu_305_m_axi_ddr_V_WDATA;
wire   [15:0] grp_conv_layer_fu_305_m_axi_ddr_V_WSTRB;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_WLAST;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_WID;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_WUSER;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID;
wire   [31:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARID;
wire   [31:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN;
wire   [2:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE;
wire   [1:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST;
wire   [1:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE;
wire   [2:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS;
wire   [3:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION;
wire   [0:0] grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_RREADY;
wire    grp_conv_layer_fu_305_m_axi_ddr_V_BREADY;
reg   [6:0] grp_conv_layer_fu_305_TO_r;
reg   [7:0] grp_conv_layer_fu_305_TI;
reg   [3:0] grp_conv_layer_fu_305_K;
reg   [0:0] grp_conv_layer_fu_305_P;
reg   [23:0] grp_conv_layer_fu_305_OFFSET;
wire    grp_add_fu_344_ap_start;
wire    grp_add_fu_344_ap_done;
wire    grp_add_fu_344_ap_idle;
wire    grp_add_fu_344_ap_ready;
wire   [11:0] grp_add_fu_344_input1_V_address0;
wire    grp_add_fu_344_input1_V_ce0;
reg   [287:0] grp_add_fu_344_input1_V_q0;
wire   [11:0] grp_add_fu_344_output_V_address1;
wire    grp_add_fu_344_output_V_ce1;
wire    grp_add_fu_344_output_V_we1;
wire   [287:0] grp_add_fu_344_output_V_d1;
reg   [31:0] grp_add_fu_344_SCALE1;
reg   [31:0] grp_add_fu_344_SCALE2;
wire   [11:0] grp_add_fu_344_buf1_V_address0;
wire    grp_add_fu_344_buf1_V_ce0;
wire    grp_fc_fu_366_ap_start;
wire    grp_fc_fu_366_ap_done;
wire    grp_fc_fu_366_ap_idle;
wire    grp_fc_fu_366_ap_ready;
wire   [3:0] grp_fc_fu_366_input_V_address0;
wire    grp_fc_fu_366_input_V_ce0;
wire   [9:0] grp_fc_fu_366_output_r_address0;
wire    grp_fc_fu_366_output_r_ce0;
wire    grp_fc_fu_366_output_r_we0;
wire   [31:0] grp_fc_fu_366_output_r_d0;
wire    grp_fc_fu_366_m_axi_ddr_V_AWVALID;
wire   [31:0] grp_fc_fu_366_m_axi_ddr_V_AWADDR;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_AWID;
wire   [31:0] grp_fc_fu_366_m_axi_ddr_V_AWLEN;
wire   [2:0] grp_fc_fu_366_m_axi_ddr_V_AWSIZE;
wire   [1:0] grp_fc_fu_366_m_axi_ddr_V_AWBURST;
wire   [1:0] grp_fc_fu_366_m_axi_ddr_V_AWLOCK;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_AWCACHE;
wire   [2:0] grp_fc_fu_366_m_axi_ddr_V_AWPROT;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_AWQOS;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_AWREGION;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_AWUSER;
wire    grp_fc_fu_366_m_axi_ddr_V_WVALID;
wire   [127:0] grp_fc_fu_366_m_axi_ddr_V_WDATA;
wire   [15:0] grp_fc_fu_366_m_axi_ddr_V_WSTRB;
wire    grp_fc_fu_366_m_axi_ddr_V_WLAST;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_WID;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_WUSER;
wire    grp_fc_fu_366_m_axi_ddr_V_ARVALID;
wire   [31:0] grp_fc_fu_366_m_axi_ddr_V_ARADDR;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_ARID;
wire   [31:0] grp_fc_fu_366_m_axi_ddr_V_ARLEN;
wire   [2:0] grp_fc_fu_366_m_axi_ddr_V_ARSIZE;
wire   [1:0] grp_fc_fu_366_m_axi_ddr_V_ARBURST;
wire   [1:0] grp_fc_fu_366_m_axi_ddr_V_ARLOCK;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_ARCACHE;
wire   [2:0] grp_fc_fu_366_m_axi_ddr_V_ARPROT;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_ARQOS;
wire   [3:0] grp_fc_fu_366_m_axi_ddr_V_ARREGION;
wire   [0:0] grp_fc_fu_366_m_axi_ddr_V_ARUSER;
wire    grp_fc_fu_366_m_axi_ddr_V_RREADY;
wire    grp_fc_fu_366_m_axi_ddr_V_BREADY;
wire    grp_average_pool_fu_376_ap_start;
wire    grp_average_pool_fu_376_ap_done;
wire    grp_average_pool_fu_376_ap_idle;
wire    grp_average_pool_fu_376_ap_ready;
wire   [11:0] grp_average_pool_fu_376_input_V_address0;
wire    grp_average_pool_fu_376_input_V_ce0;
wire   [3:0] grp_average_pool_fu_376_output_V_address1;
wire    grp_average_pool_fu_376_output_V_ce1;
wire   [127:0] grp_average_pool_fu_376_output_V_we1;
wire   [1023:0] grp_average_pool_fu_376_output_V_d1;
reg   [11:0] l_0_reg_282;
reg   [10:0] i1_0_reg_294;
wire   [0:0] icmp_ln395_fu_759_p2;
reg    grp_conv_layer_fu_305_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
reg    grp_add_fu_344_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
reg    grp_fc_fu_366_ap_start_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg    grp_average_pool_fu_376_ap_start_reg;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln388_fu_554_p1;
wire   [63:0] zext_ln398_fu_771_p1;
wire   [287:0] zext_ln180_fu_739_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state28;
wire   [7:0] trunc_ln647_1_fu_607_p1;
wire   [8:0] zext_ln78_30_fu_667_p1;
wire   [8:0] zext_ln78_29_fu_663_p1;
wire   [8:0] zext_ln78_28_fu_659_p1;
wire   [8:0] zext_ln78_27_fu_655_p1;
wire   [8:0] zext_ln78_26_fu_651_p1;
wire   [8:0] zext_ln78_25_fu_647_p1;
wire   [8:0] zext_ln78_24_fu_643_p1;
wire   [8:0] zext_ln78_23_fu_639_p1;
wire   [8:0] zext_ln78_22_fu_635_p1;
wire   [8:0] zext_ln78_21_fu_631_p1;
wire   [8:0] zext_ln78_20_fu_627_p1;
wire   [8:0] zext_ln78_19_fu_623_p1;
wire   [8:0] zext_ln78_18_fu_619_p1;
wire   [8:0] zext_ln78_17_fu_615_p1;
wire   [8:0] zext_ln78_16_fu_611_p1;
wire   [8:0] zext_ln78_15_fu_604_p1;
wire   [8:0] zext_ln78_14_fu_601_p1;
wire   [8:0] zext_ln78_13_fu_598_p1;
wire   [8:0] zext_ln78_12_fu_595_p1;
wire   [8:0] zext_ln78_11_fu_592_p1;
wire   [8:0] zext_ln78_10_fu_589_p1;
wire   [8:0] zext_ln78_9_fu_586_p1;
wire   [8:0] zext_ln78_8_fu_583_p1;
wire   [8:0] zext_ln78_7_fu_580_p1;
wire   [8:0] zext_ln78_6_fu_577_p1;
wire   [8:0] zext_ln78_5_fu_574_p1;
wire   [8:0] zext_ln78_4_fu_571_p1;
wire   [8:0] zext_ln78_3_fu_568_p1;
wire   [8:0] zext_ln78_2_fu_565_p1;
wire   [8:0] zext_ln78_1_fu_562_p1;
wire   [8:0] zext_ln78_fu_559_p1;
wire   [286:0] tmp_fu_671_p33;
wire   [3:0] trunc_ln_fu_744_p4;
wire   [3:0] trunc_ln296_2_fu_776_p4;
reg    ap_block_state30;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 sw0in_V_0_sel_rd = 1'b0;
#0 sw0in_V_0_sel_wr = 1'b0;
#0 sw0in_V_0_state = 2'd0;
#0 startt_V_1_sel_rd = 1'b0;
#0 startt_V_1_sel_wr = 1'b0;
#0 startt_V_1_state = 2'd0;
#0 stopt_V_1_sel_rd = 1'b0;
#0 stopt_V_1_sel_wr = 1'b0;
#0 stopt_V_1_state = 2'd0;
#0 grp_conv_layer_fu_305_ap_start_reg = 1'b0;
#0 grp_add_fu_344_ap_start_reg = 1'b0;
#0 grp_fc_fu_366_ap_start_reg = 1'b0;
#0 grp_average_pool_fu_376_ap_start_reg = 1'b0;
end

resnet50_3_buf0_V #(
    .DataWidth( 288 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
buf0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf0_V_address0),
    .ce0(buf0_V_ce0),
    .q0(buf0_V_q0),
    .address1(buf0_V_address1),
    .ce1(buf0_V_ce1),
    .we1(buf0_V_we1),
    .d1(buf0_V_d1)
);

resnet50_3_outbuf_V #(
    .DataWidth( 1536 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
outbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_conv_layer_fu_305_outbuf_V_4_address0),
    .ce0(outbuf_V_ce0),
    .q0(outbuf_V_q0),
    .address1(outbuf_V_address1),
    .ce1(outbuf_V_ce1),
    .we1(outbuf_V_we1),
    .d1(outbuf_V_d1)
);

resnet50_3_buf0_V #(
    .DataWidth( 288 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
buf1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf1_V_address0),
    .ce0(buf1_V_ce0),
    .q0(buf1_V_q0),
    .address1(grp_conv_layer_fu_305_output_V_address1),
    .ce1(buf1_V_ce1),
    .we1(buf1_V_we1),
    .d1(grp_conv_layer_fu_305_output_V_d1)
);

resnet50_3_buf0_V #(
    .DataWidth( 288 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
buf2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf2_V_address0),
    .ce0(buf2_V_ce0),
    .q0(buf2_V_q0),
    .address1(buf2_V_address1),
    .ce1(buf2_V_ce1),
    .we1(buf2_V_we1),
    .d1(buf2_V_d1)
);

resnet50_3_fc_in_V #(
    .DataWidth( 1024 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fc_in_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc_in_V_address0),
    .ce0(fc_in_V_ce0),
    .q0(fc_in_V_q0),
    .address1(grp_average_pool_fu_376_output_V_address1),
    .ce1(fc_in_V_ce1),
    .we1(fc_in_V_we1),
    .d1(grp_average_pool_fu_376_output_V_d1)
);

resnet50_3_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
resnet50_3_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .output_r_address0(grp_fc_fu_366_output_r_address0),
    .output_r_ce0(grp_fc_fu_366_output_r_ce0),
    .output_r_we0(grp_fc_fu_366_output_r_we0),
    .output_r_d0(grp_fc_fu_366_output_r_d0)
);

resnet50_3_ddr_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DDR_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DDR_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DDR_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DDR_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DDR_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DDR_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DDR_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DDR_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DDR_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DDR_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR_V_CACHE_VALUE ))
resnet50_3_ddr_V_m_axi_U(
    .AWVALID(m_axi_ddr_V_AWVALID),
    .AWREADY(m_axi_ddr_V_AWREADY),
    .AWADDR(m_axi_ddr_V_AWADDR),
    .AWID(m_axi_ddr_V_AWID),
    .AWLEN(m_axi_ddr_V_AWLEN),
    .AWSIZE(m_axi_ddr_V_AWSIZE),
    .AWBURST(m_axi_ddr_V_AWBURST),
    .AWLOCK(m_axi_ddr_V_AWLOCK),
    .AWCACHE(m_axi_ddr_V_AWCACHE),
    .AWPROT(m_axi_ddr_V_AWPROT),
    .AWQOS(m_axi_ddr_V_AWQOS),
    .AWREGION(m_axi_ddr_V_AWREGION),
    .AWUSER(m_axi_ddr_V_AWUSER),
    .WVALID(m_axi_ddr_V_WVALID),
    .WREADY(m_axi_ddr_V_WREADY),
    .WDATA(m_axi_ddr_V_WDATA),
    .WSTRB(m_axi_ddr_V_WSTRB),
    .WLAST(m_axi_ddr_V_WLAST),
    .WID(m_axi_ddr_V_WID),
    .WUSER(m_axi_ddr_V_WUSER),
    .ARVALID(m_axi_ddr_V_ARVALID),
    .ARREADY(m_axi_ddr_V_ARREADY),
    .ARADDR(m_axi_ddr_V_ARADDR),
    .ARID(m_axi_ddr_V_ARID),
    .ARLEN(m_axi_ddr_V_ARLEN),
    .ARSIZE(m_axi_ddr_V_ARSIZE),
    .ARBURST(m_axi_ddr_V_ARBURST),
    .ARLOCK(m_axi_ddr_V_ARLOCK),
    .ARCACHE(m_axi_ddr_V_ARCACHE),
    .ARPROT(m_axi_ddr_V_ARPROT),
    .ARQOS(m_axi_ddr_V_ARQOS),
    .ARREGION(m_axi_ddr_V_ARREGION),
    .ARUSER(m_axi_ddr_V_ARUSER),
    .RVALID(m_axi_ddr_V_RVALID),
    .RREADY(m_axi_ddr_V_RREADY),
    .RDATA(m_axi_ddr_V_RDATA),
    .RLAST(m_axi_ddr_V_RLAST),
    .RID(m_axi_ddr_V_RID),
    .RUSER(m_axi_ddr_V_RUSER),
    .RRESP(m_axi_ddr_V_RRESP),
    .BVALID(m_axi_ddr_V_BVALID),
    .BREADY(m_axi_ddr_V_BREADY),
    .BRESP(m_axi_ddr_V_BRESP),
    .BID(m_axi_ddr_V_BID),
    .BUSER(m_axi_ddr_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ddr_V_ARVALID),
    .I_ARREADY(ddr_V_ARREADY),
    .I_ARADDR(ddr_V_ARADDR),
    .I_ARID(ddr_V_ARID),
    .I_ARLEN(ddr_V_ARLEN),
    .I_ARSIZE(ddr_V_ARSIZE),
    .I_ARLOCK(ddr_V_ARLOCK),
    .I_ARCACHE(ddr_V_ARCACHE),
    .I_ARQOS(ddr_V_ARQOS),
    .I_ARPROT(ddr_V_ARPROT),
    .I_ARUSER(ddr_V_ARUSER),
    .I_ARBURST(ddr_V_ARBURST),
    .I_ARREGION(ddr_V_ARREGION),
    .I_RVALID(ddr_V_RVALID),
    .I_RREADY(ddr_V_RREADY),
    .I_RDATA(ddr_V_RDATA),
    .I_RID(ddr_V_RID),
    .I_RUSER(ddr_V_RUSER),
    .I_RRESP(ddr_V_RRESP),
    .I_RLAST(ddr_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ddr_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ddr_V_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(ddr_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ddr_V_BRESP),
    .I_BID(ddr_V_BID),
    .I_BUSER(ddr_V_BUSER)
);

conv_layer grp_conv_layer_fu_305(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_layer_fu_305_ap_start),
    .ap_done(grp_conv_layer_fu_305_ap_done),
    .ap_idle(grp_conv_layer_fu_305_ap_idle),
    .ap_ready(grp_conv_layer_fu_305_ap_ready),
    .input_V_address0(grp_conv_layer_fu_305_input_V_address0),
    .input_V_ce0(grp_conv_layer_fu_305_input_V_ce0),
    .input_V_q0(grp_conv_layer_fu_305_input_V_q0),
    .output_V_address1(grp_conv_layer_fu_305_output_V_address1),
    .output_V_ce1(grp_conv_layer_fu_305_output_V_ce1),
    .output_V_we1(grp_conv_layer_fu_305_output_V_we1),
    .output_V_d1(grp_conv_layer_fu_305_output_V_d1),
    .outbuf_V_4_address0(grp_conv_layer_fu_305_outbuf_V_4_address0),
    .outbuf_V_4_ce0(grp_conv_layer_fu_305_outbuf_V_4_ce0),
    .outbuf_V_4_q0(outbuf_V_q0),
    .outbuf_V_4_address1(grp_conv_layer_fu_305_outbuf_V_4_address1),
    .outbuf_V_4_ce1(grp_conv_layer_fu_305_outbuf_V_4_ce1),
    .outbuf_V_4_we1(grp_conv_layer_fu_305_outbuf_V_4_we1),
    .outbuf_V_4_d1(grp_conv_layer_fu_305_outbuf_V_4_d1),
    .m_axi_ddr_V_AWVALID(grp_conv_layer_fu_305_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(grp_conv_layer_fu_305_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(grp_conv_layer_fu_305_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(grp_conv_layer_fu_305_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(grp_conv_layer_fu_305_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(grp_conv_layer_fu_305_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(grp_conv_layer_fu_305_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(grp_conv_layer_fu_305_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(grp_conv_layer_fu_305_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(grp_conv_layer_fu_305_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(grp_conv_layer_fu_305_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(grp_conv_layer_fu_305_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(grp_conv_layer_fu_305_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(grp_conv_layer_fu_305_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(grp_conv_layer_fu_305_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(grp_conv_layer_fu_305_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(grp_conv_layer_fu_305_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(grp_conv_layer_fu_305_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(grp_conv_layer_fu_305_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(grp_conv_layer_fu_305_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(ddr_V_RLAST),
    .m_axi_ddr_V_RID(ddr_V_RID),
    .m_axi_ddr_V_RUSER(ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(grp_conv_layer_fu_305_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0),
    .TO_r(grp_conv_layer_fu_305_TO_r),
    .TI(grp_conv_layer_fu_305_TI),
    .K(grp_conv_layer_fu_305_K),
    .P(grp_conv_layer_fu_305_P),
    .OFFSET(grp_conv_layer_fu_305_OFFSET)
);

add grp_add_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_add_fu_344_ap_start),
    .ap_done(grp_add_fu_344_ap_done),
    .ap_idle(grp_add_fu_344_ap_idle),
    .ap_ready(grp_add_fu_344_ap_ready),
    .input1_V_address0(grp_add_fu_344_input1_V_address0),
    .input1_V_ce0(grp_add_fu_344_input1_V_ce0),
    .input1_V_q0(grp_add_fu_344_input1_V_q0),
    .output_V_address1(grp_add_fu_344_output_V_address1),
    .output_V_ce1(grp_add_fu_344_output_V_ce1),
    .output_V_we1(grp_add_fu_344_output_V_we1),
    .output_V_d1(grp_add_fu_344_output_V_d1),
    .SCALE1(grp_add_fu_344_SCALE1),
    .SCALE2(grp_add_fu_344_SCALE2),
    .buf1_V_address0(grp_add_fu_344_buf1_V_address0),
    .buf1_V_ce0(grp_add_fu_344_buf1_V_ce0),
    .buf1_V_q0(buf1_V_q0)
);

fc grp_fc_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fc_fu_366_ap_start),
    .ap_done(grp_fc_fu_366_ap_done),
    .ap_idle(grp_fc_fu_366_ap_idle),
    .ap_ready(grp_fc_fu_366_ap_ready),
    .input_V_address0(grp_fc_fu_366_input_V_address0),
    .input_V_ce0(grp_fc_fu_366_input_V_ce0),
    .input_V_q0(fc_in_V_q0),
    .output_r_address0(grp_fc_fu_366_output_r_address0),
    .output_r_ce0(grp_fc_fu_366_output_r_ce0),
    .output_r_we0(grp_fc_fu_366_output_r_we0),
    .output_r_d0(grp_fc_fu_366_output_r_d0),
    .m_axi_ddr_V_AWVALID(grp_fc_fu_366_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(grp_fc_fu_366_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(grp_fc_fu_366_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(grp_fc_fu_366_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(grp_fc_fu_366_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(grp_fc_fu_366_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(grp_fc_fu_366_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(grp_fc_fu_366_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(grp_fc_fu_366_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(grp_fc_fu_366_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(grp_fc_fu_366_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(grp_fc_fu_366_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(grp_fc_fu_366_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(grp_fc_fu_366_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(grp_fc_fu_366_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(grp_fc_fu_366_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(grp_fc_fu_366_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(grp_fc_fu_366_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(grp_fc_fu_366_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(grp_fc_fu_366_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(grp_fc_fu_366_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(grp_fc_fu_366_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(grp_fc_fu_366_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(grp_fc_fu_366_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(grp_fc_fu_366_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(grp_fc_fu_366_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(grp_fc_fu_366_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(grp_fc_fu_366_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(grp_fc_fu_366_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(grp_fc_fu_366_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(grp_fc_fu_366_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(ddr_V_RLAST),
    .m_axi_ddr_V_RID(ddr_V_RID),
    .m_axi_ddr_V_RUSER(ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(grp_fc_fu_366_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0)
);

average_pool grp_average_pool_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_average_pool_fu_376_ap_start),
    .ap_done(grp_average_pool_fu_376_ap_done),
    .ap_idle(grp_average_pool_fu_376_ap_idle),
    .ap_ready(grp_average_pool_fu_376_ap_ready),
    .input_V_address0(grp_average_pool_fu_376_input_V_address0),
    .input_V_ce0(grp_average_pool_fu_376_input_V_ce0),
    .input_V_q0(buf0_V_q0),
    .output_V_address1(grp_average_pool_fu_376_output_V_address1),
    .output_V_ce1(grp_average_pool_fu_376_output_V_ce1),
    .output_V_we1(grp_average_pool_fu_376_output_V_we1),
    .output_V_d1(grp_average_pool_fu_376_output_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_add_fu_344_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
            grp_add_fu_344_ap_start_reg <= 1'b1;
        end else if ((grp_add_fu_344_ap_ready == 1'b1)) begin
            grp_add_fu_344_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_average_pool_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_average_pool_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_average_pool_fu_376_ap_ready == 1'b1)) begin
            grp_average_pool_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_layer_fu_305_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
            grp_conv_layer_fu_305_ap_start_reg <= 1'b1;
        end else if ((grp_conv_layer_fu_305_ap_ready == 1'b1)) begin
            grp_conv_layer_fu_305_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fc_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            grp_fc_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_fc_fu_366_ap_ready == 1'b1)) begin
            grp_fc_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        startt_V_1_sel_rd <= 1'b0;
    end else begin
        if (((startt_V_1_ack_out == 1'b1) & (startt_V_1_vld_out == 1'b1))) begin
            startt_V_1_sel_rd <= ~startt_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        startt_V_1_sel_wr <= 1'b0;
    end else begin
        if (((startt_V_1_ack_in == 1'b1) & (startt_V_1_vld_in == 1'b1))) begin
            startt_V_1_sel_wr <= ~startt_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        startt_V_1_state <= 2'd0;
    end else begin
        if ((((startt_V_1_state == 2'd2) & (startt_V_1_vld_in == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_1_vld_in == 1'b0) & (startt_V_1_ack_out == 1'b1)))) begin
            startt_V_1_state <= 2'd2;
        end else if ((((startt_V_1_state == 2'd1) & (startt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0) & (startt_V_1_vld_in == 1'b1)))) begin
            startt_V_1_state <= 2'd1;
        end else if (((~((startt_V_1_vld_in == 1'b0) & (startt_V_1_ack_out == 1'b1)) & ~((startt_V_TREADY == 1'b0) & (startt_V_1_vld_in == 1'b1)) & (startt_V_1_state == 2'd3)) | ((startt_V_1_state == 2'd1) & (startt_V_1_ack_out == 1'b1)) | ((startt_V_1_state == 2'd2) & (startt_V_1_vld_in == 1'b1)))) begin
            startt_V_1_state <= 2'd3;
        end else begin
            startt_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stopt_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stopt_V_1_ack_out == 1'b1) & (stopt_V_1_vld_out == 1'b1))) begin
            stopt_V_1_sel_rd <= ~stopt_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stopt_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stopt_V_1_ack_in == 1'b1) & (stopt_V_1_vld_in == 1'b1))) begin
            stopt_V_1_sel_wr <= ~stopt_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stopt_V_1_state <= 2'd0;
    end else begin
        if ((((stopt_V_1_state == 2'd2) & (stopt_V_1_vld_in == 1'b0)) | ((stopt_V_1_state == 2'd3) & (stopt_V_1_vld_in == 1'b0) & (stopt_V_1_ack_out == 1'b1)))) begin
            stopt_V_1_state <= 2'd2;
        end else if ((((stopt_V_1_state == 2'd1) & (stopt_V_TREADY == 1'b0)) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0) & (stopt_V_1_vld_in == 1'b1)))) begin
            stopt_V_1_state <= 2'd1;
        end else if (((~((stopt_V_1_vld_in == 1'b0) & (stopt_V_1_ack_out == 1'b1)) & ~((stopt_V_TREADY == 1'b0) & (stopt_V_1_vld_in == 1'b1)) & (stopt_V_1_state == 2'd3)) | ((stopt_V_1_state == 2'd1) & (stopt_V_1_ack_out == 1'b1)) | ((stopt_V_1_state == 2'd2) & (stopt_V_1_vld_in == 1'b1)))) begin
            stopt_V_1_state <= 2'd3;
        end else begin
            stopt_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((sw0in_V_0_ack_out == 1'b1) & (sw0in_V_0_vld_out == 1'b1))) begin
            sw0in_V_0_sel_rd <= ~sw0in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((sw0in_V_0_ack_in == 1'b1) & (sw0in_V_0_vld_in == 1'b1))) begin
            sw0in_V_0_sel_wr <= ~sw0in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0in_V_0_state <= 2'd0;
    end else begin
        if ((((sw0in_V_0_state == 2'd2) & (sw0in_V_0_vld_in == 1'b0)) | ((sw0in_V_0_state == 2'd3) & (sw0in_V_0_vld_in == 1'b0) & (sw0in_V_0_ack_out == 1'b1)))) begin
            sw0in_V_0_state <= 2'd2;
        end else if ((((sw0in_V_0_state == 2'd1) & (sw0in_V_0_ack_out == 1'b0)) | ((sw0in_V_0_state == 2'd3) & (sw0in_V_0_ack_out == 1'b0) & (sw0in_V_0_vld_in == 1'b1)))) begin
            sw0in_V_0_state <= 2'd1;
        end else if (((~((sw0in_V_0_vld_in == 1'b0) & (sw0in_V_0_ack_out == 1'b1)) & ~((sw0in_V_0_ack_out == 1'b0) & (sw0in_V_0_vld_in == 1'b1)) & (sw0in_V_0_state == 2'd3)) | ((sw0in_V_0_state == 2'd1) & (sw0in_V_0_ack_out == 1'b1)) | ((sw0in_V_0_state == 2'd2) & (sw0in_V_0_vld_in == 1'b1)))) begin
            sw0in_V_0_state <= 2'd3;
        end else begin
            sw0in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i1_0_reg_294 <= i_fu_765_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (startt_V_1_ack_in == 1'b1))) begin
        i1_0_reg_294 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((sw0in_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_reg_282 <= l_reg_794;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_0_reg_282 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        l_reg_794 <= l_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0)) & (icmp_ln380_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_0_10_reg_854 <= {{sw0in_V_0_data_out[95:88]}};
        p_Result_0_11_reg_859 <= {{sw0in_V_0_data_out[103:96]}};
        p_Result_0_12_reg_864 <= {{sw0in_V_0_data_out[111:104]}};
        p_Result_0_13_reg_869 <= {{sw0in_V_0_data_out[119:112]}};
        p_Result_0_14_reg_874 <= {{sw0in_V_0_data_out[127:120]}};
        p_Result_0_1_reg_804 <= {{sw0in_V_0_data_out[15:8]}};
        p_Result_0_2_reg_809 <= {{sw0in_V_0_data_out[23:16]}};
        p_Result_0_3_reg_814 <= {{sw0in_V_0_data_out[31:24]}};
        p_Result_0_4_reg_819 <= {{sw0in_V_0_data_out[39:32]}};
        p_Result_0_5_reg_824 <= {{sw0in_V_0_data_out[47:40]}};
        p_Result_0_6_reg_829 <= {{sw0in_V_0_data_out[55:48]}};
        p_Result_0_7_reg_834 <= {{sw0in_V_0_data_out[63:56]}};
        p_Result_0_8_reg_839 <= {{sw0in_V_0_data_out[71:64]}};
        p_Result_0_9_reg_844 <= {{sw0in_V_0_data_out[79:72]}};
        p_Result_0_s_reg_849 <= {{sw0in_V_0_data_out[87:80]}};
        trunc_ln647_reg_799 <= trunc_ln647_fu_550_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((startt_V_1_load_A == 1'b1)) begin
        startt_V_1_payload_A <= zext_ln321_fu_754_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((startt_V_1_load_B == 1'b1)) begin
        startt_V_1_payload_B <= zext_ln321_fu_754_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stopt_V_1_load_A == 1'b1)) begin
        stopt_V_1_payload_A <= zext_ln321_1_fu_786_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stopt_V_1_load_B == 1'b1)) begin
        stopt_V_1_payload_B <= zext_ln321_1_fu_786_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((sw0in_V_0_load_A == 1'b1)) begin
        sw0in_V_0_payload_A <= sw0in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sw0in_V_0_load_B == 1'b1)) begin
        sw0in_V_0_payload_B <= sw0in_V_TDATA;
    end
end

always @ (*) begin
    if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf0_V_address0 = 12'd3135;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_address0 = grp_average_pool_fu_376_input_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf0_V_address0 = grp_add_fu_344_input1_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        buf0_V_address0 = grp_conv_layer_fu_305_input_V_address0;
    end else begin
        buf0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf0_V_address1 = zext_ln388_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf0_V_address1 = grp_add_fu_344_output_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_address1 = grp_conv_layer_fu_305_output_V_address1;
    end else begin
        buf0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_ce0 = grp_average_pool_fu_376_input_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf0_V_ce0 = grp_add_fu_344_input1_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        buf0_V_ce0 = grp_conv_layer_fu_305_input_V_ce0;
    end else begin
        buf0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((sw0in_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf0_V_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf0_V_ce1 = grp_add_fu_344_output_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_ce1 = grp_conv_layer_fu_305_output_V_ce1;
    end else begin
        buf0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf0_V_d1 = zext_ln180_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf0_V_d1 = grp_add_fu_344_output_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_d1 = grp_conv_layer_fu_305_output_V_d1;
    end else begin
        buf0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((sw0in_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        buf0_V_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf0_V_we1 = grp_add_fu_344_output_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_we1 = grp_conv_layer_fu_305_output_V_we1;
    end else begin
        buf0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        buf1_V_address0 = grp_add_fu_344_buf1_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        buf1_V_address0 = grp_conv_layer_fu_305_input_V_address0;
    end else begin
        buf1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        buf1_V_ce0 = grp_add_fu_344_buf1_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        buf1_V_ce0 = grp_conv_layer_fu_305_input_V_ce0;
    end else begin
        buf1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        buf1_V_ce1 = grp_conv_layer_fu_305_output_V_ce1;
    end else begin
        buf1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        buf1_V_we1 = grp_conv_layer_fu_305_output_V_we1;
    end else begin
        buf1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf2_V_address0 = grp_add_fu_344_input1_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        buf2_V_address0 = grp_conv_layer_fu_305_input_V_address0;
    end else begin
        buf2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buf2_V_address1 = grp_add_fu_344_output_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf2_V_address1 = grp_conv_layer_fu_305_output_V_address1;
    end else begin
        buf2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        buf2_V_ce0 = grp_add_fu_344_input1_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        buf2_V_ce0 = grp_conv_layer_fu_305_input_V_ce0;
    end else begin
        buf2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buf2_V_ce1 = grp_add_fu_344_output_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf2_V_ce1 = grp_conv_layer_fu_305_output_V_ce1;
    end else begin
        buf2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buf2_V_d1 = grp_add_fu_344_output_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf2_V_d1 = grp_conv_layer_fu_305_output_V_d1;
    end else begin
        buf2_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buf2_V_we1 = grp_add_fu_344_output_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf2_V_we1 = grp_conv_layer_fu_305_output_V_we1;
    end else begin
        buf2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARADDR = grp_fc_fu_366_m_axi_ddr_V_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARADDR = grp_conv_layer_fu_305_m_axi_ddr_V_ARADDR;
    end else begin
        ddr_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARBURST = grp_fc_fu_366_m_axi_ddr_V_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARBURST = grp_conv_layer_fu_305_m_axi_ddr_V_ARBURST;
    end else begin
        ddr_V_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARCACHE = grp_fc_fu_366_m_axi_ddr_V_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARCACHE = grp_conv_layer_fu_305_m_axi_ddr_V_ARCACHE;
    end else begin
        ddr_V_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARID = grp_fc_fu_366_m_axi_ddr_V_ARID;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARID = grp_conv_layer_fu_305_m_axi_ddr_V_ARID;
    end else begin
        ddr_V_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARLEN = grp_fc_fu_366_m_axi_ddr_V_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARLEN = grp_conv_layer_fu_305_m_axi_ddr_V_ARLEN;
    end else begin
        ddr_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARLOCK = grp_fc_fu_366_m_axi_ddr_V_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARLOCK = grp_conv_layer_fu_305_m_axi_ddr_V_ARLOCK;
    end else begin
        ddr_V_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARPROT = grp_fc_fu_366_m_axi_ddr_V_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARPROT = grp_conv_layer_fu_305_m_axi_ddr_V_ARPROT;
    end else begin
        ddr_V_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARQOS = grp_fc_fu_366_m_axi_ddr_V_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARQOS = grp_conv_layer_fu_305_m_axi_ddr_V_ARQOS;
    end else begin
        ddr_V_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARREGION = grp_fc_fu_366_m_axi_ddr_V_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARREGION = grp_conv_layer_fu_305_m_axi_ddr_V_ARREGION;
    end else begin
        ddr_V_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARSIZE = grp_fc_fu_366_m_axi_ddr_V_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARSIZE = grp_conv_layer_fu_305_m_axi_ddr_V_ARSIZE;
    end else begin
        ddr_V_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARUSER = grp_fc_fu_366_m_axi_ddr_V_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARUSER = grp_conv_layer_fu_305_m_axi_ddr_V_ARUSER;
    end else begin
        ddr_V_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_ARVALID = grp_fc_fu_366_m_axi_ddr_V_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_ARVALID = grp_conv_layer_fu_305_m_axi_ddr_V_ARVALID;
    end else begin
        ddr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26))) begin
        ddr_V_RREADY = grp_fc_fu_366_m_axi_ddr_V_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        ddr_V_RREADY = grp_conv_layer_fu_305_m_axi_ddr_V_RREADY;
    end else begin
        ddr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        fc_in_V_address0 = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fc_in_V_address0 = grp_fc_fu_366_input_V_address0;
    end else begin
        fc_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        fc_in_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fc_in_V_ce0 = grp_fc_fu_366_input_V_ce0;
    end else begin
        fc_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        fc_in_V_ce1 = grp_average_pool_fu_376_output_V_ce1;
    end else begin
        fc_in_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        fc_in_V_we1 = grp_average_pool_fu_376_output_V_we1;
    end else begin
        fc_in_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_add_fu_344_SCALE1 = 32'd1058138922;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_add_fu_344_SCALE1 = 32'd1062612029;
    end else begin
        grp_add_fu_344_SCALE1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_add_fu_344_SCALE2 = 32'd1061628548;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_add_fu_344_SCALE2 = 32'd1067120343;
    end else begin
        grp_add_fu_344_SCALE2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_add_fu_344_input1_V_q0 = buf2_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_add_fu_344_input1_V_q0 = buf0_V_q0;
    end else begin
        grp_add_fu_344_input1_V_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_conv_layer_fu_305_K = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_conv_layer_fu_305_K = 4'd1;
    end else begin
        grp_conv_layer_fu_305_K = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd7897088;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd5533696;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd4481024;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd3416064;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd1052672;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_conv_layer_fu_305_OFFSET = 24'd0;
    end else begin
        grp_conv_layer_fu_305_OFFSET = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_conv_layer_fu_305_P = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_conv_layer_fu_305_P = 1'd0;
    end else begin
        grp_conv_layer_fu_305_P = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_conv_layer_fu_305_TI = 8'd16;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_conv_layer_fu_305_TI = 8'd64;
    end else begin
        grp_conv_layer_fu_305_TI = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_conv_layer_fu_305_TO_r = 7'd32;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_conv_layer_fu_305_TO_r = 7'd8;
    end else begin
        grp_conv_layer_fu_305_TO_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_conv_layer_fu_305_input_V_q0 = buf2_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_conv_layer_fu_305_input_V_q0 = buf1_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_conv_layer_fu_305_input_V_q0 = buf0_V_q0;
    end else begin
        grp_conv_layer_fu_305_input_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        outbuf_V_address1 = zext_ln398_fu_771_p1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        outbuf_V_address1 = grp_conv_layer_fu_305_outbuf_V_4_address1;
    end else begin
        outbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        outbuf_V_ce0 = grp_conv_layer_fu_305_outbuf_V_4_ce0;
    end else begin
        outbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        outbuf_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        outbuf_V_ce1 = grp_conv_layer_fu_305_outbuf_V_4_ce1;
    end else begin
        outbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        outbuf_V_d1 = 1536'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        outbuf_V_d1 = grp_conv_layer_fu_305_outbuf_V_4_d1;
    end else begin
        outbuf_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln395_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        outbuf_V_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        outbuf_V_we1 = grp_conv_layer_fu_305_outbuf_V_4_we1;
    end else begin
        outbuf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((startt_V_1_sel == 1'b1)) begin
        startt_V_1_data_out = startt_V_1_payload_B;
    end else begin
        startt_V_1_data_out = startt_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (startt_V_1_ack_in == 1'b1))) begin
        startt_V_1_vld_in = 1'b1;
    end else begin
        startt_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        startt_V_TDATA_blk_n = startt_V_1_state[1'd1];
    end else begin
        startt_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stopt_V_1_sel == 1'b1)) begin
        stopt_V_1_data_out = stopt_V_1_payload_B;
    end else begin
        stopt_V_1_data_out = stopt_V_1_payload_A;
    end
end

always @ (*) begin
    if (((stopt_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        stopt_V_1_vld_in = 1'b1;
    end else begin
        stopt_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        stopt_V_TDATA_blk_n = stopt_V_1_state[1'd1];
    end else begin
        stopt_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((sw0in_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0)) & (icmp_ln380_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        sw0in_V_0_ack_out = 1'b1;
    end else begin
        sw0in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((sw0in_V_0_sel == 1'b1)) begin
        sw0in_V_0_data_out = sw0in_V_0_payload_B;
    end else begin
        sw0in_V_0_data_out = sw0in_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln380_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        sw0in_V_TDATA_blk_n = sw0in_V_0_state[1'd0];
    end else begin
        sw0in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0)) & (icmp_ln380_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0)) & (icmp_ln380_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((sw0in_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (startt_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (startt_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln395_fu_759_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_add_fu_344_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_conv_layer_fu_305_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_add_fu_344_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_average_pool_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_fc_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((stopt_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((icmp_ln380_fu_538_p2 == 1'd0) & (sw0in_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_add_fu_344_ap_start = grp_add_fu_344_ap_start_reg;

assign grp_average_pool_fu_376_ap_start = grp_average_pool_fu_376_ap_start_reg;

assign grp_conv_layer_fu_305_ap_start = grp_conv_layer_fu_305_ap_start_reg;

assign grp_fc_fu_366_ap_start = grp_fc_fu_366_ap_start_reg;

assign grp_fu_388_p4 = {{sw0in_V_0_data_out[15:8]}};

assign grp_fu_398_p4 = {{sw0in_V_0_data_out[23:16]}};

assign grp_fu_408_p4 = {{sw0in_V_0_data_out[31:24]}};

assign grp_fu_418_p4 = {{sw0in_V_0_data_out[39:32]}};

assign grp_fu_428_p4 = {{sw0in_V_0_data_out[47:40]}};

assign grp_fu_438_p4 = {{sw0in_V_0_data_out[55:48]}};

assign grp_fu_448_p4 = {{sw0in_V_0_data_out[63:56]}};

assign grp_fu_458_p4 = {{sw0in_V_0_data_out[71:64]}};

assign grp_fu_468_p4 = {{sw0in_V_0_data_out[79:72]}};

assign grp_fu_478_p4 = {{sw0in_V_0_data_out[87:80]}};

assign grp_fu_488_p4 = {{sw0in_V_0_data_out[95:88]}};

assign grp_fu_498_p4 = {{sw0in_V_0_data_out[103:96]}};

assign grp_fu_508_p4 = {{sw0in_V_0_data_out[111:104]}};

assign grp_fu_518_p4 = {{sw0in_V_0_data_out[119:112]}};

assign grp_fu_528_p4 = {{sw0in_V_0_data_out[127:120]}};

assign i_fu_765_p2 = (i1_0_reg_294 + 11'd1);

assign icmp_ln380_fu_538_p2 = ((l_0_reg_282 == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln395_fu_759_p2 = ((i1_0_reg_294 == 11'd1568) ? 1'b1 : 1'b0);

assign l_fu_544_p2 = (l_0_reg_282 + 12'd1);

assign startt_V_1_ack_in = startt_V_1_state[1'd1];

assign startt_V_1_ack_out = startt_V_TREADY;

assign startt_V_1_load_A = (startt_V_1_state_cmp_full & ~startt_V_1_sel_wr);

assign startt_V_1_load_B = (startt_V_1_state_cmp_full & startt_V_1_sel_wr);

assign startt_V_1_sel = startt_V_1_sel_rd;

assign startt_V_1_state_cmp_full = ((startt_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign startt_V_1_vld_out = startt_V_1_state[1'd0];

assign startt_V_TDATA = startt_V_1_data_out;

assign startt_V_TVALID = startt_V_1_state[1'd0];

assign stopt_V_1_ack_in = stopt_V_1_state[1'd1];

assign stopt_V_1_ack_out = stopt_V_TREADY;

assign stopt_V_1_load_A = (stopt_V_1_state_cmp_full & ~stopt_V_1_sel_wr);

assign stopt_V_1_load_B = (stopt_V_1_state_cmp_full & stopt_V_1_sel_wr);

assign stopt_V_1_sel = stopt_V_1_sel_rd;

assign stopt_V_1_state_cmp_full = ((stopt_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stopt_V_1_vld_out = stopt_V_1_state[1'd0];

assign stopt_V_TDATA = stopt_V_1_data_out;

assign stopt_V_TVALID = stopt_V_1_state[1'd0];

assign sw0in_V_0_ack_in = sw0in_V_0_state[1'd1];

assign sw0in_V_0_load_A = (sw0in_V_0_state_cmp_full & ~sw0in_V_0_sel_wr);

assign sw0in_V_0_load_B = (sw0in_V_0_state_cmp_full & sw0in_V_0_sel_wr);

assign sw0in_V_0_sel = sw0in_V_0_sel_rd;

assign sw0in_V_0_state_cmp_full = ((sw0in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign sw0in_V_0_vld_in = sw0in_V_TVALID;

assign sw0in_V_0_vld_out = sw0in_V_0_state[1'd0];

assign sw0in_V_TREADY = sw0in_V_0_state[1'd1];

assign tmp_fu_671_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{grp_fu_528_p4}, {zext_ln78_30_fu_667_p1}}, {zext_ln78_29_fu_663_p1}}, {zext_ln78_28_fu_659_p1}}, {zext_ln78_27_fu_655_p1}}, {zext_ln78_26_fu_651_p1}}, {zext_ln78_25_fu_647_p1}}, {zext_ln78_24_fu_643_p1}}, {zext_ln78_23_fu_639_p1}}, {zext_ln78_22_fu_635_p1}}, {zext_ln78_21_fu_631_p1}}, {zext_ln78_20_fu_627_p1}}, {zext_ln78_19_fu_623_p1}}, {zext_ln78_18_fu_619_p1}}, {zext_ln78_17_fu_615_p1}}, {zext_ln78_16_fu_611_p1}}, {zext_ln78_15_fu_604_p1}}, {zext_ln78_14_fu_601_p1}}, {zext_ln78_13_fu_598_p1}}, {zext_ln78_12_fu_595_p1}}, {zext_ln78_11_fu_592_p1}}, {zext_ln78_10_fu_589_p1}}, {zext_ln78_9_fu_586_p1}}, {zext_ln78_8_fu_583_p1}}, {zext_ln78_7_fu_580_p1}}, {zext_ln78_6_fu_577_p1}}, {zext_ln78_5_fu_574_p1}}, {zext_ln78_4_fu_571_p1}}, {zext_ln78_3_fu_568_p1}}, {zext_ln78_2_fu_565_p1}}, {zext_ln78_1_fu_562_p1}}, {zext_ln78_fu_559_p1}};

assign trunc_ln296_2_fu_776_p4 = {{fc_in_V_q0[1019:1016]}};

assign trunc_ln647_1_fu_607_p1 = sw0in_V_0_data_out[7:0];

assign trunc_ln647_fu_550_p1 = sw0in_V_0_data_out[7:0];

assign trunc_ln_fu_744_p4 = {{buf0_V_q0[282:279]}};

assign zext_ln180_fu_739_p1 = tmp_fu_671_p33;

assign zext_ln321_1_fu_786_p1 = trunc_ln296_2_fu_776_p4;

assign zext_ln321_fu_754_p1 = trunc_ln_fu_744_p4;

assign zext_ln388_fu_554_p1 = l_0_reg_282;

assign zext_ln398_fu_771_p1 = i1_0_reg_294;

assign zext_ln78_10_fu_589_p1 = p_Result_0_s_reg_849;

assign zext_ln78_11_fu_592_p1 = p_Result_0_10_reg_854;

assign zext_ln78_12_fu_595_p1 = p_Result_0_11_reg_859;

assign zext_ln78_13_fu_598_p1 = p_Result_0_12_reg_864;

assign zext_ln78_14_fu_601_p1 = p_Result_0_13_reg_869;

assign zext_ln78_15_fu_604_p1 = p_Result_0_14_reg_874;

assign zext_ln78_16_fu_611_p1 = trunc_ln647_1_fu_607_p1;

assign zext_ln78_17_fu_615_p1 = grp_fu_388_p4;

assign zext_ln78_18_fu_619_p1 = grp_fu_398_p4;

assign zext_ln78_19_fu_623_p1 = grp_fu_408_p4;

assign zext_ln78_1_fu_562_p1 = p_Result_0_1_reg_804;

assign zext_ln78_20_fu_627_p1 = grp_fu_418_p4;

assign zext_ln78_21_fu_631_p1 = grp_fu_428_p4;

assign zext_ln78_22_fu_635_p1 = grp_fu_438_p4;

assign zext_ln78_23_fu_639_p1 = grp_fu_448_p4;

assign zext_ln78_24_fu_643_p1 = grp_fu_458_p4;

assign zext_ln78_25_fu_647_p1 = grp_fu_468_p4;

assign zext_ln78_26_fu_651_p1 = grp_fu_478_p4;

assign zext_ln78_27_fu_655_p1 = grp_fu_488_p4;

assign zext_ln78_28_fu_659_p1 = grp_fu_498_p4;

assign zext_ln78_29_fu_663_p1 = grp_fu_508_p4;

assign zext_ln78_2_fu_565_p1 = p_Result_0_2_reg_809;

assign zext_ln78_30_fu_667_p1 = grp_fu_518_p4;

assign zext_ln78_3_fu_568_p1 = p_Result_0_3_reg_814;

assign zext_ln78_4_fu_571_p1 = p_Result_0_4_reg_819;

assign zext_ln78_5_fu_574_p1 = p_Result_0_5_reg_824;

assign zext_ln78_6_fu_577_p1 = p_Result_0_6_reg_829;

assign zext_ln78_7_fu_580_p1 = p_Result_0_7_reg_834;

assign zext_ln78_8_fu_583_p1 = p_Result_0_8_reg_839;

assign zext_ln78_9_fu_586_p1 = p_Result_0_9_reg_844;

assign zext_ln78_fu_559_p1 = trunc_ln647_reg_799;

endmodule //resnet50_3
