-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_bias_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_we0 : OUT STD_LOGIC;
    bias_d0 : OUT STD_LOGIC_VECTOR (2047 downto 0);
    scale_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    scale_ce0 : OUT STD_LOGIC;
    scale_we0 : OUT STD_LOGIC;
    scale_d0 : OUT STD_LOGIC_VECTOR (2047 downto 0);
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    TO_r : IN STD_LOGIC_VECTOR (5 downto 0);
    offset : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of load_bias_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage10 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage11 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage12 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage13 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage14 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage15 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ddr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln46_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln46_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal icmp_ln61_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage8 : signal is "none";
    signal ap_block_pp1_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage9 : signal is "none";
    signal ap_block_pp1_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage10 : signal is "none";
    signal ap_block_pp1_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage11 : signal is "none";
    signal ap_block_pp1_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage12 : signal is "none";
    signal ap_block_pp1_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage13 : signal is "none";
    signal ap_block_pp1_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage14 : signal is "none";
    signal ap_block_pp1_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage15 : signal is "none";
    signal ap_block_pp1_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln61_reg_426_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_pp1_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage7 : signal is "none";
    signal ap_block_pp1_stage7 : BOOLEAN;
    signal i_0_reg_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_132_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i1_0_reg_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_0_reg_144_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state28_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln46_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_161_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_325 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln51_fu_183_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln51_reg_330 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ddr_V_addr_read_reg_341 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ddr_V_addr_read_128_reg_346 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ddr_V_addr_read_129_reg_351 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ddr_V_addr_read_130_reg_356 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ddr_V_addr_read_131_reg_361 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ddr_V_addr_read_132_reg_366 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ddr_V_addr_read_133_reg_371 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ddr_V_addr_read_134_reg_376 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ddr_V_addr_read_135_reg_381 : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_addr_read_136_reg_386 : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_addr_read_137_reg_391 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ddr_V_addr_read_138_reg_396 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ddr_V_addr_read_139_reg_401 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ddr_V_addr_read_140_reg_406 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ddr_V_addr_read_141_reg_411 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ddr_V_addr_read_142_reg_416 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal add_ln66_fu_235_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln66_reg_421 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln61_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_245_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_430 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln66_1_fu_267_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln66_1_reg_435 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_state29_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_state45_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_reg_446 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state36_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_state52_pp1_stage8_iter1 : BOOLEAN;
    signal ap_block_pp1_stage8_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_1_reg_451 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state37_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_pp1_stage9_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_2_reg_456 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state38_pp1_stage10_iter0 : BOOLEAN;
    signal ap_block_pp1_stage10_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_3_reg_461 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state39_pp1_stage11_iter0 : BOOLEAN;
    signal ap_block_pp1_stage11_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_4_reg_466 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state40_pp1_stage12_iter0 : BOOLEAN;
    signal ap_block_pp1_stage12_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_5_reg_471 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state41_pp1_stage13_iter0 : BOOLEAN;
    signal ap_block_pp1_stage13_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_6_reg_476 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state42_pp1_stage14_iter0 : BOOLEAN;
    signal ap_block_pp1_stage14_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_7_reg_481 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state43_pp1_stage15_iter0 : BOOLEAN;
    signal ap_block_pp1_stage15_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_8_reg_486 : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_addr_1_read_9_reg_491 : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr_V_addr_1_read_10_reg_496 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state30_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state46_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_11_reg_501 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state31_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state47_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_12_reg_506 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state32_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state48_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_13_reg_511 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state33_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state49_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_14_reg_516 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state34_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_state50_pp1_stage6_iter1 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal ddr_V_addr_1_read_15_reg_521 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state35_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_state51_pp1_stage7_iter1 : BOOLEAN;
    signal ap_block_pp1_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state28 : STD_LOGIC;
    signal ap_block_pp1_stage15_subdone : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_136_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_i1_0_phi_fu_148_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln56_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln51_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln3_fu_171_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_1_fu_179_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_224_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln66_fu_231_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln66_fu_251_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln66_1_fu_255_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln71_1_fu_263_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal ap_block_pp1_stage10_subdone : BOOLEAN;
    signal ap_block_pp1_stage11_subdone : BOOLEAN;
    signal ap_block_pp1_stage12_subdone : BOOLEAN;
    signal ap_block_pp1_stage13_subdone : BOOLEAN;
    signal ap_block_pp1_stage14_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15)) or ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i1_0_reg_144 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then 
                i1_0_reg_144 <= i_1_reg_430;
            end if; 
        end if;
    end process;

    i_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then 
                i_0_reg_132 <= i_reg_325;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_132 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_156_p2 = ap_const_lv1_0))) then
                add_ln51_reg_330 <= add_ln51_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_fu_240_p2 = ap_const_lv1_0))) then
                add_ln66_1_reg_435 <= add_ln66_1_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln66_reg_421 <= add_ln66_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_10_reg_496 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_11_reg_501 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_12_reg_506 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_13_reg_511 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_14_reg_516 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_15_reg_521 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_1_reg_451 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_2_reg_456 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_3_reg_461 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_4_reg_466 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_5_reg_471 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_6_reg_476 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_7_reg_481 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_8_reg_486 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_1_read_9_reg_491 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then
                ddr_V_addr_1_read_reg_446 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_128_reg_346 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_129_reg_351 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_130_reg_356 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_131_reg_361 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_132_reg_366 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_133_reg_371 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_134_reg_376 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_135_reg_381 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_136_reg_386 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_137_reg_391 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_138_reg_396 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_139_reg_401 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_140_reg_406 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_141_reg_411 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then
                ddr_V_addr_read_142_reg_416 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then
                ddr_V_addr_read_reg_341 <= m_axi_ddr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i1_0_reg_144_pp1_iter1_reg <= i1_0_reg_144;
                icmp_ln61_reg_426 <= icmp_ln61_fu_240_p2;
                icmp_ln61_reg_426_pp1_iter1_reg <= icmp_ln61_reg_426;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_132_pp0_iter1_reg <= i_0_reg_132;
                icmp_ln46_reg_321 <= icmp_ln46_fu_156_p2;
                icmp_ln46_reg_321_pp0_iter1_reg <= icmp_ln46_reg_321;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_1_reg_430 <= i_1_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_325 <= i_fu_161_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_enable_reg_pp1_iter1, icmp_ln46_fu_156_p2, icmp_ln61_fu_240_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage8_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage15_subdone, ap_block_pp1_stage8_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage9_subdone, ap_block_pp1_stage10_subdone, ap_block_pp1_stage11_subdone, ap_block_pp1_stage12_subdone, ap_block_pp1_stage13_subdone, ap_block_pp1_stage14_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln46_fu_156_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln46_fu_156_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln61_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln61_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage8_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) and (ap_const_boolean_0 = ap_block_pp1_stage8_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage8_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_pp1_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                end if;
            when ap_ST_fsm_pp1_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                end if;
            when ap_ST_fsm_pp1_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                end if;
            when ap_ST_fsm_pp1_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                end if;
            when ap_ST_fsm_pp1_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                end if;
            when ap_ST_fsm_pp1_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln51_fu_183_p2 <= std_logic_vector(unsigned(offset) + unsigned(zext_ln56_1_fu_179_p1));
    add_ln66_1_fu_267_p2 <= std_logic_vector(unsigned(zext_ln71_1_fu_263_p1) + unsigned(add_ln66_reg_421));
    add_ln66_fu_235_p2 <= std_logic_vector(unsigned(zext_ln66_fu_231_p1) + unsigned(offset));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage10 <= ap_CS_fsm(28);
    ap_CS_fsm_pp1_stage11 <= ap_CS_fsm(29);
    ap_CS_fsm_pp1_stage12 <= ap_CS_fsm(30);
    ap_CS_fsm_pp1_stage13 <= ap_CS_fsm(31);
    ap_CS_fsm_pp1_stage14 <= ap_CS_fsm(32);
    ap_CS_fsm_pp1_stage15 <= ap_CS_fsm(33);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(20);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(23);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(24);
    ap_CS_fsm_pp1_stage7 <= ap_CS_fsm(25);
    ap_CS_fsm_pp1_stage8 <= ap_CS_fsm(26);
    ap_CS_fsm_pp1_stage9 <= ap_CS_fsm(27);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(17);
    ap_CS_fsm_state53 <= ap_CS_fsm(34);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage11_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage11_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage12_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage12_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage13_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage13_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage14_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage14_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage15_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage15_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage2_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage2_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage3_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage4_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage4_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage5_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage5_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage6_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage6_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage7_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage7_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage8_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage8_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage10_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage10_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage10_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage10_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage11_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage11_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage11_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage11_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage12_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage12_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage12_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage12_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage13_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage13_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage13_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage13_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage14_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage14_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage14_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage14_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage15_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage15_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage15_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage15_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage1_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg, ap_block_state29_io)
    begin
                ap_block_pp1_stage1_11001 <= (((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg, ap_block_state29_io)
    begin
                ap_block_pp1_stage1_subdone <= (((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage2_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage2_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage2_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage3_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage3_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage3_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage3_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage4_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage4_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage4_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage4_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage5_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage5_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage5_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage5_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage6_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage6_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage6_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage6_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage7_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage7_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage7_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_pp1_stage7_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage8_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage8_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage8_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage8_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage9_11001_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage9_11001 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage9_subdone_assign_proc : process(m_axi_ddr_V_RVALID, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426)
    begin
                ap_block_pp1_stage9_subdone <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state10_pp0_stage8_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state10_pp0_stage8_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state11_pp0_stage9_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state11_pp0_stage9_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state12_pp0_stage10_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state12_pp0_stage10_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state13_pp0_stage11_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state13_pp0_stage11_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state14_pp0_stage12_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state14_pp0_stage12_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state15_pp0_stage13_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state15_pp0_stage13_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage14_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state16_pp0_stage14_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state17_pp0_stage15_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state17_pp0_stage15_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state18_pp0_stage0_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321)
    begin
                ap_block_state18_pp0_stage0_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;


    ap_block_state19_pp0_stage1_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state19_pp0_stage1_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state20_pp0_stage2_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state20_pp0_stage2_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state21_pp0_stage3_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state21_pp0_stage3_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state22_pp0_stage4_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state22_pp0_stage4_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state23_pp0_stage5_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state23_pp0_stage5_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state24_pp0_stage6_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state24_pp0_stage6_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state25_pp0_stage7_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln46_reg_321_pp0_iter1_reg)
    begin
                ap_block_state25_pp0_stage7_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state26_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(m_axi_ddr_V_ARREADY, icmp_ln61_reg_426)
    begin
                ap_block_state29_io <= ((m_axi_ddr_V_ARREADY = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;

        ap_block_state29_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_pp1_stage8_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state36_pp1_stage8_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state37_pp1_stage9_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state37_pp1_stage9_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state38_pp1_stage10_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state38_pp1_stage10_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state39_pp1_stage11_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state39_pp1_stage11_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_ddr_V_ARREADY, icmp_ln46_reg_321)
    begin
                ap_block_state3_io <= ((m_axi_ddr_V_ARREADY = ap_const_logic_0) and (icmp_ln46_reg_321 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_pp1_stage12_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state40_pp1_stage12_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state41_pp1_stage13_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state41_pp1_stage13_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state42_pp1_stage14_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state42_pp1_stage14_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state43_pp1_stage15_iter0_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state43_pp1_stage15_iter0 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state44_pp1_stage0_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426)
    begin
                ap_block_state44_pp1_stage0_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426 = ap_const_lv1_0));
    end process;


    ap_block_state45_pp1_stage1_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state45_pp1_stage1_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state46_pp1_stage2_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state46_pp1_stage2_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state47_pp1_stage3_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state47_pp1_stage3_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state48_pp1_stage4_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state48_pp1_stage4_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state49_pp1_stage5_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state49_pp1_stage5_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state50_pp1_stage6_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state50_pp1_stage6_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state51_pp1_stage7_iter1_assign_proc : process(m_axi_ddr_V_RVALID, icmp_ln61_reg_426_pp1_iter1_reg)
    begin
                ap_block_state51_pp1_stage7_iter1 <= ((m_axi_ddr_V_RVALID = ap_const_logic_0) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state52_pp1_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln46_fu_156_p2)
    begin
        if ((icmp_ln46_fu_156_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state28_assign_proc : process(icmp_ln61_fu_240_p2)
    begin
        if ((icmp_ln61_fu_240_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_phi_fu_148_p4_assign_proc : process(icmp_ln61_reg_426, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, i1_0_reg_144, i_1_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_0_phi_fu_148_p4 <= i_1_reg_430;
        else 
            ap_phi_mux_i1_0_phi_fu_148_p4 <= i1_0_reg_144;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_136_p4_assign_proc : process(icmp_ln46_reg_321, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_0_reg_132, i_reg_325)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_136_p4 <= i_reg_325;
        else 
            ap_phi_mux_i_0_phi_fu_136_p4 <= i_0_reg_132;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln56_fu_198_p1(5 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_d0 <= (((((((((((((((ddr_V_addr_read_142_reg_416 & ddr_V_addr_read_141_reg_411) & ddr_V_addr_read_140_reg_406) & ddr_V_addr_read_139_reg_401) & ddr_V_addr_read_138_reg_396) & ddr_V_addr_read_137_reg_391) & ddr_V_addr_read_136_reg_386) & ddr_V_addr_read_135_reg_381) & ddr_V_addr_read_134_reg_376) & ddr_V_addr_read_133_reg_371) & ddr_V_addr_read_132_reg_366) & ddr_V_addr_read_131_reg_361) & ddr_V_addr_read_130_reg_356) & ddr_V_addr_read_129_reg_351) & ddr_V_addr_read_128_reg_346) & ddr_V_addr_read_reg_341);

    bias_we0_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0))) then 
            bias_we0 <= ap_const_logic_1;
        else 
            bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_V_blk_n_AR_assign_proc : process(m_axi_ddr_V_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln46_reg_321, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, icmp_ln61_reg_426)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln46_reg_321 = ap_const_lv1_0)))) then 
            ddr_V_blk_n_AR <= m_axi_ddr_V_ARREADY;
        else 
            ddr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    ddr_V_blk_n_R_assign_proc : process(m_axi_ddr_V_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln46_reg_321, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln46_reg_321_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, icmp_ln61_reg_426, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9, ap_CS_fsm_pp1_stage10, ap_block_pp1_stage10, ap_CS_fsm_pp1_stage11, ap_block_pp1_stage11, ap_CS_fsm_pp1_stage12, ap_block_pp1_stage12, ap_CS_fsm_pp1_stage13, ap_block_pp1_stage13, ap_CS_fsm_pp1_stage14, ap_block_pp1_stage14, ap_CS_fsm_pp1_stage15, ap_block_pp1_stage15, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln61_reg_426_pp1_iter1_reg, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)))) then 
            ddr_V_blk_n_R <= m_axi_ddr_V_RVALID;
        else 
            ddr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_245_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_phi_fu_148_p4) + unsigned(ap_const_lv6_1));
    i_fu_161_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_136_p4) + unsigned(ap_const_lv6_1));
    icmp_ln46_fu_156_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_136_p4 = TO_r) else "0";
    icmp_ln61_fu_240_p2 <= "1" when (ap_phi_mux_i1_0_phi_fu_148_p4 = TO_r) else "0";

    m_axi_ddr_V_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426, ap_block_pp0_stage1_11001, ap_block_pp1_stage1_11001, zext_ln51_fu_188_p1, zext_ln66_1_fu_272_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426 = ap_const_lv1_0))) then 
            m_axi_ddr_V_ARADDR <= zext_ln66_1_fu_272_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln46_reg_321 = ap_const_lv1_0))) then 
            m_axi_ddr_V_ARADDR <= zext_ln51_fu_188_p1(32 - 1 downto 0);
        else 
            m_axi_ddr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_ddr_V_ARBURST <= ap_const_lv2_0;
    m_axi_ddr_V_ARCACHE <= ap_const_lv4_0;
    m_axi_ddr_V_ARID <= ap_const_lv1_0;
    m_axi_ddr_V_ARLEN <= ap_const_lv32_10;
    m_axi_ddr_V_ARLOCK <= ap_const_lv2_0;
    m_axi_ddr_V_ARPROT <= ap_const_lv3_0;
    m_axi_ddr_V_ARQOS <= ap_const_lv4_0;
    m_axi_ddr_V_ARREGION <= ap_const_lv4_0;
    m_axi_ddr_V_ARSIZE <= ap_const_lv3_0;
    m_axi_ddr_V_ARUSER <= ap_const_lv1_0;

    m_axi_ddr_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426, ap_block_pp0_stage1_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln46_reg_321 = ap_const_lv1_0)))) then 
            m_axi_ddr_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_ddr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_V_AWADDR <= ap_const_lv32_0;
    m_axi_ddr_V_AWBURST <= ap_const_lv2_0;
    m_axi_ddr_V_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr_V_AWID <= ap_const_lv1_0;
    m_axi_ddr_V_AWLEN <= ap_const_lv32_0;
    m_axi_ddr_V_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr_V_AWPROT <= ap_const_lv3_0;
    m_axi_ddr_V_AWQOS <= ap_const_lv4_0;
    m_axi_ddr_V_AWREGION <= ap_const_lv4_0;
    m_axi_ddr_V_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr_V_AWUSER <= ap_const_lv1_0;
    m_axi_ddr_V_AWVALID <= ap_const_logic_0;
    m_axi_ddr_V_BREADY <= ap_const_logic_0;

    m_axi_ddr_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln46_reg_321, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_321_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln61_reg_426, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage10, ap_CS_fsm_pp1_stage11, ap_CS_fsm_pp1_stage12, ap_CS_fsm_pp1_stage13, ap_CS_fsm_pp1_stage14, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage4, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage7, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp1_stage1_11001, ap_block_pp1_stage8_11001, ap_block_pp1_stage9_11001, ap_block_pp1_stage10_11001, ap_block_pp1_stage11_11001, ap_block_pp1_stage12_11001, ap_block_pp1_stage13_11001, ap_block_pp1_stage14_11001, ap_block_pp1_stage15_11001, ap_block_pp1_stage2_11001, ap_block_pp1_stage3_11001, ap_block_pp1_stage4_11001, ap_block_pp1_stage5_11001, ap_block_pp1_stage6_11001, ap_block_pp1_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln61_reg_426 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_reg_321 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln46_reg_321_pp0_iter1_reg = ap_const_lv1_0)))) then 
            m_axi_ddr_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_ddr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr_V_WDATA <= ap_const_lv128_lc_1;
    m_axi_ddr_V_WID <= ap_const_lv1_0;
    m_axi_ddr_V_WLAST <= ap_const_logic_0;
    m_axi_ddr_V_WSTRB <= ap_const_lv16_0;
    m_axi_ddr_V_WUSER <= ap_const_lv1_0;
    m_axi_ddr_V_WVALID <= ap_const_logic_0;
    scale_address0 <= zext_ln71_fu_282_p1(5 - 1 downto 0);

    scale_ce0_assign_proc : process(ap_CS_fsm_pp1_stage8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) then 
            scale_ce0 <= ap_const_logic_1;
        else 
            scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scale_d0 <= (((((((((((((((ddr_V_addr_1_read_15_reg_521 & ddr_V_addr_1_read_14_reg_516) & ddr_V_addr_1_read_13_reg_511) & ddr_V_addr_1_read_12_reg_506) & ddr_V_addr_1_read_11_reg_501) & ddr_V_addr_1_read_10_reg_496) & ddr_V_addr_1_read_9_reg_491) & ddr_V_addr_1_read_8_reg_486) & ddr_V_addr_1_read_7_reg_481) & ddr_V_addr_1_read_6_reg_476) & ddr_V_addr_1_read_5_reg_471) & ddr_V_addr_1_read_4_reg_466) & ddr_V_addr_1_read_3_reg_461) & ddr_V_addr_1_read_2_reg_456) & ddr_V_addr_1_read_1_reg_451) & ddr_V_addr_1_read_reg_446);

    scale_we0_assign_proc : process(ap_CS_fsm_pp1_stage8, ap_enable_reg_pp1_iter1, icmp_ln61_reg_426_pp1_iter1_reg, ap_block_pp1_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (icmp_ln61_reg_426_pp1_iter1_reg = ap_const_lv1_0))) then 
            scale_we0 <= ap_const_logic_1;
        else 
            scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln3_fu_171_p3 <= (trunc_ln51_fu_167_p1 & ap_const_lv4_0);
    shl_ln66_1_fu_255_p3 <= (trunc_ln66_fu_251_p1 & ap_const_lv4_0);
    shl_ln_fu_224_p3 <= (TO_r & ap_const_lv4_0);
    trunc_ln51_fu_167_p1 <= ap_phi_mux_i_0_phi_fu_136_p4(5 - 1 downto 0);
    trunc_ln66_fu_251_p1 <= ap_phi_mux_i1_0_phi_fu_148_p4(5 - 1 downto 0);
    zext_ln51_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_reg_330),64));
    zext_ln56_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_171_p3),22));
    zext_ln56_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_132_pp0_iter1_reg),64));
    zext_ln66_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_1_reg_435),64));
    zext_ln66_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_224_p3),22));
    zext_ln71_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln66_1_fu_255_p3),22));
    zext_ln71_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_144_pp1_iter1_reg),64));
end behav;
