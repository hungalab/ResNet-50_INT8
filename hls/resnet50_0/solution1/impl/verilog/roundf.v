// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module roundf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [22:0] mask_table1_q0;
wire   [4:0] one_half_table2_address0;
reg    one_half_table2_ce0;
wire   [23:0] one_half_table2_q0;
reg   [31:0] x_read_reg_200;
wire   [31:0] t_V_1_fu_72_p1;
reg   [31:0] t_V_1_reg_205;
wire   [0:0] icmp_ln849_fu_86_p2;
reg   [0:0] icmp_ln849_reg_211;
wire   [0:0] icmp_ln849_1_fu_92_p2;
reg   [0:0] icmp_ln849_1_reg_217;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln498_fu_108_p1;
wire   [7:0] tmp_V_fu_76_p4;
wire   [4:0] index_V_fu_98_p4;
wire   [0:0] p_Result_s_fu_114_p3;
wire   [31:0] zext_ln209_fu_129_p1;
wire   [31:0] p_Val2_s_fu_133_p2;
wire   [22:0] tmp_V_1_fu_138_p1;
wire   [22:0] xor_ln1309_fu_142_p2;
wire   [8:0] tmp_fu_154_p4;
wire   [22:0] xs_sig_V_fu_148_p2;
wire   [31:0] p_Result_11_fu_121_p3;
wire   [31:0] p_Result_12_fu_164_p3;
wire   [31:0] select_ln849_fu_172_p3;
wire   [0:0] xor_ln849_fu_183_p2;
wire   [0:0] and_ln849_fu_188_p2;
wire   [31:0] bitcast_ln849_fu_179_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

roundf_mask_table1 #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

roundf_one_half_table2 #(
    .DataWidth( 24 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
one_half_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table2_address0),
    .ce0(one_half_table2_ce0),
    .q0(one_half_table2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln849_1_reg_217 <= icmp_ln849_1_fu_92_p2;
        icmp_ln849_reg_211 <= icmp_ln849_fu_86_p2;
        t_V_1_reg_205 <= t_V_1_fu_72_p1;
        x_read_reg_200 <= x;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        one_half_table2_ce0 = 1'b1;
    end else begin
        one_half_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln849_fu_188_p2 = (xor_ln849_fu_183_p2 & icmp_ln849_1_reg_217);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((and_ln849_fu_188_p2[0:0] === 1'b1) ? x_read_reg_200 : bitcast_ln849_fu_179_p1);

assign bitcast_ln849_fu_179_p1 = select_ln849_fu_172_p3;

assign icmp_ln849_1_fu_92_p2 = ((tmp_V_fu_76_p4 > 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_86_p2 = ((tmp_V_fu_76_p4 < 8'd126) ? 1'b1 : 1'b0);

assign index_V_fu_98_p4 = {{t_V_1_fu_72_p1[27:23]}};

assign mask_table1_address0 = zext_ln498_fu_108_p1;

assign one_half_table2_address0 = zext_ln498_fu_108_p1;

assign p_Result_11_fu_121_p3 = {{p_Result_s_fu_114_p3}, {31'd0}};

assign p_Result_12_fu_164_p3 = {{tmp_fu_154_p4}, {xs_sig_V_fu_148_p2}};

assign p_Result_s_fu_114_p3 = t_V_1_reg_205[32'd31];

assign p_Val2_s_fu_133_p2 = (zext_ln209_fu_129_p1 + t_V_1_reg_205);

assign select_ln849_fu_172_p3 = ((icmp_ln849_reg_211[0:0] === 1'b1) ? p_Result_11_fu_121_p3 : p_Result_12_fu_164_p3);

assign t_V_1_fu_72_p1 = x;

assign tmp_V_1_fu_138_p1 = p_Val2_s_fu_133_p2[22:0];

assign tmp_V_fu_76_p4 = {{t_V_1_fu_72_p1[30:23]}};

assign tmp_fu_154_p4 = {{p_Val2_s_fu_133_p2[31:23]}};

assign xor_ln1309_fu_142_p2 = (mask_table1_q0 ^ 23'd8388607);

assign xor_ln849_fu_183_p2 = (icmp_ln849_reg_211 ^ 1'd1);

assign xs_sig_V_fu_148_p2 = (xor_ln1309_fu_142_p2 & tmp_V_1_fu_138_p1);

assign zext_ln209_fu_129_p1 = one_half_table2_q0;

assign zext_ln498_fu_108_p1 = index_V_fu_98_p4;

endmodule //roundf
