// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address1,
        output_V_ce1,
        output_V_we1,
        output_V_d1,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        TO_r,
        TI,
        K,
        P,
        OFFSET
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] input_V_address0;
output   input_V_ce0;
input  [287:0] input_V_q0;
output  [14:0] output_V_address1;
output   output_V_ce1;
output   output_V_we1;
output  [287:0] output_V_d1;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [31:0] m_axi_ddr_V_AWADDR;
output  [0:0] m_axi_ddr_V_AWID;
output  [31:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [0:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [127:0] m_axi_ddr_V_WDATA;
output  [15:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [0:0] m_axi_ddr_V_WID;
output  [0:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [31:0] m_axi_ddr_V_ARADDR;
output  [0:0] m_axi_ddr_V_ARID;
output  [31:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [0:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [127:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [0:0] m_axi_ddr_V_RID;
input  [0:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [0:0] m_axi_ddr_V_BID;
input  [0:0] m_axi_ddr_V_BUSER;
input  [3:0] TO_r;
input  [4:0] TI;
input  [3:0] K;
input  [0:0] P;
input  [18:0] OFFSET;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ddr_V_ARVALID;
reg[31:0] m_axi_ddr_V_ARADDR;
reg[0:0] m_axi_ddr_V_ARID;
reg[31:0] m_axi_ddr_V_ARLEN;
reg[2:0] m_axi_ddr_V_ARSIZE;
reg[1:0] m_axi_ddr_V_ARBURST;
reg[1:0] m_axi_ddr_V_ARLOCK;
reg[3:0] m_axi_ddr_V_ARCACHE;
reg[2:0] m_axi_ddr_V_ARPROT;
reg[3:0] m_axi_ddr_V_ARQOS;
reg[3:0] m_axi_ddr_V_ARREGION;
reg[0:0] m_axi_ddr_V_ARUSER;
reg m_axi_ddr_V_RREADY;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] outbuf_V_address0;
reg    outbuf_V_ce0;
wire   [1535:0] outbuf_V_q0;
reg   [13:0] outbuf_V_address1;
reg    outbuf_V_ce1;
reg    outbuf_V_we1;
reg   [1535:0] outbuf_V_d1;
wire   [16:0] mul_ln189_2_fu_192_p2;
reg   [16:0] mul_ln189_2_reg_244;
reg   [15:0] lshr_ln_reg_249;
wire   [2:0] empty_fu_227_p1;
reg   [2:0] empty_reg_254;
wire   [17:0] empty_76_fu_232_p1;
reg   [17:0] empty_76_reg_261;
wire   [3:0] empty_77_fu_236_p1;
reg   [3:0] empty_77_reg_266;
wire   [1:0] empty_78_fu_240_p1;
reg   [1:0] empty_78_reg_271;
wire    ap_CS_fsm_state3;
reg   [1:0] bias_address0;
reg    bias_ce0;
reg    bias_we0;
wire   [2047:0] bias_q0;
reg   [1:0] scale_address0;
reg    scale_ce0;
reg    scale_we0;
wire   [2047:0] scale_q0;
wire   [14:0] grp_dataflow_parent_loop_1_fu_108_input_V_address0;
wire    grp_dataflow_parent_loop_1_fu_108_input_V_ce0;
wire   [287:0] grp_dataflow_parent_loop_1_fu_108_input_V_d0;
wire    grp_dataflow_parent_loop_1_fu_108_input_V_we0;
wire   [14:0] grp_dataflow_parent_loop_1_fu_108_input_V_address1;
wire    grp_dataflow_parent_loop_1_fu_108_input_V_ce1;
wire   [287:0] grp_dataflow_parent_loop_1_fu_108_input_V_d1;
wire    grp_dataflow_parent_loop_1_fu_108_input_V_we1;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWVALID;
wire   [31:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWADDR;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWID;
wire   [31:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWLEN;
wire   [2:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWSIZE;
wire   [1:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWBURST;
wire   [1:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWLOCK;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWCACHE;
wire   [2:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWPROT;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWQOS;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWREGION;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWUSER;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WVALID;
wire   [127:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WDATA;
wire   [15:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WSTRB;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WLAST;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WID;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WUSER;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARVALID;
wire   [31:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARADDR;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARID;
wire   [31:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLEN;
wire   [2:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARSIZE;
wire   [1:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARBURST;
wire   [1:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLOCK;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARCACHE;
wire   [2:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARPROT;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARQOS;
wire   [3:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARREGION;
wire   [0:0] grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARUSER;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_RREADY;
wire    grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_BREADY;
wire   [13:0] grp_dataflow_parent_loop_1_fu_108_outbuf_V_address0;
wire    grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce0;
wire   [1535:0] grp_dataflow_parent_loop_1_fu_108_outbuf_V_d0;
wire    grp_dataflow_parent_loop_1_fu_108_outbuf_V_we0;
wire   [13:0] grp_dataflow_parent_loop_1_fu_108_outbuf_V_address1;
wire    grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce1;
wire   [1535:0] grp_dataflow_parent_loop_1_fu_108_outbuf_V_d1;
wire    grp_dataflow_parent_loop_1_fu_108_outbuf_V_we1;
wire    grp_dataflow_parent_loop_1_fu_108_ap_start;
wire    grp_dataflow_parent_loop_1_fu_108_ap_done;
wire    grp_dataflow_parent_loop_1_fu_108_ap_ready;
wire    grp_dataflow_parent_loop_1_fu_108_ap_idle;
reg    grp_dataflow_parent_loop_1_fu_108_ap_continue;
wire    grp_store_output_1_fu_125_ap_start;
wire    grp_store_output_1_fu_125_ap_done;
wire    grp_store_output_1_fu_125_ap_idle;
wire    grp_store_output_1_fu_125_ap_ready;
wire   [14:0] grp_store_output_1_fu_125_output_V_address1;
wire    grp_store_output_1_fu_125_output_V_ce1;
wire    grp_store_output_1_fu_125_output_V_we1;
wire   [287:0] grp_store_output_1_fu_125_output_V_d1;
wire   [1:0] grp_store_output_1_fu_125_bias_address0;
wire    grp_store_output_1_fu_125_bias_ce0;
wire   [1:0] grp_store_output_1_fu_125_scale_address0;
wire    grp_store_output_1_fu_125_scale_ce0;
wire   [13:0] grp_store_output_1_fu_125_outbuf_V_address0;
wire    grp_store_output_1_fu_125_outbuf_V_ce0;
wire   [13:0] grp_store_output_1_fu_125_outbuf_V_address1;
wire    grp_store_output_1_fu_125_outbuf_V_ce1;
wire    grp_store_output_1_fu_125_outbuf_V_we1;
wire   [1535:0] grp_store_output_1_fu_125_outbuf_V_d1;
wire    grp_load_bias_scale_fu_140_ap_start;
wire    grp_load_bias_scale_fu_140_ap_done;
wire    grp_load_bias_scale_fu_140_ap_idle;
wire    grp_load_bias_scale_fu_140_ap_ready;
wire   [1:0] grp_load_bias_scale_fu_140_bias_address0;
wire    grp_load_bias_scale_fu_140_bias_ce0;
wire    grp_load_bias_scale_fu_140_bias_we0;
wire   [2047:0] grp_load_bias_scale_fu_140_bias_d0;
wire   [1:0] grp_load_bias_scale_fu_140_scale_address0;
wire    grp_load_bias_scale_fu_140_scale_ce0;
wire    grp_load_bias_scale_fu_140_scale_we0;
wire   [2047:0] grp_load_bias_scale_fu_140_scale_d0;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_AWVALID;
wire   [31:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWADDR;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWID;
wire   [31:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWLEN;
wire   [2:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWSIZE;
wire   [1:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWBURST;
wire   [1:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWLOCK;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWCACHE;
wire   [2:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWPROT;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWQOS;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWREGION;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_AWUSER;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_WVALID;
wire   [127:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_WDATA;
wire   [15:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_WSTRB;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_WLAST;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_WID;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_WUSER;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_ARVALID;
wire   [31:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARADDR;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARID;
wire   [31:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLEN;
wire   [2:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARSIZE;
wire   [1:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARBURST;
wire   [1:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLOCK;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARCACHE;
wire   [2:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARPROT;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARQOS;
wire   [3:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARREGION;
wire   [0:0] grp_load_bias_scale_fu_140_m_axi_ddr_V_ARUSER;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_RREADY;
wire    grp_load_bias_scale_fu_140_m_axi_ddr_V_BREADY;
reg    grp_dataflow_parent_loop_1_fu_108_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done;
reg    grp_store_output_1_fu_125_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_load_bias_scale_fu_140_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [3:0] mul_ln189_fu_164_p0;
wire   [4:0] mul_ln189_fu_164_p1;
wire   [8:0] mul_ln189_fu_164_p2;
wire   [3:0] mul_ln189_1_fu_178_p0;
wire   [8:0] mul_ln189_1_fu_178_p1;
wire   [12:0] mul_ln189_1_fu_178_p2;
wire   [3:0] mul_ln189_2_fu_192_p0;
wire   [12:0] mul_ln189_2_fu_192_p1;
wire   [8:0] trunc_ln189_fu_198_p1;
wire   [19:0] zext_ln182_fu_152_p1;
wire   [19:0] shl_ln_fu_202_p3;
wire   [19:0] add_ln189_fu_210_p2;
reg   [5:0] ap_NS_fsm;
wire   [12:0] mul_ln189_1_fu_178_p00;
wire   [12:0] mul_ln189_1_fu_178_p10;
wire   [16:0] mul_ln189_2_fu_192_p00;
wire   [16:0] mul_ln189_2_fu_192_p10;
wire   [8:0] mul_ln189_fu_164_p00;
wire   [8:0] mul_ln189_fu_164_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_dataflow_parent_loop_1_fu_108_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done = 1'b0;
#0 grp_store_output_1_fu_125_ap_start_reg = 1'b0;
#0 grp_load_bias_scale_fu_140_ap_start_reg = 1'b0;
end

conv_layer_outbuf_V #(
    .DataWidth( 1536 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
outbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outbuf_V_address0),
    .ce0(outbuf_V_ce0),
    .q0(outbuf_V_q0),
    .address1(outbuf_V_address1),
    .ce1(outbuf_V_ce1),
    .we1(outbuf_V_we1),
    .d1(outbuf_V_d1)
);

conv_layer_bias #(
    .DataWidth( 2048 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_address0),
    .ce0(bias_ce0),
    .we0(bias_we0),
    .d0(grp_load_bias_scale_fu_140_bias_d0),
    .q0(bias_q0)
);

conv_layer_scale #(
    .DataWidth( 2048 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
scale_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(scale_address0),
    .ce0(scale_ce0),
    .we0(scale_we0),
    .d0(grp_load_bias_scale_fu_140_scale_d0),
    .q0(scale_q0)
);

dataflow_parent_loop_1 grp_dataflow_parent_loop_1_fu_108(
    .mul_ln189_2(mul_ln189_2_reg_244),
    .input_V_address0(grp_dataflow_parent_loop_1_fu_108_input_V_address0),
    .input_V_ce0(grp_dataflow_parent_loop_1_fu_108_input_V_ce0),
    .input_V_d0(grp_dataflow_parent_loop_1_fu_108_input_V_d0),
    .input_V_q0(input_V_q0),
    .input_V_we0(grp_dataflow_parent_loop_1_fu_108_input_V_we0),
    .input_V_address1(grp_dataflow_parent_loop_1_fu_108_input_V_address1),
    .input_V_ce1(grp_dataflow_parent_loop_1_fu_108_input_V_ce1),
    .input_V_d1(grp_dataflow_parent_loop_1_fu_108_input_V_d1),
    .input_V_q1(288'd0),
    .input_V_we1(grp_dataflow_parent_loop_1_fu_108_input_V_we1),
    .m_axi_ddr_V_AWVALID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(m_axi_ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(m_axi_ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(m_axi_ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(m_axi_ddr_V_RLAST),
    .m_axi_ddr_V_RID(m_axi_ddr_V_RID),
    .m_axi_ddr_V_RUSER(m_axi_ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(m_axi_ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0),
    .OFFSET(empty_76_reg_261),
    .TO_r(empty_reg_254),
    .TI(empty_77_reg_266),
    .P(P),
    .K(empty_78_reg_271),
    .outbuf_V_address0(grp_dataflow_parent_loop_1_fu_108_outbuf_V_address0),
    .outbuf_V_ce0(grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce0),
    .outbuf_V_d0(grp_dataflow_parent_loop_1_fu_108_outbuf_V_d0),
    .outbuf_V_q0(outbuf_V_q0),
    .outbuf_V_we0(grp_dataflow_parent_loop_1_fu_108_outbuf_V_we0),
    .outbuf_V_address1(grp_dataflow_parent_loop_1_fu_108_outbuf_V_address1),
    .outbuf_V_ce1(grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce1),
    .outbuf_V_d1(grp_dataflow_parent_loop_1_fu_108_outbuf_V_d1),
    .outbuf_V_q1(1536'd0),
    .outbuf_V_we1(grp_dataflow_parent_loop_1_fu_108_outbuf_V_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .OFFSET_ap_vld(1'b1),
    .TO_r_ap_vld(1'b1),
    .TI_ap_vld(1'b1),
    .P_ap_vld(1'b1),
    .K_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_1_fu_108_ap_start),
    .ap_done(grp_dataflow_parent_loop_1_fu_108_ap_done),
    .ap_ready(grp_dataflow_parent_loop_1_fu_108_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_1_fu_108_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_1_fu_108_ap_continue)
);

store_output_1 grp_store_output_1_fu_125(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_store_output_1_fu_125_ap_start),
    .ap_done(grp_store_output_1_fu_125_ap_done),
    .ap_idle(grp_store_output_1_fu_125_ap_idle),
    .ap_ready(grp_store_output_1_fu_125_ap_ready),
    .output_V_address1(grp_store_output_1_fu_125_output_V_address1),
    .output_V_ce1(grp_store_output_1_fu_125_output_V_ce1),
    .output_V_we1(grp_store_output_1_fu_125_output_V_we1),
    .output_V_d1(grp_store_output_1_fu_125_output_V_d1),
    .bias_address0(grp_store_output_1_fu_125_bias_address0),
    .bias_ce0(grp_store_output_1_fu_125_bias_ce0),
    .bias_q0(bias_q0),
    .scale_address0(grp_store_output_1_fu_125_scale_address0),
    .scale_ce0(grp_store_output_1_fu_125_scale_ce0),
    .scale_q0(scale_q0),
    .TO_r(empty_reg_254),
    .outbuf_V_address0(grp_store_output_1_fu_125_outbuf_V_address0),
    .outbuf_V_ce0(grp_store_output_1_fu_125_outbuf_V_ce0),
    .outbuf_V_q0(outbuf_V_q0),
    .outbuf_V_address1(grp_store_output_1_fu_125_outbuf_V_address1),
    .outbuf_V_ce1(grp_store_output_1_fu_125_outbuf_V_ce1),
    .outbuf_V_we1(grp_store_output_1_fu_125_outbuf_V_we1),
    .outbuf_V_d1(grp_store_output_1_fu_125_outbuf_V_d1)
);

load_bias_scale grp_load_bias_scale_fu_140(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_bias_scale_fu_140_ap_start),
    .ap_done(grp_load_bias_scale_fu_140_ap_done),
    .ap_idle(grp_load_bias_scale_fu_140_ap_idle),
    .ap_ready(grp_load_bias_scale_fu_140_ap_ready),
    .bias_address0(grp_load_bias_scale_fu_140_bias_address0),
    .bias_ce0(grp_load_bias_scale_fu_140_bias_ce0),
    .bias_we0(grp_load_bias_scale_fu_140_bias_we0),
    .bias_d0(grp_load_bias_scale_fu_140_bias_d0),
    .scale_address0(grp_load_bias_scale_fu_140_scale_address0),
    .scale_ce0(grp_load_bias_scale_fu_140_scale_ce0),
    .scale_we0(grp_load_bias_scale_fu_140_scale_we0),
    .scale_d0(grp_load_bias_scale_fu_140_scale_d0),
    .m_axi_ddr_V_AWVALID(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(grp_load_bias_scale_fu_140_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(grp_load_bias_scale_fu_140_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(grp_load_bias_scale_fu_140_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(grp_load_bias_scale_fu_140_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(grp_load_bias_scale_fu_140_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(grp_load_bias_scale_fu_140_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(grp_load_bias_scale_fu_140_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(m_axi_ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(grp_load_bias_scale_fu_140_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(m_axi_ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(grp_load_bias_scale_fu_140_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(m_axi_ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(m_axi_ddr_V_RLAST),
    .m_axi_ddr_V_RID(m_axi_ddr_V_RID),
    .m_axi_ddr_V_RUSER(m_axi_ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(m_axi_ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(grp_load_bias_scale_fu_140_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0),
    .TO_r(empty_reg_254),
    .offset(lshr_ln_reg_249)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_1_fu_108_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_1_fu_108_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_parent_loop_1_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_dataflow_parent_loop_1_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_1_fu_108_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_1_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_bias_scale_fu_140_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_load_bias_scale_fu_140_ap_start_reg <= 1'b1;
        end else if ((grp_load_bias_scale_fu_140_ap_ready == 1'b1)) begin
            grp_load_bias_scale_fu_140_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_store_output_1_fu_125_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_store_output_1_fu_125_ap_start_reg <= 1'b1;
        end else if ((grp_store_output_1_fu_125_ap_ready == 1'b1)) begin
            grp_store_output_1_fu_125_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_76_reg_261 <= empty_76_fu_232_p1;
        empty_77_reg_266 <= empty_77_fu_236_p1;
        empty_78_reg_271 <= empty_78_fu_240_p1;
        empty_reg_254 <= empty_fu_227_p1;
        lshr_ln_reg_249 <= {{add_ln189_fu_210_p2[19:4]}};
        mul_ln189_2_reg_244 <= mul_ln189_2_fu_192_p2;
    end
end

always @ (*) begin
    if ((((grp_store_output_1_fu_125_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_store_output_1_fu_125_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_address0 = grp_load_bias_scale_fu_140_bias_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        bias_address0 = grp_store_output_1_fu_125_bias_address0;
    end else begin
        bias_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_ce0 = grp_load_bias_scale_fu_140_bias_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        bias_ce0 = grp_store_output_1_fu_125_bias_ce0;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_we0 = grp_load_bias_scale_fu_140_bias_we0;
    end else begin
        bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_dataflow_parent_loop_1_fu_108_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_1_fu_108_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARADDR = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARADDR = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARADDR;
    end else begin
        m_axi_ddr_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARBURST = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARBURST = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARBURST;
    end else begin
        m_axi_ddr_V_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARCACHE = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARCACHE = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARCACHE;
    end else begin
        m_axi_ddr_V_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARID = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARID = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARID;
    end else begin
        m_axi_ddr_V_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARLEN = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARLEN = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLEN;
    end else begin
        m_axi_ddr_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARLOCK = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARLOCK = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARLOCK;
    end else begin
        m_axi_ddr_V_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARPROT = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARPROT = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARPROT;
    end else begin
        m_axi_ddr_V_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARQOS = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARQOS = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARQOS;
    end else begin
        m_axi_ddr_V_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARREGION = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARREGION = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARREGION;
    end else begin
        m_axi_ddr_V_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARSIZE = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARSIZE = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARSIZE;
    end else begin
        m_axi_ddr_V_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARUSER = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARUSER = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARUSER;
    end else begin
        m_axi_ddr_V_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_ARVALID = grp_load_bias_scale_fu_140_m_axi_ddr_V_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_ARVALID = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_ARVALID;
    end else begin
        m_axi_ddr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_ddr_V_RREADY = grp_load_bias_scale_fu_140_m_axi_ddr_V_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr_V_RREADY = grp_dataflow_parent_loop_1_fu_108_m_axi_ddr_V_RREADY;
    end else begin
        m_axi_ddr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_address0 = grp_store_output_1_fu_125_outbuf_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_address0 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_address0;
    end else begin
        outbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_address1 = grp_store_output_1_fu_125_outbuf_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_address1 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_address1;
    end else begin
        outbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_ce0 = grp_store_output_1_fu_125_outbuf_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_ce0 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce0;
    end else begin
        outbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_ce1 = grp_store_output_1_fu_125_outbuf_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_ce1 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_ce1;
    end else begin
        outbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_d1 = grp_store_output_1_fu_125_outbuf_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_d1 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_d1;
    end else begin
        outbuf_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outbuf_V_we1 = grp_store_output_1_fu_125_outbuf_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outbuf_V_we1 = grp_dataflow_parent_loop_1_fu_108_outbuf_V_we1;
    end else begin
        outbuf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        scale_address0 = grp_load_bias_scale_fu_140_scale_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        scale_address0 = grp_store_output_1_fu_125_scale_address0;
    end else begin
        scale_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        scale_ce0 = grp_load_bias_scale_fu_140_scale_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        scale_ce0 = grp_store_output_1_fu_125_scale_ce0;
    end else begin
        scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        scale_we0 = grp_load_bias_scale_fu_140_scale_we0;
    end else begin
        scale_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_load_bias_scale_fu_140_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_store_output_1_fu_125_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln189_fu_210_p2 = (zext_ln182_fu_152_p1 + shl_ln_fu_202_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_ready & ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_done) == 1'b0);
end

assign ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_done = (grp_dataflow_parent_loop_1_fu_108_ap_done | ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_done);

assign ap_sync_grp_dataflow_parent_loop_1_fu_108_ap_ready = (grp_dataflow_parent_loop_1_fu_108_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_1_fu_108_ap_ready);

assign empty_76_fu_232_p1 = OFFSET[17:0];

assign empty_77_fu_236_p1 = TI[3:0];

assign empty_78_fu_240_p1 = K[1:0];

assign empty_fu_227_p1 = TO_r[2:0];

assign grp_dataflow_parent_loop_1_fu_108_ap_start = grp_dataflow_parent_loop_1_fu_108_ap_start_reg;

assign grp_load_bias_scale_fu_140_ap_start = grp_load_bias_scale_fu_140_ap_start_reg;

assign grp_store_output_1_fu_125_ap_start = grp_store_output_1_fu_125_ap_start_reg;

assign input_V_address0 = grp_dataflow_parent_loop_1_fu_108_input_V_address0;

assign input_V_ce0 = grp_dataflow_parent_loop_1_fu_108_input_V_ce0;

assign m_axi_ddr_V_AWADDR = 32'd0;

assign m_axi_ddr_V_AWBURST = 2'd0;

assign m_axi_ddr_V_AWCACHE = 4'd0;

assign m_axi_ddr_V_AWID = 1'd0;

assign m_axi_ddr_V_AWLEN = 32'd0;

assign m_axi_ddr_V_AWLOCK = 2'd0;

assign m_axi_ddr_V_AWPROT = 3'd0;

assign m_axi_ddr_V_AWQOS = 4'd0;

assign m_axi_ddr_V_AWREGION = 4'd0;

assign m_axi_ddr_V_AWSIZE = 3'd0;

assign m_axi_ddr_V_AWUSER = 1'd0;

assign m_axi_ddr_V_AWVALID = 1'b0;

assign m_axi_ddr_V_BREADY = 1'b0;

assign m_axi_ddr_V_WDATA = 128'd0;

assign m_axi_ddr_V_WID = 1'd0;

assign m_axi_ddr_V_WLAST = 1'b0;

assign m_axi_ddr_V_WSTRB = 16'd0;

assign m_axi_ddr_V_WUSER = 1'd0;

assign m_axi_ddr_V_WVALID = 1'b0;

assign mul_ln189_1_fu_178_p0 = mul_ln189_1_fu_178_p00;

assign mul_ln189_1_fu_178_p00 = K;

assign mul_ln189_1_fu_178_p1 = mul_ln189_1_fu_178_p10;

assign mul_ln189_1_fu_178_p10 = mul_ln189_fu_164_p2;

assign mul_ln189_1_fu_178_p2 = (mul_ln189_1_fu_178_p0 * mul_ln189_1_fu_178_p1);

assign mul_ln189_2_fu_192_p0 = mul_ln189_2_fu_192_p00;

assign mul_ln189_2_fu_192_p00 = K;

assign mul_ln189_2_fu_192_p1 = mul_ln189_2_fu_192_p10;

assign mul_ln189_2_fu_192_p10 = mul_ln189_1_fu_178_p2;

assign mul_ln189_2_fu_192_p2 = (mul_ln189_2_fu_192_p0 * mul_ln189_2_fu_192_p1);

assign mul_ln189_fu_164_p0 = mul_ln189_fu_164_p00;

assign mul_ln189_fu_164_p00 = TO_r;

assign mul_ln189_fu_164_p1 = mul_ln189_fu_164_p10;

assign mul_ln189_fu_164_p10 = TI;

assign mul_ln189_fu_164_p2 = (mul_ln189_fu_164_p0 * mul_ln189_fu_164_p1);

assign output_V_address1 = grp_store_output_1_fu_125_output_V_address1;

assign output_V_ce1 = grp_store_output_1_fu_125_output_V_ce1;

assign output_V_d1 = grp_store_output_1_fu_125_output_V_d1;

assign output_V_we1 = grp_store_output_1_fu_125_output_V_we1;

assign shl_ln_fu_202_p3 = {{trunc_ln189_fu_198_p1}, {11'd0}};

assign trunc_ln189_fu_198_p1 = mul_ln189_2_fu_192_p2[8:0];

assign zext_ln182_fu_152_p1 = OFFSET;

endmodule //conv_layer
