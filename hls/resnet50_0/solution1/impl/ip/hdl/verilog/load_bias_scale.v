// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_bias_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bias_address0,
        bias_ce0,
        bias_we0,
        bias_d0,
        scale_address0,
        scale_ce0,
        scale_we0,
        scale_d0,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        TO_r,
        offset
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_pp0_stage0 = 35'd2;
parameter    ap_ST_fsm_pp0_stage1 = 35'd4;
parameter    ap_ST_fsm_pp0_stage2 = 35'd8;
parameter    ap_ST_fsm_pp0_stage3 = 35'd16;
parameter    ap_ST_fsm_pp0_stage4 = 35'd32;
parameter    ap_ST_fsm_pp0_stage5 = 35'd64;
parameter    ap_ST_fsm_pp0_stage6 = 35'd128;
parameter    ap_ST_fsm_pp0_stage7 = 35'd256;
parameter    ap_ST_fsm_pp0_stage8 = 35'd512;
parameter    ap_ST_fsm_pp0_stage9 = 35'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 35'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 35'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 35'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 35'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 35'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 35'd65536;
parameter    ap_ST_fsm_state27 = 35'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 35'd262144;
parameter    ap_ST_fsm_pp1_stage1 = 35'd524288;
parameter    ap_ST_fsm_pp1_stage2 = 35'd1048576;
parameter    ap_ST_fsm_pp1_stage3 = 35'd2097152;
parameter    ap_ST_fsm_pp1_stage4 = 35'd4194304;
parameter    ap_ST_fsm_pp1_stage5 = 35'd8388608;
parameter    ap_ST_fsm_pp1_stage6 = 35'd16777216;
parameter    ap_ST_fsm_pp1_stage7 = 35'd33554432;
parameter    ap_ST_fsm_pp1_stage8 = 35'd67108864;
parameter    ap_ST_fsm_pp1_stage9 = 35'd134217728;
parameter    ap_ST_fsm_pp1_stage10 = 35'd268435456;
parameter    ap_ST_fsm_pp1_stage11 = 35'd536870912;
parameter    ap_ST_fsm_pp1_stage12 = 35'd1073741824;
parameter    ap_ST_fsm_pp1_stage13 = 35'd2147483648;
parameter    ap_ST_fsm_pp1_stage14 = 35'd4294967296;
parameter    ap_ST_fsm_pp1_stage15 = 35'd8589934592;
parameter    ap_ST_fsm_state53 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] bias_address0;
output   bias_ce0;
output   bias_we0;
output  [2047:0] bias_d0;
output  [1:0] scale_address0;
output   scale_ce0;
output   scale_we0;
output  [2047:0] scale_d0;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [31:0] m_axi_ddr_V_AWADDR;
output  [0:0] m_axi_ddr_V_AWID;
output  [31:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [0:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [127:0] m_axi_ddr_V_WDATA;
output  [15:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [0:0] m_axi_ddr_V_WID;
output  [0:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [31:0] m_axi_ddr_V_ARADDR;
output  [0:0] m_axi_ddr_V_ARID;
output  [31:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [0:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [127:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [0:0] m_axi_ddr_V_RID;
input  [0:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [0:0] m_axi_ddr_V_BID;
input  [0:0] m_axi_ddr_V_BUSER;
input  [2:0] TO_r;
input  [15:0] offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bias_ce0;
reg bias_we0;
reg scale_ce0;
reg scale_we0;
reg m_axi_ddr_V_ARVALID;
reg[31:0] m_axi_ddr_V_ARADDR;
reg m_axi_ddr_V_RREADY;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ddr_V_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln65_reg_321;
reg    ddr_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln65_reg_321_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln80_reg_426;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_pp1_stage9;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_pp1_stage10;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_pp1_stage11;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_pp1_stage12;
wire    ap_CS_fsm_pp1_stage13;
wire    ap_block_pp1_stage13;
wire    ap_CS_fsm_pp1_stage14;
wire    ap_block_pp1_stage14;
wire    ap_CS_fsm_pp1_stage15;
wire    ap_block_pp1_stage15;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln80_reg_426_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
reg   [2:0] i_0_reg_132;
reg   [2:0] i_0_reg_132_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state18_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] i1_0_reg_144;
reg   [2:0] i1_0_reg_144_pp1_iter1_reg;
wire    ap_block_state28_pp1_stage0_iter0;
reg    ap_block_state44_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln65_fu_156_p2;
wire   [2:0] i_fu_161_p2;
reg   [2:0] i_reg_325;
wire   [15:0] add_ln70_fu_183_p2;
reg   [15:0] add_ln70_reg_330;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state19_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [127:0] ddr_V_addr_read_reg_341;
reg    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_state26_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_11001;
reg   [127:0] ddr_V_addr_read_128_reg_346;
reg    ap_block_state11_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg   [127:0] ddr_V_addr_read_129_reg_351;
reg    ap_block_state12_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg   [127:0] ddr_V_addr_read_130_reg_356;
reg    ap_block_state13_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg   [127:0] ddr_V_addr_read_131_reg_361;
reg    ap_block_state14_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
reg   [127:0] ddr_V_addr_read_132_reg_366;
reg    ap_block_state15_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_11001;
reg   [127:0] ddr_V_addr_read_133_reg_371;
reg    ap_block_state16_pp0_stage14_iter0;
reg    ap_block_pp0_stage14_11001;
reg   [127:0] ddr_V_addr_read_134_reg_376;
reg    ap_block_state17_pp0_stage15_iter0;
reg    ap_block_pp0_stage15_11001;
reg   [127:0] ddr_V_addr_read_135_reg_381;
reg   [127:0] ddr_V_addr_read_136_reg_386;
reg   [127:0] ddr_V_addr_read_137_reg_391;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state20_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
reg   [127:0] ddr_V_addr_read_138_reg_396;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state21_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [127:0] ddr_V_addr_read_139_reg_401;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state22_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg   [127:0] ddr_V_addr_read_140_reg_406;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_state23_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg   [127:0] ddr_V_addr_read_141_reg_411;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_state24_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg   [127:0] ddr_V_addr_read_142_reg_416;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state25_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
wire   [15:0] add_ln85_fu_235_p2;
reg   [15:0] add_ln85_reg_421;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln80_fu_240_p2;
wire   [2:0] i_1_fu_245_p2;
reg   [2:0] i_1_reg_430;
wire   [15:0] add_ln85_1_fu_267_p2;
reg   [15:0] add_ln85_1_reg_435;
wire    ap_block_state29_pp1_stage1_iter0;
reg    ap_block_state29_io;
reg    ap_block_state45_pp1_stage1_iter1;
reg    ap_block_pp1_stage1_11001;
reg   [127:0] ddr_V_addr_1_read_reg_446;
reg    ap_block_state36_pp1_stage8_iter0;
wire    ap_block_state52_pp1_stage8_iter1;
reg    ap_block_pp1_stage8_11001;
reg   [127:0] ddr_V_addr_1_read_1_reg_451;
reg    ap_block_state37_pp1_stage9_iter0;
reg    ap_block_pp1_stage9_11001;
reg   [127:0] ddr_V_addr_1_read_2_reg_456;
reg    ap_block_state38_pp1_stage10_iter0;
reg    ap_block_pp1_stage10_11001;
reg   [127:0] ddr_V_addr_1_read_3_reg_461;
reg    ap_block_state39_pp1_stage11_iter0;
reg    ap_block_pp1_stage11_11001;
reg   [127:0] ddr_V_addr_1_read_4_reg_466;
reg    ap_block_state40_pp1_stage12_iter0;
reg    ap_block_pp1_stage12_11001;
reg   [127:0] ddr_V_addr_1_read_5_reg_471;
reg    ap_block_state41_pp1_stage13_iter0;
reg    ap_block_pp1_stage13_11001;
reg   [127:0] ddr_V_addr_1_read_6_reg_476;
reg    ap_block_state42_pp1_stage14_iter0;
reg    ap_block_pp1_stage14_11001;
reg   [127:0] ddr_V_addr_1_read_7_reg_481;
reg    ap_block_state43_pp1_stage15_iter0;
reg    ap_block_pp1_stage15_11001;
reg   [127:0] ddr_V_addr_1_read_8_reg_486;
reg   [127:0] ddr_V_addr_1_read_9_reg_491;
reg   [127:0] ddr_V_addr_1_read_10_reg_496;
wire    ap_block_state30_pp1_stage2_iter0;
reg    ap_block_state46_pp1_stage2_iter1;
reg    ap_block_pp1_stage2_11001;
reg   [127:0] ddr_V_addr_1_read_11_reg_501;
wire    ap_block_state31_pp1_stage3_iter0;
reg    ap_block_state47_pp1_stage3_iter1;
reg    ap_block_pp1_stage3_11001;
reg   [127:0] ddr_V_addr_1_read_12_reg_506;
wire    ap_block_state32_pp1_stage4_iter0;
reg    ap_block_state48_pp1_stage4_iter1;
reg    ap_block_pp1_stage4_11001;
reg   [127:0] ddr_V_addr_1_read_13_reg_511;
wire    ap_block_state33_pp1_stage5_iter0;
reg    ap_block_state49_pp1_stage5_iter1;
reg    ap_block_pp1_stage5_11001;
reg   [127:0] ddr_V_addr_1_read_14_reg_516;
wire    ap_block_state34_pp1_stage6_iter0;
reg    ap_block_state50_pp1_stage6_iter1;
reg    ap_block_pp1_stage6_11001;
reg   [127:0] ddr_V_addr_1_read_15_reg_521;
wire    ap_block_state35_pp1_stage7_iter0;
reg    ap_block_state51_pp1_stage7_iter1;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage15_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state28;
reg    ap_block_pp1_stage15_subdone;
reg    ap_block_pp1_stage8_subdone;
reg   [2:0] ap_phi_mux_i_0_phi_fu_136_p4;
reg   [2:0] ap_phi_mux_i1_0_phi_fu_148_p4;
wire   [63:0] zext_ln75_fu_198_p1;
wire   [63:0] zext_ln90_fu_282_p1;
wire   [63:0] zext_ln70_fu_188_p1;
wire   [63:0] zext_ln85_1_fu_272_p1;
wire   [1:0] trunc_ln70_fu_167_p1;
wire   [5:0] shl_ln5_fu_171_p3;
wire   [15:0] zext_ln75_1_fu_179_p1;
wire   [6:0] shl_ln_fu_224_p3;
wire   [15:0] zext_ln85_fu_231_p1;
wire   [1:0] trunc_ln85_fu_251_p1;
wire   [5:0] shl_ln85_1_fu_255_p3;
wire   [15:0] zext_ln90_1_fu_263_p1;
wire    ap_CS_fsm_state53;
reg   [34:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage9_subdone;
reg    ap_block_pp1_stage10_subdone;
reg    ap_block_pp1_stage11_subdone;
reg    ap_block_pp1_stage12_subdone;
reg    ap_block_pp1_stage13_subdone;
reg    ap_block_pp1_stage14_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage15_subdone) & (1'b1 == ap_CS_fsm_pp1_stage15)) | ((1'b0 == ap_block_pp1_stage8_subdone) & (1'b1 == ap_CS_fsm_pp1_stage8)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i1_0_reg_144 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_reg_426 == 1'd0))) begin
        i1_0_reg_144 <= i_1_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_321 == 1'd0))) begin
        i_0_reg_132 <= i_reg_325;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_132 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_156_p2 == 1'd0))) begin
        add_ln70_reg_330 <= add_ln70_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_fu_240_p2 == 1'd0))) begin
        add_ln85_1_reg_435 <= add_ln85_1_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln85_reg_421 <= add_ln85_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_10_reg_496 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_11_reg_501 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_12_reg_506 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_13_reg_511 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_14_reg_516 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_15_reg_521 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_1_reg_451 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_2_reg_456 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_3_reg_461 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_4_reg_466 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage13_11001) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_5_reg_471 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_6_reg_476 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage15_11001) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_7_reg_481 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_8_reg_486 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        ddr_V_addr_1_read_9_reg_491 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0))) begin
        ddr_V_addr_1_read_reg_446 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_128_reg_346 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_129_reg_351 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_130_reg_356 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_131_reg_361 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_132_reg_366 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_133_reg_371 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_134_reg_376 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_135_reg_381 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_136_reg_386 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_137_reg_391 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_138_reg_396 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_139_reg_401 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_140_reg_406 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_141_reg_411 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        ddr_V_addr_read_142_reg_416 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0))) begin
        ddr_V_addr_read_reg_341 <= m_axi_ddr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_0_reg_144_pp1_iter1_reg <= i1_0_reg_144;
        icmp_ln80_reg_426 <= icmp_ln80_fu_240_p2;
        icmp_ln80_reg_426_pp1_iter1_reg <= icmp_ln80_reg_426;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_132_pp0_iter1_reg <= i_0_reg_132;
        icmp_ln65_reg_321 <= icmp_ln65_fu_156_p2;
        icmp_ln65_reg_321_pp0_iter1_reg <= icmp_ln65_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_1_reg_430 <= i_1_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_325 <= i_fu_161_p2;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_156_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln80_fu_240_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_reg_426 == 1'd0))) begin
        ap_phi_mux_i1_0_phi_fu_148_p4 = i_1_reg_430;
    end else begin
        ap_phi_mux_i1_0_phi_fu_148_p4 = i1_0_reg_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_321 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_136_p4 = i_reg_325;
    end else begin
        ap_phi_mux_i_0_phi_fu_136_p4 = i_0_reg_132;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0))) begin
        bias_we0 = 1'b1;
    end else begin
        bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln65_reg_321 == 1'd0)))) begin
        ddr_V_blk_n_AR = m_axi_ddr_V_ARREADY;
    end else begin
        ddr_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage15) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln65_reg_321 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)))) begin
        ddr_V_blk_n_R = m_axi_ddr_V_RVALID;
    end else begin
        ddr_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426 == 1'd0))) begin
        m_axi_ddr_V_ARADDR = zext_ln85_1_fu_272_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln65_reg_321 == 1'd0))) begin
        m_axi_ddr_V_ARADDR = zext_ln70_fu_188_p1;
    end else begin
        m_axi_ddr_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln65_reg_321 == 1'd0)))) begin
        m_axi_ddr_V_ARVALID = 1'b1;
    end else begin
        m_axi_ddr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage15_11001) & (1'b1 == ap_CS_fsm_pp1_stage15) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage13_11001) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12_11001) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11_11001) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10_11001) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9_11001) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)))) begin
        m_axi_ddr_V_RREADY = 1'b1;
    end else begin
        m_axi_ddr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage8_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8))) begin
        scale_ce0 = 1'b1;
    end else begin
        scale_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage8_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0))) begin
        scale_we0 = 1'b1;
    end else begin
        scale_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_fu_156_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_fu_156_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((~((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln80_fu_240_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln80_fu_240_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((~((1'b0 == ap_block_pp1_stage8_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8)) & (1'b0 == ap_block_pp1_stage8_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else if (((1'b0 == ap_block_pp1_stage8_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_pp1_stage13 : begin
            if ((1'b0 == ap_block_pp1_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end
        end
        ap_ST_fsm_pp1_stage14 : begin
            if ((1'b0 == ap_block_pp1_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end
        end
        ap_ST_fsm_pp1_stage15 : begin
            if ((1'b0 == ap_block_pp1_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_fu_183_p2 = (offset + zext_ln75_1_fu_179_p1);

assign add_ln85_1_fu_267_p2 = (zext_ln90_1_fu_263_p1 + add_ln85_reg_421);

assign add_ln85_fu_235_p2 = (offset + zext_ln85_fu_231_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp1_stage13 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp1_stage14 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp1_stage15 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd34];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage10_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage10_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage11_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage11_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage12_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage12_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage13_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage13_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage14_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage14_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage15_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage15_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_pp1_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage9_11001 = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage9_subdone = ((m_axi_ddr_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage8_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage9_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage10_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage11_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage12_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage13_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage14_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage15_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp0_stage1_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp0_stage2_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state21_pp0_stage3_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp0_stage4_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp0_stage5_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp0_stage6_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state25_pp0_stage7_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln65_reg_321_pp0_iter1_reg == 1'd0));
end

assign ap_block_state26_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((m_axi_ddr_V_ARREADY == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

assign ap_block_state29_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_pp1_stage8_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state37_pp1_stage9_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state38_pp1_stage10_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state39_pp1_stage11_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_ddr_V_ARREADY == 1'b0) & (icmp_ln65_reg_321 == 1'd0));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp1_stage12_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state41_pp1_stage13_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state42_pp1_stage14_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state43_pp1_stage15_iter0 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state44_pp1_stage0_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426 == 1'd0));
end

always @ (*) begin
    ap_block_state45_pp1_stage1_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state46_pp1_stage2_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state47_pp1_stage3_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state48_pp1_stage4_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state49_pp1_stage5_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_pp1_stage6_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state51_pp1_stage7_iter1 = ((m_axi_ddr_V_RVALID == 1'b0) & (icmp_ln80_reg_426_pp1_iter1_reg == 1'd0));
end

assign ap_block_state52_pp1_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bias_address0 = zext_ln75_fu_198_p1;

assign bias_d0 = {{{{{{{{{{{{{{{{ddr_V_addr_read_142_reg_416}, {ddr_V_addr_read_141_reg_411}}, {ddr_V_addr_read_140_reg_406}}, {ddr_V_addr_read_139_reg_401}}, {ddr_V_addr_read_138_reg_396}}, {ddr_V_addr_read_137_reg_391}}, {ddr_V_addr_read_136_reg_386}}, {ddr_V_addr_read_135_reg_381}}, {ddr_V_addr_read_134_reg_376}}, {ddr_V_addr_read_133_reg_371}}, {ddr_V_addr_read_132_reg_366}}, {ddr_V_addr_read_131_reg_361}}, {ddr_V_addr_read_130_reg_356}}, {ddr_V_addr_read_129_reg_351}}, {ddr_V_addr_read_128_reg_346}}, {ddr_V_addr_read_reg_341}};

assign i_1_fu_245_p2 = (ap_phi_mux_i1_0_phi_fu_148_p4 + 3'd1);

assign i_fu_161_p2 = (ap_phi_mux_i_0_phi_fu_136_p4 + 3'd1);

assign icmp_ln65_fu_156_p2 = ((ap_phi_mux_i_0_phi_fu_136_p4 == TO_r) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_240_p2 = ((ap_phi_mux_i1_0_phi_fu_148_p4 == TO_r) ? 1'b1 : 1'b0);

assign m_axi_ddr_V_ARBURST = 2'd0;

assign m_axi_ddr_V_ARCACHE = 4'd0;

assign m_axi_ddr_V_ARID = 1'd0;

assign m_axi_ddr_V_ARLEN = 32'd16;

assign m_axi_ddr_V_ARLOCK = 2'd0;

assign m_axi_ddr_V_ARPROT = 3'd0;

assign m_axi_ddr_V_ARQOS = 4'd0;

assign m_axi_ddr_V_ARREGION = 4'd0;

assign m_axi_ddr_V_ARSIZE = 3'd0;

assign m_axi_ddr_V_ARUSER = 1'd0;

assign m_axi_ddr_V_AWADDR = 32'd0;

assign m_axi_ddr_V_AWBURST = 2'd0;

assign m_axi_ddr_V_AWCACHE = 4'd0;

assign m_axi_ddr_V_AWID = 1'd0;

assign m_axi_ddr_V_AWLEN = 32'd0;

assign m_axi_ddr_V_AWLOCK = 2'd0;

assign m_axi_ddr_V_AWPROT = 3'd0;

assign m_axi_ddr_V_AWQOS = 4'd0;

assign m_axi_ddr_V_AWREGION = 4'd0;

assign m_axi_ddr_V_AWSIZE = 3'd0;

assign m_axi_ddr_V_AWUSER = 1'd0;

assign m_axi_ddr_V_AWVALID = 1'b0;

assign m_axi_ddr_V_BREADY = 1'b0;

assign m_axi_ddr_V_WDATA = 128'd0;

assign m_axi_ddr_V_WID = 1'd0;

assign m_axi_ddr_V_WLAST = 1'b0;

assign m_axi_ddr_V_WSTRB = 16'd0;

assign m_axi_ddr_V_WUSER = 1'd0;

assign m_axi_ddr_V_WVALID = 1'b0;

assign scale_address0 = zext_ln90_fu_282_p1;

assign scale_d0 = {{{{{{{{{{{{{{{{ddr_V_addr_1_read_15_reg_521}, {ddr_V_addr_1_read_14_reg_516}}, {ddr_V_addr_1_read_13_reg_511}}, {ddr_V_addr_1_read_12_reg_506}}, {ddr_V_addr_1_read_11_reg_501}}, {ddr_V_addr_1_read_10_reg_496}}, {ddr_V_addr_1_read_9_reg_491}}, {ddr_V_addr_1_read_8_reg_486}}, {ddr_V_addr_1_read_7_reg_481}}, {ddr_V_addr_1_read_6_reg_476}}, {ddr_V_addr_1_read_5_reg_471}}, {ddr_V_addr_1_read_4_reg_466}}, {ddr_V_addr_1_read_3_reg_461}}, {ddr_V_addr_1_read_2_reg_456}}, {ddr_V_addr_1_read_1_reg_451}}, {ddr_V_addr_1_read_reg_446}};

assign shl_ln5_fu_171_p3 = {{trunc_ln70_fu_167_p1}, {4'd0}};

assign shl_ln85_1_fu_255_p3 = {{trunc_ln85_fu_251_p1}, {4'd0}};

assign shl_ln_fu_224_p3 = {{TO_r}, {4'd0}};

assign trunc_ln70_fu_167_p1 = ap_phi_mux_i_0_phi_fu_136_p4[1:0];

assign trunc_ln85_fu_251_p1 = ap_phi_mux_i1_0_phi_fu_148_p4[1:0];

assign zext_ln70_fu_188_p1 = add_ln70_reg_330;

assign zext_ln75_1_fu_179_p1 = shl_ln5_fu_171_p3;

assign zext_ln75_fu_198_p1 = i_0_reg_132_pp0_iter1_reg;

assign zext_ln85_1_fu_272_p1 = add_ln85_1_reg_435;

assign zext_ln85_fu_231_p1 = shl_ln_fu_224_p3;

assign zext_ln90_1_fu_263_p1 = shl_ln85_1_fu_255_p3;

assign zext_ln90_fu_282_p1 = i1_0_reg_144_pp1_iter1_reg;

endmodule //load_bias_scale
