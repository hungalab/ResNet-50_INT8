-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_parent_loop_1 is
port (
    mul_ln189_2 : IN STD_LOGIC_VECTOR (16 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
    input_V_we0 : OUT STD_LOGIC;
    input_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
    input_V_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
    input_V_we1 : OUT STD_LOGIC;
    m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_V_AWREADY : IN STD_LOGIC;
    m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WVALID : OUT STD_LOGIC;
    m_axi_ddr_V_WREADY : IN STD_LOGIC;
    m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_ddr_V_WLAST : OUT STD_LOGIC;
    m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_V_ARREADY : IN STD_LOGIC;
    m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RVALID : IN STD_LOGIC;
    m_axi_ddr_V_RREADY : OUT STD_LOGIC;
    m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ddr_V_RLAST : IN STD_LOGIC;
    m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BVALID : IN STD_LOGIC;
    m_axi_ddr_V_BREADY : OUT STD_LOGIC;
    m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    OFFSET : IN STD_LOGIC_VECTOR (17 downto 0);
    TO_r : IN STD_LOGIC_VECTOR (2 downto 0);
    TI : IN STD_LOGIC_VECTOR (3 downto 0);
    P : IN STD_LOGIC_VECTOR (0 downto 0);
    K : IN STD_LOGIC_VECTOR (1 downto 0);
    outbuf_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    outbuf_V_ce0 : OUT STD_LOGIC;
    outbuf_V_d0 : OUT STD_LOGIC_VECTOR (1535 downto 0);
    outbuf_V_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
    outbuf_V_we0 : OUT STD_LOGIC;
    outbuf_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    outbuf_V_ce1 : OUT STD_LOGIC;
    outbuf_V_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
    outbuf_V_q1 : IN STD_LOGIC_VECTOR (1535 downto 0);
    outbuf_V_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    OFFSET_ap_vld : IN STD_LOGIC;
    TO_r_ap_vld : IN STD_LOGIC;
    TI_ap_vld : IN STD_LOGIC;
    P_ap_vld : IN STD_LOGIC;
    K_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_parent_loop_1 is 
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv1536_lc_1 : STD_LOGIC_VECTOR (1535 downto
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv288_lc_2 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1536_lc_2 : STD_LOGIC_VECTOR (1535 downto
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WVALID : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WLAST : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_RREADY : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_m_axi_ddr_V_BREADY : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_l_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dataflow_in_loop_Con_U0_input_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dataflow_in_loop_Con_U0_input_V_ce0 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_input_V_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal dataflow_in_loop_Con_U0_input_V_we0 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_input_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal dataflow_in_loop_Con_U0_input_V_ce1 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_input_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal dataflow_in_loop_Con_U0_input_V_we1 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_outbuf_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dataflow_in_loop_Con_U0_outbuf_V_ce0 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_outbuf_V_d0 : STD_LOGIC_VECTOR (1535 downto 0);
    signal dataflow_in_loop_Con_U0_outbuf_V_we0 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_outbuf_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal dataflow_in_loop_Con_U0_outbuf_V_ce1 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_outbuf_V_d1 : STD_LOGIC_VECTOR (1535 downto 0);
    signal dataflow_in_loop_Con_U0_outbuf_V_we1 : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal dataflow_in_loop_Con_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_Con_U0_start_write : STD_LOGIC;

    component dataflow_in_loop_Con IS
    port (
        m_axi_ddr_V_AWVALID : OUT STD_LOGIC;
        m_axi_ddr_V_AWREADY : IN STD_LOGIC;
        m_axi_ddr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WVALID : OUT STD_LOGIC;
        m_axi_ddr_V_WREADY : IN STD_LOGIC;
        m_axi_ddr_V_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr_V_WLAST : OUT STD_LOGIC;
        m_axi_ddr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARVALID : OUT STD_LOGIC;
        m_axi_ddr_V_ARREADY : IN STD_LOGIC;
        m_axi_ddr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RVALID : IN STD_LOGIC;
        m_axi_ddr_V_RREADY : OUT STD_LOGIC;
        m_axi_ddr_V_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr_V_RLAST : IN STD_LOGIC;
        m_axi_ddr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BVALID : IN STD_LOGIC;
        m_axi_ddr_V_BREADY : OUT STD_LOGIC;
        m_axi_ddr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        l_0 : IN STD_LOGIC_VECTOR (8 downto 0);
        OFFSET : IN STD_LOGIC_VECTOR (17 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        input_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        input_V_we0 : OUT STD_LOGIC;
        input_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        input_V_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
        input_V_we1 : OUT STD_LOGIC;
        TO_r : IN STD_LOGIC_VECTOR (2 downto 0);
        TI : IN STD_LOGIC_VECTOR (3 downto 0);
        P : IN STD_LOGIC_VECTOR (0 downto 0);
        K : IN STD_LOGIC_VECTOR (1 downto 0);
        outbuf_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_ce0 : OUT STD_LOGIC;
        outbuf_V_d0 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_q0 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_we0 : OUT STD_LOGIC;
        outbuf_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outbuf_V_ce1 : OUT STD_LOGIC;
        outbuf_V_d1 : OUT STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_q1 : IN STD_LOGIC_VECTOR (1535 downto 0);
        outbuf_V_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        l_0_ap_vld : IN STD_LOGIC;
        OFFSET_ap_vld : IN STD_LOGIC;
        TO_r_ap_vld : IN STD_LOGIC;
        TI_ap_vld : IN STD_LOGIC;
        P_ap_vld : IN STD_LOGIC;
        K_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_Con_U0 : component dataflow_in_loop_Con
    port map (
        m_axi_ddr_V_AWVALID => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY => ap_const_logic_0,
        m_axi_ddr_V_AWADDR => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER => dataflow_in_loop_Con_U0_m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID => dataflow_in_loop_Con_U0_m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY => ap_const_logic_0,
        m_axi_ddr_V_WDATA => dataflow_in_loop_Con_U0_m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB => dataflow_in_loop_Con_U0_m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST => dataflow_in_loop_Con_U0_m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID => dataflow_in_loop_Con_U0_m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER => dataflow_in_loop_Con_U0_m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY => m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER => dataflow_in_loop_Con_U0_m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID => m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY => dataflow_in_loop_Con_U0_m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA => m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST => m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID => m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER => m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP => m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID => ap_const_logic_0,
        m_axi_ddr_V_BREADY => dataflow_in_loop_Con_U0_m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP => ap_const_lv2_0,
        m_axi_ddr_V_BID => ap_const_lv1_0,
        m_axi_ddr_V_BUSER => ap_const_lv1_0,
        l_0 => dataflow_in_loop_Con_U0_l_0,
        OFFSET => OFFSET,
        input_V_address0 => dataflow_in_loop_Con_U0_input_V_address0,
        input_V_ce0 => dataflow_in_loop_Con_U0_input_V_ce0,
        input_V_d0 => dataflow_in_loop_Con_U0_input_V_d0,
        input_V_q0 => input_V_q0,
        input_V_we0 => dataflow_in_loop_Con_U0_input_V_we0,
        input_V_address1 => dataflow_in_loop_Con_U0_input_V_address1,
        input_V_ce1 => dataflow_in_loop_Con_U0_input_V_ce1,
        input_V_d1 => dataflow_in_loop_Con_U0_input_V_d1,
        input_V_q1 => ap_const_lv288_lc_1,
        input_V_we1 => dataflow_in_loop_Con_U0_input_V_we1,
        TO_r => TO_r,
        TI => TI,
        P => P,
        K => K,
        outbuf_V_address0 => dataflow_in_loop_Con_U0_outbuf_V_address0,
        outbuf_V_ce0 => dataflow_in_loop_Con_U0_outbuf_V_ce0,
        outbuf_V_d0 => dataflow_in_loop_Con_U0_outbuf_V_d0,
        outbuf_V_q0 => outbuf_V_q0,
        outbuf_V_we0 => dataflow_in_loop_Con_U0_outbuf_V_we0,
        outbuf_V_address1 => dataflow_in_loop_Con_U0_outbuf_V_address1,
        outbuf_V_ce1 => dataflow_in_loop_Con_U0_outbuf_V_ce1,
        outbuf_V_d1 => dataflow_in_loop_Con_U0_outbuf_V_d1,
        outbuf_V_q1 => ap_const_lv1536_lc_1,
        outbuf_V_we1 => dataflow_in_loop_Con_U0_outbuf_V_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        l_0_ap_vld => ap_const_logic_0,
        OFFSET_ap_vld => OFFSET_ap_vld,
        TO_r_ap_vld => TO_r_ap_vld,
        TI_ap_vld => TI_ap_vld,
        P_ap_vld => P_ap_vld,
        K_ap_vld => K_ap_vld,
        ap_start => dataflow_in_loop_Con_U0_ap_start,
        ap_done => dataflow_in_loop_Con_U0_ap_done,
        ap_ready => dataflow_in_loop_Con_U0_ap_ready,
        ap_idle => dataflow_in_loop_Con_U0_ap_idle,
        ap_continue => dataflow_in_loop_Con_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv17_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_Con_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv17_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_Con_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv17_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv17_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_Con_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_Con_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv17_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_Con_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_Con_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv17_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_Con_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_Con_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_Con_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((ap_start = ap_const_logic_0) and (loop_dataflow_output_count = ap_const_lv17_0) and (dataflow_in_loop_Con_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_Con_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_Con_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_in_loop_Con_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_Con_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(mul_ln189_2) - unsigned(ap_const_lv17_1));

    dataflow_in_loop_Con_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_in_loop_Con_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_in_loop_Con_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_Con_U0_ap_start <= ap_start;
    dataflow_in_loop_Con_U0_l_0 <= loop_dataflow_input_count(9 - 1 downto 0);
    dataflow_in_loop_Con_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_Con_U0_start_write <= ap_const_logic_0;
    input_V_address0 <= dataflow_in_loop_Con_U0_input_V_address0;
    input_V_address1 <= ap_const_lv15_0;
    input_V_ce0 <= dataflow_in_loop_Con_U0_input_V_ce0;
    input_V_ce1 <= ap_const_logic_0;
    input_V_d0 <= ap_const_lv288_lc_1;
    input_V_d1 <= ap_const_lv288_lc_1;
    input_V_we0 <= ap_const_logic_0;
    input_V_we1 <= ap_const_logic_0;
    m_axi_ddr_V_ARADDR <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARADDR;
    m_axi_ddr_V_ARBURST <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARBURST;
    m_axi_ddr_V_ARCACHE <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARCACHE;
    m_axi_ddr_V_ARID <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARID;
    m_axi_ddr_V_ARLEN <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLEN;
    m_axi_ddr_V_ARLOCK <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARLOCK;
    m_axi_ddr_V_ARPROT <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARPROT;
    m_axi_ddr_V_ARQOS <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARQOS;
    m_axi_ddr_V_ARREGION <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARREGION;
    m_axi_ddr_V_ARSIZE <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARSIZE;
    m_axi_ddr_V_ARUSER <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARUSER;
    m_axi_ddr_V_ARVALID <= dataflow_in_loop_Con_U0_m_axi_ddr_V_ARVALID;
    m_axi_ddr_V_AWADDR <= ap_const_lv32_0;
    m_axi_ddr_V_AWBURST <= ap_const_lv2_0;
    m_axi_ddr_V_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr_V_AWID <= ap_const_lv1_0;
    m_axi_ddr_V_AWLEN <= ap_const_lv32_0;
    m_axi_ddr_V_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr_V_AWPROT <= ap_const_lv3_0;
    m_axi_ddr_V_AWQOS <= ap_const_lv4_0;
    m_axi_ddr_V_AWREGION <= ap_const_lv4_0;
    m_axi_ddr_V_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr_V_AWUSER <= ap_const_lv1_0;
    m_axi_ddr_V_AWVALID <= ap_const_logic_0;
    m_axi_ddr_V_BREADY <= ap_const_logic_0;
    m_axi_ddr_V_RREADY <= dataflow_in_loop_Con_U0_m_axi_ddr_V_RREADY;
    m_axi_ddr_V_WDATA <= ap_const_lv128_lc_1;
    m_axi_ddr_V_WID <= ap_const_lv1_0;
    m_axi_ddr_V_WLAST <= ap_const_logic_0;
    m_axi_ddr_V_WSTRB <= ap_const_lv16_0;
    m_axi_ddr_V_WUSER <= ap_const_lv1_0;
    m_axi_ddr_V_WVALID <= ap_const_logic_0;
    outbuf_V_address0 <= dataflow_in_loop_Con_U0_outbuf_V_address0;
    outbuf_V_address1 <= dataflow_in_loop_Con_U0_outbuf_V_address1;
    outbuf_V_ce0 <= dataflow_in_loop_Con_U0_outbuf_V_ce0;
    outbuf_V_ce1 <= dataflow_in_loop_Con_U0_outbuf_V_ce1;
    outbuf_V_d0 <= ap_const_lv1536_lc_1;
    outbuf_V_d1 <= dataflow_in_loop_Con_U0_outbuf_V_d1;
    outbuf_V_we0 <= ap_const_logic_0;
    outbuf_V_we1 <= dataflow_in_loop_Con_U0_outbuf_V_we1;
end behav;
