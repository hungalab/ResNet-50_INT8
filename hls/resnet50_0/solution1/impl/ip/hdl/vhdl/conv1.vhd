-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
port (
    input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_d0 : OUT STD_LOGIC_VECTOR (215 downto 0);
    input_V_q0 : IN STD_LOGIC_VECTOR (215 downto 0);
    input_V_we0 : OUT STD_LOGIC;
    input_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_d1 : OUT STD_LOGIC_VECTOR (215 downto 0);
    input_V_q1 : IN STD_LOGIC_VECTOR (215 downto 0);
    input_V_we1 : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    output_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
    output_V_we0 : OUT STD_LOGIC;
    output_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
    output_V_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
    output_V_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of conv1 is 
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv216_lc_1 : STD_LOGIC_VECTOR (215 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv216_lc_2 : STD_LOGIC_VECTOR (215 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv288_lc_2 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal dataflow_parent_loop_2_U0_input_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dataflow_parent_loop_2_U0_input_V_ce0 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_input_V_d0 : STD_LOGIC_VECTOR (215 downto 0);
    signal dataflow_parent_loop_2_U0_input_V_we0 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_input_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal dataflow_parent_loop_2_U0_input_V_ce1 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_input_V_d1 : STD_LOGIC_VECTOR (215 downto 0);
    signal dataflow_parent_loop_2_U0_input_V_we1 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_output_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dataflow_parent_loop_2_U0_output_V_ce0 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_output_V_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal dataflow_parent_loop_2_U0_output_V_we0 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_output_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal dataflow_parent_loop_2_U0_output_V_ce1 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_output_V_d1 : STD_LOGIC_VECTOR (287 downto 0);
    signal dataflow_parent_loop_2_U0_output_V_we1 : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_ap_start : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_ap_done : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_ap_ready : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_ap_idle : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_ap_continue : STD_LOGIC;
    signal ap_sync_reg_dataflow_parent_loop_2_U0_ap_start : STD_LOGIC := '0';
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dataflow_parent_loop_2_U0_start_full_n : STD_LOGIC;
    signal dataflow_parent_loop_2_U0_start_write : STD_LOGIC;

    component dataflow_parent_loop_2 IS
    port (
        input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_d0 : OUT STD_LOGIC_VECTOR (215 downto 0);
        input_V_q0 : IN STD_LOGIC_VECTOR (215 downto 0);
        input_V_we0 : OUT STD_LOGIC;
        input_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_d1 : OUT STD_LOGIC_VECTOR (215 downto 0);
        input_V_q1 : IN STD_LOGIC_VECTOR (215 downto 0);
        input_V_we1 : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        output_V_we0 : OUT STD_LOGIC;
        output_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
        output_V_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
        output_V_we1 : OUT STD_LOGIC;
        row_assign : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        row_assign_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_parent_loop_2_U0 : component dataflow_parent_loop_2
    port map (
        input_V_address0 => dataflow_parent_loop_2_U0_input_V_address0,
        input_V_ce0 => dataflow_parent_loop_2_U0_input_V_ce0,
        input_V_d0 => dataflow_parent_loop_2_U0_input_V_d0,
        input_V_q0 => input_V_q0,
        input_V_we0 => dataflow_parent_loop_2_U0_input_V_we0,
        input_V_address1 => dataflow_parent_loop_2_U0_input_V_address1,
        input_V_ce1 => dataflow_parent_loop_2_U0_input_V_ce1,
        input_V_d1 => dataflow_parent_loop_2_U0_input_V_d1,
        input_V_q1 => ap_const_lv216_lc_1,
        input_V_we1 => dataflow_parent_loop_2_U0_input_V_we1,
        output_V_address0 => dataflow_parent_loop_2_U0_output_V_address0,
        output_V_ce0 => dataflow_parent_loop_2_U0_output_V_ce0,
        output_V_d0 => dataflow_parent_loop_2_U0_output_V_d0,
        output_V_q0 => ap_const_lv288_lc_1,
        output_V_we0 => dataflow_parent_loop_2_U0_output_V_we0,
        output_V_address1 => dataflow_parent_loop_2_U0_output_V_address1,
        output_V_ce1 => dataflow_parent_loop_2_U0_output_V_ce1,
        output_V_d1 => dataflow_parent_loop_2_U0_output_V_d1,
        output_V_q1 => ap_const_lv288_lc_1,
        output_V_we1 => dataflow_parent_loop_2_U0_output_V_we1,
        row_assign => loop_dataflow_input_count,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        row_assign_ap_vld => ap_const_logic_0,
        ap_start => dataflow_parent_loop_2_U0_ap_start,
        ap_done => dataflow_parent_loop_2_U0_ap_done,
        ap_ready => dataflow_parent_loop_2_U0_ap_ready,
        ap_idle => dataflow_parent_loop_2_U0_ap_idle,
        ap_continue => dataflow_parent_loop_2_U0_ap_continue);





    ap_sync_reg_dataflow_parent_loop_2_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_parent_loop_2_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_parent_loop_2_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv7_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_2_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv7_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_2_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv7_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv7_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_parent_loop_2_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_2_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv7_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_2_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_2_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv7_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_parent_loop_2_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_2_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_parent_loop_2_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv7_0) and (dataflow_parent_loop_2_U0_ap_idle = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_parent_loop_2_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_2_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_parent_loop_2_U0_ap_done;
    ap_sync_ready <= ap_sync_done;
    bound_minus_1 <= std_logic_vector(unsigned(ap_const_lv7_70) - unsigned(ap_const_lv7_1));

    dataflow_parent_loop_2_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_parent_loop_2_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_parent_loop_2_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_parent_loop_2_U0_ap_start <= ap_start;
    dataflow_parent_loop_2_U0_start_full_n <= ap_const_logic_1;
    dataflow_parent_loop_2_U0_start_write <= ap_const_logic_0;
    input_V_address0 <= dataflow_parent_loop_2_U0_input_V_address0;
    input_V_address1 <= ap_const_lv13_0;
    input_V_ce0 <= dataflow_parent_loop_2_U0_input_V_ce0;
    input_V_ce1 <= ap_const_logic_0;
    input_V_d0 <= ap_const_lv216_lc_1;
    input_V_d1 <= ap_const_lv216_lc_1;
    input_V_we0 <= ap_const_logic_0;
    input_V_we1 <= ap_const_logic_0;
    output_V_address0 <= ap_const_lv15_0;
    output_V_address1 <= dataflow_parent_loop_2_U0_output_V_address1;
    output_V_ce0 <= ap_const_logic_0;
    output_V_ce1 <= dataflow_parent_loop_2_U0_output_V_ce1;
    output_V_d0 <= ap_const_lv288_lc_1;
    output_V_d1 <= dataflow_parent_loop_2_U0_output_V_d1;
    output_V_we0 <= ap_const_logic_0;
    output_V_we1 <= dataflow_parent_loop_2_U0_output_V_we1;
end behav;
