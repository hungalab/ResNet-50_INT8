// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="resnet50_0,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1134,HLS_SYN_DSP=1731,HLS_SYN_FF=191066,HLS_SYN_LUT=365932,HLS_VERSION=2019_1_3}" *)

module resnet50_0 (
        ap_clk,
        ap_rst_n,
        input_V_TDATA,
        input_V_TVALID,
        input_V_TREADY,
        sw0out_V_TDATA,
        sw0out_V_TVALID,
        sw0out_V_TREADY,
        startt_V_TDATA,
        startt_V_TVALID,
        startt_V_TREADY,
        stopt_V_TDATA,
        stopt_V_TVALID,
        stopt_V_TREADY,
        m_axi_ddr_V_AWVALID,
        m_axi_ddr_V_AWREADY,
        m_axi_ddr_V_AWADDR,
        m_axi_ddr_V_AWID,
        m_axi_ddr_V_AWLEN,
        m_axi_ddr_V_AWSIZE,
        m_axi_ddr_V_AWBURST,
        m_axi_ddr_V_AWLOCK,
        m_axi_ddr_V_AWCACHE,
        m_axi_ddr_V_AWPROT,
        m_axi_ddr_V_AWQOS,
        m_axi_ddr_V_AWREGION,
        m_axi_ddr_V_AWUSER,
        m_axi_ddr_V_WVALID,
        m_axi_ddr_V_WREADY,
        m_axi_ddr_V_WDATA,
        m_axi_ddr_V_WSTRB,
        m_axi_ddr_V_WLAST,
        m_axi_ddr_V_WID,
        m_axi_ddr_V_WUSER,
        m_axi_ddr_V_ARVALID,
        m_axi_ddr_V_ARREADY,
        m_axi_ddr_V_ARADDR,
        m_axi_ddr_V_ARID,
        m_axi_ddr_V_ARLEN,
        m_axi_ddr_V_ARSIZE,
        m_axi_ddr_V_ARBURST,
        m_axi_ddr_V_ARLOCK,
        m_axi_ddr_V_ARCACHE,
        m_axi_ddr_V_ARPROT,
        m_axi_ddr_V_ARQOS,
        m_axi_ddr_V_ARREGION,
        m_axi_ddr_V_ARUSER,
        m_axi_ddr_V_RVALID,
        m_axi_ddr_V_RREADY,
        m_axi_ddr_V_RDATA,
        m_axi_ddr_V_RLAST,
        m_axi_ddr_V_RID,
        m_axi_ddr_V_RUSER,
        m_axi_ddr_V_RRESP,
        m_axi_ddr_V_BVALID,
        m_axi_ddr_V_BREADY,
        m_axi_ddr_V_BRESP,
        m_axi_ddr_V_BID,
        m_axi_ddr_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_pp0_stage0 = 28'd4;
parameter    ap_ST_fsm_state16 = 28'd8;
parameter    ap_ST_fsm_state17 = 28'd16;
parameter    ap_ST_fsm_state18 = 28'd32;
parameter    ap_ST_fsm_state19 = 28'd64;
parameter    ap_ST_fsm_state20 = 28'd128;
parameter    ap_ST_fsm_state21 = 28'd256;
parameter    ap_ST_fsm_state22 = 28'd512;
parameter    ap_ST_fsm_state23 = 28'd1024;
parameter    ap_ST_fsm_state24 = 28'd2048;
parameter    ap_ST_fsm_state25 = 28'd4096;
parameter    ap_ST_fsm_state26 = 28'd8192;
parameter    ap_ST_fsm_state27 = 28'd16384;
parameter    ap_ST_fsm_state28 = 28'd32768;
parameter    ap_ST_fsm_state29 = 28'd65536;
parameter    ap_ST_fsm_state30 = 28'd131072;
parameter    ap_ST_fsm_state31 = 28'd262144;
parameter    ap_ST_fsm_state32 = 28'd524288;
parameter    ap_ST_fsm_state33 = 28'd1048576;
parameter    ap_ST_fsm_state34 = 28'd2097152;
parameter    ap_ST_fsm_state35 = 28'd4194304;
parameter    ap_ST_fsm_state36 = 28'd8388608;
parameter    ap_ST_fsm_state37 = 28'd16777216;
parameter    ap_ST_fsm_pp1_stage0 = 28'd33554432;
parameter    ap_ST_fsm_state41 = 28'd67108864;
parameter    ap_ST_fsm_state42 = 28'd134217728;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DDR_V_ID_WIDTH = 1;
parameter    C_M_AXI_DDR_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR_V_DATA_WIDTH = 128;
parameter    C_M_AXI_DDR_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_V_TARGET_ADDR = 0;
parameter    C_M_AXI_DDR_V_USER_VALUE = 0;
parameter    C_M_AXI_DDR_V_PROT_VALUE = 0;
parameter    C_M_AXI_DDR_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DDR_V_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [255:0] input_V_TDATA;
input   input_V_TVALID;
output   input_V_TREADY;
output  [175:0] sw0out_V_TDATA;
output   sw0out_V_TVALID;
input   sw0out_V_TREADY;
output  [7:0] startt_V_TDATA;
output   startt_V_TVALID;
input   startt_V_TREADY;
output  [7:0] stopt_V_TDATA;
output   stopt_V_TVALID;
input   stopt_V_TREADY;
output   m_axi_ddr_V_AWVALID;
input   m_axi_ddr_V_AWREADY;
output  [C_M_AXI_DDR_V_ADDR_WIDTH - 1:0] m_axi_ddr_V_AWADDR;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_AWID;
output  [7:0] m_axi_ddr_V_AWLEN;
output  [2:0] m_axi_ddr_V_AWSIZE;
output  [1:0] m_axi_ddr_V_AWBURST;
output  [1:0] m_axi_ddr_V_AWLOCK;
output  [3:0] m_axi_ddr_V_AWCACHE;
output  [2:0] m_axi_ddr_V_AWPROT;
output  [3:0] m_axi_ddr_V_AWQOS;
output  [3:0] m_axi_ddr_V_AWREGION;
output  [C_M_AXI_DDR_V_AWUSER_WIDTH - 1:0] m_axi_ddr_V_AWUSER;
output   m_axi_ddr_V_WVALID;
input   m_axi_ddr_V_WREADY;
output  [C_M_AXI_DDR_V_DATA_WIDTH - 1:0] m_axi_ddr_V_WDATA;
output  [C_M_AXI_DDR_V_WSTRB_WIDTH - 1:0] m_axi_ddr_V_WSTRB;
output   m_axi_ddr_V_WLAST;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_WID;
output  [C_M_AXI_DDR_V_WUSER_WIDTH - 1:0] m_axi_ddr_V_WUSER;
output   m_axi_ddr_V_ARVALID;
input   m_axi_ddr_V_ARREADY;
output  [C_M_AXI_DDR_V_ADDR_WIDTH - 1:0] m_axi_ddr_V_ARADDR;
output  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_ARID;
output  [7:0] m_axi_ddr_V_ARLEN;
output  [2:0] m_axi_ddr_V_ARSIZE;
output  [1:0] m_axi_ddr_V_ARBURST;
output  [1:0] m_axi_ddr_V_ARLOCK;
output  [3:0] m_axi_ddr_V_ARCACHE;
output  [2:0] m_axi_ddr_V_ARPROT;
output  [3:0] m_axi_ddr_V_ARQOS;
output  [3:0] m_axi_ddr_V_ARREGION;
output  [C_M_AXI_DDR_V_ARUSER_WIDTH - 1:0] m_axi_ddr_V_ARUSER;
input   m_axi_ddr_V_RVALID;
output   m_axi_ddr_V_RREADY;
input  [C_M_AXI_DDR_V_DATA_WIDTH - 1:0] m_axi_ddr_V_RDATA;
input   m_axi_ddr_V_RLAST;
input  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_RID;
input  [C_M_AXI_DDR_V_RUSER_WIDTH - 1:0] m_axi_ddr_V_RUSER;
input  [1:0] m_axi_ddr_V_RRESP;
input   m_axi_ddr_V_BVALID;
output   m_axi_ddr_V_BREADY;
input  [1:0] m_axi_ddr_V_BRESP;
input  [C_M_AXI_DDR_V_ID_WIDTH - 1:0] m_axi_ddr_V_BID;
input  [C_M_AXI_DDR_V_BUSER_WIDTH - 1:0] m_axi_ddr_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [255:0] input_V_0_data_out;
wire    input_V_0_vld_in;
wire    input_V_0_vld_out;
wire    input_V_0_ack_in;
reg    input_V_0_ack_out;
reg   [255:0] input_V_0_payload_A;
reg   [255:0] input_V_0_payload_B;
reg    input_V_0_sel_rd;
reg    input_V_0_sel_wr;
wire    input_V_0_sel;
wire    input_V_0_load_A;
wire    input_V_0_load_B;
reg   [1:0] input_V_0_state;
wire    input_V_0_state_cmp_full;
reg   [175:0] sw0out_V_1_data_out;
reg    sw0out_V_1_vld_in;
wire    sw0out_V_1_vld_out;
wire    sw0out_V_1_ack_in;
wire    sw0out_V_1_ack_out;
reg   [175:0] sw0out_V_1_payload_A;
reg   [175:0] sw0out_V_1_payload_B;
reg    sw0out_V_1_sel_rd;
reg    sw0out_V_1_sel_wr;
wire    sw0out_V_1_sel;
wire    sw0out_V_1_load_A;
wire    sw0out_V_1_load_B;
reg   [1:0] sw0out_V_1_state;
wire    sw0out_V_1_state_cmp_full;
wire   [7:0] startt_V_1_data_out;
reg    startt_V_1_vld_in;
wire    startt_V_1_vld_out;
wire    startt_V_1_ack_in;
wire    startt_V_1_ack_out;
reg    startt_V_1_sel_rd;
wire    startt_V_1_sel;
reg   [1:0] startt_V_1_state;
wire   [7:0] stopt_V_1_data_out;
reg    stopt_V_1_vld_in;
wire    stopt_V_1_vld_out;
wire    stopt_V_1_ack_in;
wire    stopt_V_1_ack_out;
reg    stopt_V_1_sel_rd;
wire    stopt_V_1_sel;
reg   [1:0] stopt_V_1_state;
reg   [12:0] inbuf_V_address0;
reg    inbuf_V_ce0;
wire   [215:0] inbuf_V_q0;
reg    inbuf_V_ce1;
reg    inbuf_V_we1;
wire   [215:0] inbuf_V_d1;
reg   [14:0] buf1_V_address0;
reg    buf1_V_ce0;
wire   [287:0] buf1_V_q0;
reg   [14:0] buf1_V_address1;
reg    buf1_V_ce1;
reg    buf1_V_we1;
reg   [287:0] buf1_V_d1;
wire   [287:0] buf1_V_q1;
reg   [14:0] buf0_V_address0;
reg    buf0_V_ce0;
wire   [287:0] buf0_V_q0;
reg   [14:0] buf0_V_address1;
reg    buf0_V_ce1;
reg    buf0_V_we1;
reg   [287:0] buf0_V_d1;
reg   [14:0] buf2_V_address0;
reg    buf2_V_ce0;
wire   [287:0] buf2_V_q0;
reg   [14:0] buf2_V_address1;
reg    buf2_V_ce1;
reg    buf2_V_we1;
reg   [287:0] buf2_V_d1;
reg    input_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln395_fu_1424_p2;
reg    sw0out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln425_reg_5756;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln425_reg_5756_pp1_iter1_reg;
reg    startt_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    stopt_V_TDATA_blk_n;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ddr_V_AWREADY;
wire    ddr_V_WREADY;
reg    ddr_V_ARVALID;
wire    ddr_V_ARREADY;
wire    ddr_V_RVALID;
reg    ddr_V_RREADY;
wire   [127:0] ddr_V_RDATA;
wire    ddr_V_RLAST;
wire   [0:0] ddr_V_RID;
wire   [0:0] ddr_V_RUSER;
wire   [1:0] ddr_V_RRESP;
wire    ddr_V_BVALID;
wire   [1:0] ddr_V_BRESP;
wire   [0:0] ddr_V_BID;
wire   [0:0] ddr_V_BUSER;
reg   [14:0] indvar_flatten47_reg_759;
reg   [1:0] ch_0_reg_770;
reg   [12:0] indvar_flatten_reg_782;
reg   [7:0] row_0_reg_794;
reg   [4:0] col_0_reg_806;
reg   [15:0] indvar_flatten55_reg_818;
reg   [14:0] s_0_reg_829;
reg   [1:0] i_0_reg_840;
reg   [0:0] icmp_ln395_reg_5513;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter1_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter2_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter3_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter4_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter5_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter6_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter7_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter8_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter9_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter10_reg;
reg   [0:0] icmp_ln395_reg_5513_pp0_iter11_reg;
wire   [14:0] add_ln395_fu_1430_p2;
reg   [31:0] p_Result_2_reg_5532;
reg   [31:0] p_Result_3_reg_5537;
reg   [31:0] p_Result_4_reg_5542;
reg   [31:0] p_Result_5_reg_5547;
reg   [31:0] p_Result_5_reg_5547_pp0_iter1_reg;
reg   [31:0] p_Result_6_reg_5552;
reg   [31:0] p_Result_6_reg_5552_pp0_iter1_reg;
reg   [31:0] p_Result_7_reg_5557;
reg   [31:0] p_Result_7_reg_5557_pp0_iter1_reg;
wire   [31:0] grp_fu_1384_p2;
reg   [31:0] tmp345_reg_5592;
wire   [31:0] grp_fu_1389_p2;
reg   [31:0] tmp_1_reg_5597;
wire   [31:0] grp_fu_1394_p2;
reg   [31:0] tmp_2_reg_5602;
wire   [31:0] grp_fu_1399_p2;
reg   [31:0] tmp_3_reg_5607;
wire   [31:0] grp_fu_1404_p2;
reg   [31:0] tmp_4_reg_5612;
wire   [0:0] icmp_ln396_fu_1544_p2;
reg   [0:0] icmp_ln396_reg_5617;
wire   [7:0] select_ln396_1_fu_1596_p3;
reg   [7:0] select_ln396_1_reg_5623;
reg    ap_enable_reg_pp0_iter9;
wire   [31:0] grp_roundf_fu_1312_ap_return;
reg   [31:0] val_assign_reg_5628;
reg   [12:0] inbuf_V_addr_reg_5633;
reg   [12:0] inbuf_V_addr_reg_5633_pp0_iter10_reg;
reg   [12:0] inbuf_V_addr_reg_5633_pp0_iter11_reg;
wire   [31:0] grp_roundf_fu_1321_ap_return;
reg   [31:0] val_assign_1_reg_5639;
wire   [31:0] grp_fu_1409_p2;
reg   [31:0] tmp_5_reg_5644;
wire   [31:0] grp_fu_1414_p2;
reg   [31:0] tmp_6_reg_5649;
wire   [31:0] grp_fu_1419_p2;
reg   [31:0] tmp_7_reg_5654;
wire   [4:0] col_fu_1649_p2;
reg   [4:0] col_reg_5659;
wire   [12:0] select_ln396_2_fu_1661_p3;
reg   [12:0] select_ln396_2_reg_5664;
wire   [1:0] select_ln399_1_fu_1675_p3;
reg   [1:0] select_ln399_1_reg_5669;
reg    ap_enable_reg_pp0_iter10;
wire   [7:0] select_ln399_2_fu_1706_p3;
reg   [7:0] select_ln399_2_reg_5674;
reg   [7:0] select_ln399_2_reg_5674_pp0_iter11_reg;
wire   [215:0] or_ln180_1_fu_2281_p2;
reg   [215:0] or_ln180_1_reg_5690;
wire   [31:0] bitcast_ln705_2_fu_2287_p1;
reg   [31:0] bitcast_ln705_2_reg_5696;
wire   [8:0] select_ln284_65_fu_2481_p3;
reg   [8:0] select_ln284_65_reg_5701;
wire   [31:0] grp_roundf_fu_1339_ap_return;
reg   [31:0] val_assign_3_reg_5707;
wire   [31:0] grp_roundf_fu_1348_ap_return;
reg   [31:0] val_assign_4_reg_5712;
wire   [215:0] or_ln180_4_fu_3132_p2;
reg   [215:0] or_ln180_4_reg_5717;
wire   [31:0] bitcast_ln705_5_fu_3138_p1;
reg   [31:0] bitcast_ln705_5_reg_5723;
wire   [8:0] select_ln284_68_fu_3332_p3;
reg   [8:0] select_ln284_68_reg_5728;
wire   [31:0] bitcast_ln705_6_fu_3340_p1;
reg   [31:0] bitcast_ln705_6_reg_5734;
wire   [8:0] select_ln284_69_fu_3534_p3;
reg   [8:0] select_ln284_69_reg_5739;
wire   [31:0] grp_roundf_fu_1375_ap_return;
reg   [31:0] val_assign_7_reg_5745;
wire   [0:0] icmp_ln425_fu_3988_p2;
wire    ap_block_state38_pp1_stage0_iter0;
wire    ap_block_state39_pp1_stage0_iter1;
reg    ap_block_state39_io;
wire    ap_block_state40_pp1_stage0_iter2;
reg    ap_block_state40_io;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] add_ln425_fu_3994_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [14:0] select_ln431_1_fu_4020_p3;
reg   [14:0] select_ln431_1_reg_5765;
wire   [0:0] trunc_ln214_fu_4033_p1;
reg   [0:0] trunc_ln214_reg_5770;
wire   [1:0] i_fu_4037_p2;
wire   [175:0] zext_ln332_fu_5503_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
wire    ap_CS_fsm_state37;
wire    grp_add_fu_891_ap_ready;
wire    grp_add_fu_891_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state38;
wire    grp_conv_layer_fu_851_ap_start;
wire    grp_conv_layer_fu_851_ap_done;
wire    grp_conv_layer_fu_851_ap_idle;
wire    grp_conv_layer_fu_851_ap_ready;
wire   [14:0] grp_conv_layer_fu_851_input_V_address0;
wire    grp_conv_layer_fu_851_input_V_ce0;
reg   [287:0] grp_conv_layer_fu_851_input_V_q0;
wire   [14:0] grp_conv_layer_fu_851_output_V_address1;
wire    grp_conv_layer_fu_851_output_V_ce1;
wire    grp_conv_layer_fu_851_output_V_we1;
wire   [287:0] grp_conv_layer_fu_851_output_V_d1;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_AWVALID;
wire   [31:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWADDR;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWID;
wire   [31:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWLEN;
wire   [2:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWSIZE;
wire   [1:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWBURST;
wire   [1:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWLOCK;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWCACHE;
wire   [2:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWPROT;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWQOS;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWREGION;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_AWUSER;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_WVALID;
wire   [127:0] grp_conv_layer_fu_851_m_axi_ddr_V_WDATA;
wire   [15:0] grp_conv_layer_fu_851_m_axi_ddr_V_WSTRB;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_WLAST;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_WID;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_WUSER;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_ARVALID;
wire   [31:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARADDR;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARID;
wire   [31:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARLEN;
wire   [2:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARSIZE;
wire   [1:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARBURST;
wire   [1:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARLOCK;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARCACHE;
wire   [2:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARPROT;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARQOS;
wire   [3:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARREGION;
wire   [0:0] grp_conv_layer_fu_851_m_axi_ddr_V_ARUSER;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_RREADY;
wire    grp_conv_layer_fu_851_m_axi_ddr_V_BREADY;
reg   [3:0] grp_conv_layer_fu_851_TO_r;
reg   [4:0] grp_conv_layer_fu_851_TI;
reg   [3:0] grp_conv_layer_fu_851_K;
reg   [0:0] grp_conv_layer_fu_851_P;
reg   [18:0] grp_conv_layer_fu_851_OFFSET;
wire    grp_add_fu_891_ap_start;
wire    grp_add_fu_891_ap_idle;
wire   [14:0] grp_add_fu_891_input1_V_address0;
wire    grp_add_fu_891_input1_V_ce0;
reg   [287:0] grp_add_fu_891_input1_V_q0;
wire   [14:0] grp_add_fu_891_input2_V_address0;
wire    grp_add_fu_891_input2_V_ce0;
reg   [287:0] grp_add_fu_891_input2_V_q0;
wire   [14:0] grp_add_fu_891_output_V_address1;
wire    grp_add_fu_891_output_V_ce1;
wire    grp_add_fu_891_output_V_we1;
wire   [287:0] grp_add_fu_891_output_V_d1;
reg   [31:0] grp_add_fu_891_SCALE1;
reg   [31:0] grp_add_fu_891_SCALE2;
wire   [12:0] grp_conv1_fu_914_input_V_address0;
wire    grp_conv1_fu_914_input_V_ce0;
wire   [215:0] grp_conv1_fu_914_input_V_d0;
wire    grp_conv1_fu_914_input_V_we0;
wire   [12:0] grp_conv1_fu_914_input_V_address1;
wire    grp_conv1_fu_914_input_V_ce1;
wire   [215:0] grp_conv1_fu_914_input_V_d1;
wire    grp_conv1_fu_914_input_V_we1;
wire   [14:0] grp_conv1_fu_914_output_V_address0;
wire    grp_conv1_fu_914_output_V_ce0;
wire   [287:0] grp_conv1_fu_914_output_V_d0;
wire    grp_conv1_fu_914_output_V_we0;
wire   [14:0] grp_conv1_fu_914_output_V_address1;
wire    grp_conv1_fu_914_output_V_ce1;
wire   [287:0] grp_conv1_fu_914_output_V_d1;
wire    grp_conv1_fu_914_output_V_we1;
wire    grp_conv1_fu_914_ap_start;
wire    grp_conv1_fu_914_ap_done;
wire    grp_conv1_fu_914_ap_ready;
wire    grp_conv1_fu_914_ap_idle;
reg    grp_conv1_fu_914_ap_continue;
wire    grp_maxpool_fu_1304_ap_start;
wire    grp_maxpool_fu_1304_ap_done;
wire    grp_maxpool_fu_1304_ap_idle;
wire    grp_maxpool_fu_1304_ap_ready;
wire   [14:0] grp_maxpool_fu_1304_buf0_V_address1;
wire    grp_maxpool_fu_1304_buf0_V_ce1;
wire    grp_maxpool_fu_1304_buf0_V_we1;
wire   [287:0] grp_maxpool_fu_1304_buf0_V_d1;
wire   [14:0] grp_maxpool_fu_1304_buf1_V_address0;
wire    grp_maxpool_fu_1304_buf1_V_ce0;
wire   [14:0] grp_maxpool_fu_1304_buf1_V_address1;
wire    grp_maxpool_fu_1304_buf1_V_ce1;
wire    grp_roundf_fu_1312_ap_start;
wire    grp_roundf_fu_1312_ap_done;
wire    grp_roundf_fu_1312_ap_idle;
wire    grp_roundf_fu_1312_ap_ready;
reg    grp_roundf_fu_1312_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call26;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call26;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call26;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call26;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call26;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call26;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call26;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call26;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call26;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call26;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call26;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call26;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call26;
reg    ap_block_pp0_stage0_11001_ignoreCallOp143;
wire    grp_roundf_fu_1321_ap_start;
wire    grp_roundf_fu_1321_ap_done;
wire    grp_roundf_fu_1321_ap_idle;
wire    grp_roundf_fu_1321_ap_ready;
reg    grp_roundf_fu_1321_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call82;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call82;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call82;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call82;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call82;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call82;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call82;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call82;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call82;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call82;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call82;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call82;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call82;
reg    ap_block_pp0_stage0_11001_ignoreCallOp144;
wire    grp_roundf_fu_1330_ap_start;
wire    grp_roundf_fu_1330_ap_done;
wire    grp_roundf_fu_1330_ap_idle;
wire    grp_roundf_fu_1330_ap_ready;
reg    grp_roundf_fu_1330_ap_ce;
wire   [31:0] grp_roundf_fu_1330_ap_return;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call133;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call133;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call133;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call133;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call133;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call133;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call133;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call133;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call133;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call133;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call133;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call133;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call133;
reg    ap_block_pp0_stage0_11001_ignoreCallOp172;
wire    grp_roundf_fu_1339_ap_start;
wire    grp_roundf_fu_1339_ap_done;
wire    grp_roundf_fu_1339_ap_idle;
wire    grp_roundf_fu_1339_ap_ready;
reg    grp_roundf_fu_1339_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call184;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call184;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call184;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call184;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call184;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call184;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call184;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call184;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call184;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call184;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call184;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call184;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call184;
reg    ap_block_pp0_stage0_11001_ignoreCallOp173;
wire    grp_roundf_fu_1348_ap_start;
wire    grp_roundf_fu_1348_ap_done;
wire    grp_roundf_fu_1348_ap_idle;
wire    grp_roundf_fu_1348_ap_ready;
reg    grp_roundf_fu_1348_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call235;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call235;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call235;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call235;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call235;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call235;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call235;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call235;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call235;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call235;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call235;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call235;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call235;
reg    ap_block_pp0_stage0_11001_ignoreCallOp174;
wire    grp_roundf_fu_1357_ap_start;
wire    grp_roundf_fu_1357_ap_done;
wire    grp_roundf_fu_1357_ap_idle;
wire    grp_roundf_fu_1357_ap_ready;
reg    grp_roundf_fu_1357_ap_ce;
wire   [31:0] grp_roundf_fu_1357_ap_return;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call286;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call286;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call286;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call286;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call286;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call286;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call286;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call286;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call286;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call286;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call286;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call286;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call286;
reg    ap_block_pp0_stage0_11001_ignoreCallOp317;
wire    grp_roundf_fu_1366_ap_start;
wire    grp_roundf_fu_1366_ap_done;
wire    grp_roundf_fu_1366_ap_idle;
wire    grp_roundf_fu_1366_ap_ready;
reg    grp_roundf_fu_1366_ap_ce;
wire   [31:0] grp_roundf_fu_1366_ap_return;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call337;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call337;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call337;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call337;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call337;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call337;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call337;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call337;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call337;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call337;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call337;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call337;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call337;
reg    ap_block_pp0_stage0_11001_ignoreCallOp318;
wire    grp_roundf_fu_1375_ap_start;
wire    grp_roundf_fu_1375_ap_done;
wire    grp_roundf_fu_1375_ap_idle;
wire    grp_roundf_fu_1375_ap_ready;
reg    grp_roundf_fu_1375_ap_ce;
reg    ap_block_state3_pp0_stage0_iter0_ignore_call388;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call388;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call388;
wire    ap_block_state6_pp0_stage0_iter3_ignore_call388;
wire    ap_block_state7_pp0_stage0_iter4_ignore_call388;
wire    ap_block_state8_pp0_stage0_iter5_ignore_call388;
wire    ap_block_state9_pp0_stage0_iter6_ignore_call388;
wire    ap_block_state10_pp0_stage0_iter7_ignore_call388;
wire    ap_block_state11_pp0_stage0_iter8_ignore_call388;
wire    ap_block_state12_pp0_stage0_iter9_ignore_call388;
wire    ap_block_state13_pp0_stage0_iter10_ignore_call388;
wire    ap_block_state14_pp0_stage0_iter11_ignore_call388;
wire    ap_block_state15_pp0_stage0_iter12_ignore_call388;
reg    ap_block_pp0_stage0_11001_ignoreCallOp319;
reg   [1:0] ap_phi_mux_ch_0_phi_fu_774_p4;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_786_p4;
reg   [7:0] ap_phi_mux_row_0_phi_fu_798_p4;
reg   [4:0] ap_phi_mux_col_0_phi_fu_810_p4;
reg   [14:0] ap_phi_mux_s_0_phi_fu_833_p4;
reg    grp_conv_layer_fu_851_ap_start_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
reg    grp_add_fu_891_ap_start_reg;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state29;
reg    grp_conv1_fu_914_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_sync_grp_conv1_fu_914_ap_ready;
wire    ap_sync_grp_conv1_fu_914_ap_done;
reg    ap_block_state17_on_subcall_done;
reg    ap_sync_reg_grp_conv1_fu_914_ap_ready;
reg    ap_sync_reg_grp_conv1_fu_914_ap_done;
reg    grp_maxpool_fu_1304_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg    grp_roundf_fu_1312_ap_start_reg;
reg    grp_roundf_fu_1321_ap_start_reg;
reg    grp_roundf_fu_1330_ap_start_reg;
reg    grp_roundf_fu_1339_ap_start_reg;
reg    grp_roundf_fu_1348_ap_start_reg;
reg    grp_roundf_fu_1357_ap_start_reg;
reg    grp_roundf_fu_1366_ap_start_reg;
reg    grp_roundf_fu_1375_ap_start_reg;
wire   [63:0] zext_ln180_3_fu_1644_p1;
wire   [63:0] zext_ln431_fu_4028_p1;
reg   [168:0] p_0106_1_fu_696;
wire   [168:0] p_Result_30_s_fu_5491_p5;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] grp_fu_1384_p0;
wire   [31:0] grp_fu_1389_p0;
wire   [31:0] grp_fu_1394_p0;
wire   [31:0] grp_fu_1399_p0;
wire   [31:0] grp_fu_1404_p0;
wire   [31:0] grp_fu_1409_p0;
wire   [31:0] grp_fu_1414_p0;
wire   [31:0] grp_fu_1419_p0;
wire   [31:0] trunc_ln681_fu_1436_p1;
wire   [31:0] p_Result_1_fu_1445_p4;
wire   [0:0] icmp_ln397_fu_1564_p2;
wire   [0:0] xor_ln399_fu_1558_p2;
wire   [7:0] select_ln399_fu_1550_p3;
wire   [0:0] and_ln399_fu_1570_p2;
wire   [0:0] or_ln396_fu_1582_p2;
wire   [7:0] row_fu_1576_p2;
wire   [12:0] tmp_519_fu_1604_p3;
wire   [9:0] tmp_520_fu_1616_p3;
wire   [13:0] zext_ln180_fu_1612_p1;
wire   [13:0] zext_ln180_1_fu_1624_p1;
wire   [4:0] select_ln396_fu_1588_p3;
wire   [13:0] zext_ln180_2_fu_1634_p1;
wire   [13:0] sub_ln180_fu_1628_p2;
wire   [13:0] add_ln180_fu_1638_p2;
wire   [12:0] add_ln396_1_fu_1655_p2;
wire   [1:0] ch_fu_1669_p2;
wire   [7:0] tmp_403_mid1_fu_1682_p5;
wire   [7:0] tmp_s_fu_1694_p5;
wire   [31:0] bitcast_ln705_fu_1713_p1;
wire   [7:0] p_Result_s_fu_1728_p4;
wire   [22:0] trunc_ln270_fu_1742_p1;
wire   [30:0] trunc_ln263_fu_1716_p1;
wire   [8:0] zext_ln266_fu_1738_p1;
wire  signed [8:0] sub_ln281_fu_1764_p2;
wire   [8:0] sub_ln294_fu_1792_p2;
wire   [7:0] trunc_ln294_fu_1798_p1;
wire   [8:0] trunc_ln296_fu_1746_p1;
wire   [0:0] icmp_ln295_fu_1802_p2;
wire   [8:0] shl_ln297_fu_1808_p2;
wire   [23:0] tmp_359_fu_1750_p3;
wire  signed [23:0] sext_ln281_fu_1770_p1;
wire   [23:0] lshr_ln286_fu_1822_p2;
wire   [0:0] tmp_522_fu_1832_p3;
wire   [0:0] icmp_ln278_fu_1758_p2;
wire   [0:0] icmp_ln282_fu_1774_p2;
wire   [0:0] or_ln282_fu_1848_p2;
wire   [0:0] icmp_ln285_fu_1786_p2;
wire   [0:0] xor_ln282_fu_1854_p2;
wire   [0:0] and_ln285_fu_1860_p2;
wire   [0:0] icmp_ln284_fu_1780_p2;
wire   [0:0] and_ln285_128_fu_1866_p2;
wire   [8:0] trunc_ln286_fu_1828_p1;
wire   [8:0] select_ln288_fu_1840_p3;
wire   [8:0] select_ln285_fu_1872_p3;
wire   [0:0] xor_ln278_fu_1888_p2;
wire   [0:0] and_ln282_fu_1894_p2;
wire   [8:0] select_ln278_fu_1880_p3;
wire   [0:0] or_ln284_fu_1908_p2;
wire   [8:0] select_ln282_fu_1900_p3;
wire   [8:0] select_ln295_fu_1814_p3;
wire   [8:0] select_ln284_fu_1914_p3;
wire   [0:0] tmp_521_fu_1720_p3;
wire   [8:0] sub_ln461_fu_1922_p2;
wire   [215:0] zext_ln180_4_fu_1936_p1;
wire   [215:0] lshr_ln180_fu_1940_p2;
wire   [71:0] trunc_ln180_fu_1946_p1;
wire   [8:0] select_ln303_fu_1928_p3;
wire   [215:0] zext_ln180_5_fu_1962_p1;
wire   [215:0] shl_ln180_fu_1966_p2;
wire   [215:0] xor_ln180_fu_1972_p2;
wire   [71:0] tmp_360_fu_1950_p5;
wire   [215:0] zext_ln180_6_fu_1984_p1;
wire   [215:0] and_ln180_fu_1978_p2;
wire   [215:0] shl_ln180_1_fu_1988_p2;
wire   [31:0] bitcast_ln705_1_fu_2000_p1;
wire   [7:0] p_Result_24_1_fu_2015_p4;
wire   [22:0] trunc_ln270_1_fu_2029_p1;
wire   [30:0] trunc_ln263_64_fu_2003_p1;
wire   [8:0] zext_ln266_64_fu_2025_p1;
wire  signed [8:0] sub_ln281_64_fu_2051_p2;
wire   [8:0] sub_ln294_64_fu_2079_p2;
wire   [7:0] trunc_ln294_64_fu_2085_p1;
wire   [8:0] trunc_ln296_64_fu_2033_p1;
wire   [0:0] icmp_ln295_1_fu_2089_p2;
wire   [8:0] shl_ln297_1_fu_2095_p2;
wire   [23:0] tmp_361_fu_2037_p3;
wire  signed [23:0] sext_ln281_64_fu_2057_p1;
wire   [23:0] lshr_ln286_64_fu_2109_p2;
wire   [0:0] tmp_524_fu_2119_p3;
wire   [0:0] icmp_ln278_1_fu_2045_p2;
wire   [0:0] icmp_ln282_1_fu_2061_p2;
wire   [0:0] or_ln282_64_fu_2135_p2;
wire   [0:0] icmp_ln285_1_fu_2073_p2;
wire   [0:0] xor_ln282_64_fu_2141_p2;
wire   [0:0] and_ln285_129_fu_2147_p2;
wire   [0:0] icmp_ln284_1_fu_2067_p2;
wire   [0:0] and_ln285_130_fu_2153_p2;
wire   [8:0] trunc_ln286_64_fu_2115_p1;
wire   [8:0] select_ln288_64_fu_2127_p3;
wire   [8:0] select_ln285_64_fu_2159_p3;
wire   [0:0] xor_ln278_64_fu_2175_p2;
wire   [0:0] and_ln282_64_fu_2181_p2;
wire   [8:0] select_ln278_64_fu_2167_p3;
wire   [0:0] or_ln284_64_fu_2195_p2;
wire   [8:0] select_ln282_64_fu_2187_p3;
wire   [8:0] select_ln295_64_fu_2101_p3;
wire   [8:0] select_ln284_64_fu_2201_p3;
wire   [0:0] tmp_523_fu_2007_p3;
wire   [8:0] sub_ln461_1_fu_2209_p2;
wire   [215:0] or_ln180_fu_1994_p2;
wire   [215:0] zext_ln180_7_fu_2223_p1;
wire   [215:0] lshr_ln180_1_fu_2227_p2;
wire   [71:0] trunc_ln180_1_fu_2233_p1;
wire   [8:0] select_ln303_1_fu_2215_p3;
wire   [215:0] zext_ln180_8_fu_2249_p1;
wire   [215:0] shl_ln180_2_fu_2253_p2;
wire   [215:0] xor_ln180_1_fu_2259_p2;
wire   [71:0] tmp_362_fu_2237_p5;
wire   [215:0] zext_ln180_9_fu_2271_p1;
wire   [215:0] and_ln180_1_fu_2265_p2;
wire   [215:0] shl_ln180_3_fu_2275_p2;
wire   [7:0] p_Result_24_2_fu_2295_p4;
wire   [22:0] trunc_ln270_2_fu_2309_p1;
wire   [30:0] trunc_ln263_65_fu_2291_p1;
wire   [8:0] zext_ln266_65_fu_2305_p1;
wire  signed [8:0] sub_ln281_65_fu_2331_p2;
wire   [8:0] sub_ln294_65_fu_2359_p2;
wire   [7:0] trunc_ln294_65_fu_2365_p1;
wire   [8:0] trunc_ln296_65_fu_2313_p1;
wire   [0:0] icmp_ln295_2_fu_2369_p2;
wire   [8:0] shl_ln297_2_fu_2375_p2;
wire   [23:0] tmp_363_fu_2317_p3;
wire  signed [23:0] sext_ln281_65_fu_2337_p1;
wire   [23:0] lshr_ln286_65_fu_2389_p2;
wire   [0:0] tmp_526_fu_2399_p3;
wire   [0:0] icmp_ln278_2_fu_2325_p2;
wire   [0:0] icmp_ln282_2_fu_2341_p2;
wire   [0:0] or_ln282_65_fu_2415_p2;
wire   [0:0] icmp_ln285_2_fu_2353_p2;
wire   [0:0] xor_ln282_65_fu_2421_p2;
wire   [0:0] and_ln285_131_fu_2427_p2;
wire   [0:0] icmp_ln284_2_fu_2347_p2;
wire   [0:0] and_ln285_132_fu_2433_p2;
wire   [8:0] trunc_ln286_65_fu_2395_p1;
wire   [8:0] select_ln288_65_fu_2407_p3;
wire   [8:0] select_ln285_65_fu_2439_p3;
wire   [0:0] xor_ln278_65_fu_2455_p2;
wire   [0:0] and_ln282_65_fu_2461_p2;
wire   [8:0] select_ln278_65_fu_2447_p3;
wire   [0:0] or_ln284_65_fu_2475_p2;
wire   [8:0] select_ln282_65_fu_2467_p3;
wire   [8:0] select_ln295_65_fu_2381_p3;
wire   [0:0] tmp_525_fu_2489_p3;
wire   [8:0] sub_ln461_2_fu_2496_p2;
wire   [215:0] zext_ln180_10_fu_2508_p1;
wire   [215:0] lshr_ln180_2_fu_2511_p2;
wire   [71:0] trunc_ln180_2_fu_2516_p1;
wire   [8:0] select_ln303_2_fu_2501_p3;
wire   [215:0] zext_ln180_11_fu_2532_p1;
wire   [215:0] shl_ln180_4_fu_2535_p2;
wire   [215:0] xor_ln180_2_fu_2541_p2;
wire   [71:0] tmp_364_fu_2520_p5;
wire   [215:0] zext_ln180_12_fu_2552_p1;
wire   [215:0] and_ln180_2_fu_2547_p2;
wire   [215:0] shl_ln180_5_fu_2556_p2;
wire   [31:0] bitcast_ln705_3_fu_2568_p1;
wire   [7:0] p_Result_24_3_fu_2583_p4;
wire   [22:0] trunc_ln270_3_fu_2597_p1;
wire   [30:0] trunc_ln263_66_fu_2571_p1;
wire   [8:0] zext_ln266_66_fu_2593_p1;
wire  signed [8:0] sub_ln281_66_fu_2619_p2;
wire   [8:0] sub_ln294_66_fu_2647_p2;
wire   [7:0] trunc_ln294_66_fu_2653_p1;
wire   [8:0] trunc_ln296_66_fu_2601_p1;
wire   [0:0] icmp_ln295_3_fu_2657_p2;
wire   [8:0] shl_ln297_3_fu_2663_p2;
wire   [23:0] tmp_365_fu_2605_p3;
wire  signed [23:0] sext_ln281_66_fu_2625_p1;
wire   [23:0] lshr_ln286_66_fu_2677_p2;
wire   [0:0] tmp_528_fu_2687_p3;
wire   [0:0] icmp_ln278_3_fu_2613_p2;
wire   [0:0] icmp_ln282_3_fu_2629_p2;
wire   [0:0] or_ln282_66_fu_2703_p2;
wire   [0:0] icmp_ln285_3_fu_2641_p2;
wire   [0:0] xor_ln282_66_fu_2709_p2;
wire   [0:0] and_ln285_133_fu_2715_p2;
wire   [0:0] icmp_ln284_3_fu_2635_p2;
wire   [0:0] and_ln285_134_fu_2721_p2;
wire   [8:0] trunc_ln286_66_fu_2683_p1;
wire   [8:0] select_ln288_66_fu_2695_p3;
wire   [8:0] select_ln285_66_fu_2727_p3;
wire   [0:0] xor_ln278_66_fu_2743_p2;
wire   [0:0] and_ln282_66_fu_2749_p2;
wire   [8:0] select_ln278_66_fu_2735_p3;
wire   [0:0] or_ln284_66_fu_2763_p2;
wire   [8:0] select_ln282_66_fu_2755_p3;
wire   [8:0] select_ln295_66_fu_2669_p3;
wire   [8:0] select_ln284_66_fu_2769_p3;
wire   [0:0] tmp_527_fu_2575_p3;
wire   [8:0] sub_ln461_3_fu_2777_p2;
wire   [215:0] or_ln180_2_fu_2562_p2;
wire   [215:0] zext_ln180_13_fu_2791_p1;
wire   [215:0] lshr_ln180_3_fu_2794_p2;
wire   [71:0] trunc_ln180_3_fu_2800_p1;
wire   [8:0] select_ln303_3_fu_2783_p3;
wire   [215:0] zext_ln180_14_fu_2816_p1;
wire   [215:0] shl_ln180_6_fu_2819_p2;
wire   [215:0] xor_ln180_3_fu_2825_p2;
wire   [71:0] tmp_366_fu_2804_p5;
wire   [215:0] zext_ln180_15_fu_2837_p1;
wire   [215:0] and_ln180_3_fu_2831_p2;
wire   [215:0] shl_ln180_7_fu_2841_p2;
wire   [31:0] bitcast_ln705_4_fu_2853_p1;
wire   [7:0] p_Result_24_4_fu_2868_p4;
wire   [22:0] trunc_ln270_4_fu_2882_p1;
wire   [30:0] trunc_ln263_67_fu_2856_p1;
wire   [8:0] zext_ln266_67_fu_2878_p1;
wire  signed [8:0] sub_ln281_67_fu_2904_p2;
wire   [8:0] sub_ln294_67_fu_2932_p2;
wire   [7:0] trunc_ln294_67_fu_2938_p1;
wire   [8:0] trunc_ln296_67_fu_2886_p1;
wire   [0:0] icmp_ln295_4_fu_2942_p2;
wire   [8:0] shl_ln297_4_fu_2948_p2;
wire   [23:0] tmp_367_fu_2890_p3;
wire  signed [23:0] sext_ln281_67_fu_2910_p1;
wire   [23:0] lshr_ln286_67_fu_2962_p2;
wire   [0:0] tmp_530_fu_2972_p3;
wire   [0:0] icmp_ln278_4_fu_2898_p2;
wire   [0:0] icmp_ln282_4_fu_2914_p2;
wire   [0:0] or_ln282_67_fu_2988_p2;
wire   [0:0] icmp_ln285_4_fu_2926_p2;
wire   [0:0] xor_ln282_67_fu_2994_p2;
wire   [0:0] and_ln285_135_fu_3000_p2;
wire   [0:0] icmp_ln284_4_fu_2920_p2;
wire   [0:0] and_ln285_136_fu_3006_p2;
wire   [8:0] trunc_ln286_67_fu_2968_p1;
wire   [8:0] select_ln288_67_fu_2980_p3;
wire   [8:0] select_ln285_67_fu_3012_p3;
wire   [0:0] xor_ln278_67_fu_3028_p2;
wire   [0:0] and_ln282_67_fu_3034_p2;
wire   [8:0] select_ln278_67_fu_3020_p3;
wire   [0:0] or_ln284_67_fu_3048_p2;
wire   [8:0] select_ln282_67_fu_3040_p3;
wire   [8:0] select_ln295_67_fu_2954_p3;
wire   [8:0] select_ln284_67_fu_3054_p3;
wire   [0:0] tmp_529_fu_2860_p3;
wire   [8:0] sub_ln461_4_fu_3062_p2;
wire   [215:0] or_ln180_3_fu_2847_p2;
wire   [215:0] zext_ln180_16_fu_3076_p1;
wire   [215:0] lshr_ln180_4_fu_3079_p2;
wire   [71:0] trunc_ln180_4_fu_3085_p1;
wire   [8:0] select_ln303_4_fu_3068_p3;
wire   [215:0] zext_ln180_17_fu_3101_p1;
wire   [215:0] shl_ln180_8_fu_3104_p2;
wire   [215:0] xor_ln180_4_fu_3110_p2;
wire   [71:0] tmp_368_fu_3089_p5;
wire   [215:0] zext_ln180_18_fu_3122_p1;
wire   [215:0] and_ln180_4_fu_3116_p2;
wire   [215:0] shl_ln180_9_fu_3126_p2;
wire   [7:0] p_Result_24_5_fu_3146_p4;
wire   [22:0] trunc_ln270_5_fu_3160_p1;
wire   [30:0] trunc_ln263_68_fu_3142_p1;
wire   [8:0] zext_ln266_68_fu_3156_p1;
wire  signed [8:0] sub_ln281_68_fu_3182_p2;
wire   [8:0] sub_ln294_68_fu_3210_p2;
wire   [7:0] trunc_ln294_68_fu_3216_p1;
wire   [8:0] trunc_ln296_68_fu_3164_p1;
wire   [0:0] icmp_ln295_5_fu_3220_p2;
wire   [8:0] shl_ln297_5_fu_3226_p2;
wire   [23:0] tmp_370_fu_3168_p3;
wire  signed [23:0] sext_ln281_68_fu_3188_p1;
wire   [23:0] lshr_ln286_68_fu_3240_p2;
wire   [0:0] tmp_532_fu_3250_p3;
wire   [0:0] icmp_ln278_5_fu_3176_p2;
wire   [0:0] icmp_ln282_5_fu_3192_p2;
wire   [0:0] or_ln282_68_fu_3266_p2;
wire   [0:0] icmp_ln285_5_fu_3204_p2;
wire   [0:0] xor_ln282_68_fu_3272_p2;
wire   [0:0] and_ln285_137_fu_3278_p2;
wire   [0:0] icmp_ln284_5_fu_3198_p2;
wire   [0:0] and_ln285_138_fu_3284_p2;
wire   [8:0] trunc_ln286_68_fu_3246_p1;
wire   [8:0] select_ln288_68_fu_3258_p3;
wire   [8:0] select_ln285_68_fu_3290_p3;
wire   [0:0] xor_ln278_68_fu_3306_p2;
wire   [0:0] and_ln282_68_fu_3312_p2;
wire   [8:0] select_ln278_68_fu_3298_p3;
wire   [0:0] or_ln284_68_fu_3326_p2;
wire   [8:0] select_ln282_68_fu_3318_p3;
wire   [8:0] select_ln295_68_fu_3232_p3;
wire   [7:0] p_Result_24_6_fu_3348_p4;
wire   [22:0] trunc_ln270_6_fu_3362_p1;
wire   [30:0] trunc_ln263_69_fu_3344_p1;
wire   [8:0] zext_ln266_69_fu_3358_p1;
wire  signed [8:0] sub_ln281_69_fu_3384_p2;
wire   [8:0] sub_ln294_69_fu_3412_p2;
wire   [7:0] trunc_ln294_69_fu_3418_p1;
wire   [8:0] trunc_ln296_69_fu_3366_p1;
wire   [0:0] icmp_ln295_6_fu_3422_p2;
wire   [8:0] shl_ln297_6_fu_3428_p2;
wire   [23:0] tmp_372_fu_3370_p3;
wire  signed [23:0] sext_ln281_69_fu_3390_p1;
wire   [23:0] lshr_ln286_69_fu_3442_p2;
wire   [0:0] tmp_534_fu_3452_p3;
wire   [0:0] icmp_ln278_6_fu_3378_p2;
wire   [0:0] icmp_ln282_6_fu_3394_p2;
wire   [0:0] or_ln282_69_fu_3468_p2;
wire   [0:0] icmp_ln285_6_fu_3406_p2;
wire   [0:0] xor_ln282_69_fu_3474_p2;
wire   [0:0] and_ln285_139_fu_3480_p2;
wire   [0:0] icmp_ln284_6_fu_3400_p2;
wire   [0:0] and_ln285_140_fu_3486_p2;
wire   [8:0] trunc_ln286_69_fu_3448_p1;
wire   [8:0] select_ln288_69_fu_3460_p3;
wire   [8:0] select_ln285_69_fu_3492_p3;
wire   [0:0] xor_ln278_69_fu_3508_p2;
wire   [0:0] and_ln282_69_fu_3514_p2;
wire   [8:0] select_ln278_69_fu_3500_p3;
wire   [0:0] or_ln284_69_fu_3528_p2;
wire   [8:0] select_ln282_69_fu_3520_p3;
wire   [8:0] select_ln295_69_fu_3434_p3;
wire   [0:0] tmp_531_fu_3542_p3;
wire   [8:0] sub_ln461_5_fu_3549_p2;
wire   [215:0] zext_ln180_19_fu_3561_p1;
wire   [215:0] lshr_ln180_5_fu_3564_p2;
wire   [71:0] trunc_ln180_5_fu_3569_p1;
wire   [8:0] select_ln303_5_fu_3554_p3;
wire   [215:0] zext_ln180_20_fu_3585_p1;
wire   [215:0] shl_ln180_10_fu_3588_p2;
wire   [215:0] xor_ln180_5_fu_3594_p2;
wire   [71:0] tmp_371_fu_3573_p5;
wire   [215:0] zext_ln180_21_fu_3605_p1;
wire   [215:0] and_ln180_5_fu_3600_p2;
wire   [215:0] shl_ln180_11_fu_3609_p2;
wire   [0:0] tmp_533_fu_3621_p3;
wire   [8:0] sub_ln461_6_fu_3628_p2;
wire   [215:0] or_ln180_5_fu_3615_p2;
wire   [215:0] zext_ln180_22_fu_3640_p1;
wire   [215:0] lshr_ln180_6_fu_3643_p2;
wire   [71:0] trunc_ln180_6_fu_3649_p1;
wire   [8:0] select_ln303_6_fu_3633_p3;
wire   [215:0] zext_ln180_23_fu_3665_p1;
wire   [215:0] shl_ln180_12_fu_3668_p2;
wire   [215:0] xor_ln180_6_fu_3674_p2;
wire   [71:0] tmp_373_fu_3653_p5;
wire   [215:0] zext_ln180_24_fu_3686_p1;
wire   [215:0] and_ln180_6_fu_3680_p2;
wire   [215:0] shl_ln180_13_fu_3690_p2;
wire   [31:0] bitcast_ln705_7_fu_3702_p1;
wire   [7:0] p_Result_24_7_fu_3717_p4;
wire   [22:0] trunc_ln270_7_fu_3731_p1;
wire   [30:0] trunc_ln263_70_fu_3705_p1;
wire   [8:0] zext_ln266_70_fu_3727_p1;
wire  signed [8:0] sub_ln281_70_fu_3753_p2;
wire   [8:0] sub_ln294_70_fu_3781_p2;
wire   [7:0] trunc_ln294_70_fu_3787_p1;
wire   [8:0] trunc_ln296_70_fu_3735_p1;
wire   [0:0] icmp_ln295_7_fu_3791_p2;
wire   [8:0] shl_ln297_7_fu_3797_p2;
wire   [23:0] tmp_374_fu_3739_p3;
wire  signed [23:0] sext_ln281_70_fu_3759_p1;
wire   [23:0] lshr_ln286_70_fu_3811_p2;
wire   [0:0] tmp_536_fu_3821_p3;
wire   [0:0] icmp_ln278_7_fu_3747_p2;
wire   [0:0] icmp_ln282_7_fu_3763_p2;
wire   [0:0] or_ln282_70_fu_3837_p2;
wire   [0:0] icmp_ln285_7_fu_3775_p2;
wire   [0:0] xor_ln282_70_fu_3843_p2;
wire   [0:0] and_ln285_141_fu_3849_p2;
wire   [0:0] icmp_ln284_7_fu_3769_p2;
wire   [0:0] and_ln285_142_fu_3855_p2;
wire   [8:0] trunc_ln286_70_fu_3817_p1;
wire   [8:0] select_ln288_70_fu_3829_p3;
wire   [8:0] select_ln285_70_fu_3861_p3;
wire   [0:0] xor_ln278_70_fu_3877_p2;
wire   [0:0] and_ln282_70_fu_3883_p2;
wire   [8:0] select_ln278_70_fu_3869_p3;
wire   [0:0] or_ln284_70_fu_3897_p2;
wire   [8:0] select_ln282_70_fu_3889_p3;
wire   [8:0] select_ln295_70_fu_3803_p3;
wire   [8:0] select_ln284_70_fu_3903_p3;
wire   [0:0] tmp_535_fu_3709_p3;
wire   [8:0] sub_ln461_7_fu_3911_p2;
wire   [215:0] or_ln180_6_fu_3696_p2;
wire   [215:0] zext_ln180_25_fu_3925_p1;
wire   [215:0] lshr_ln180_7_fu_3928_p2;
wire   [71:0] trunc_ln180_7_fu_3934_p1;
wire   [8:0] select_ln303_7_fu_3917_p3;
wire   [215:0] zext_ln180_26_fu_3950_p1;
wire   [215:0] shl_ln180_14_fu_3953_p2;
wire   [215:0] xor_ln180_7_fu_3959_p2;
wire   [71:0] tmp_375_fu_3938_p5;
wire   [215:0] zext_ln180_27_fu_3971_p1;
wire   [215:0] and_ln180_7_fu_3965_p2;
wire   [215:0] shl_ln180_15_fu_3975_p2;
wire   [0:0] icmp_ln426_fu_4006_p2;
wire   [14:0] s_fu_4000_p2;
wire   [1:0] select_ln431_fu_4012_p3;
wire   [7:0] tmp_376_fu_4053_p5;
wire   [7:0] empty_45_fu_4063_p2;
wire   [8:0] zext_ln214_fu_4075_p1;
wire   [8:0] zext_ln214_1_fu_4079_p1;
wire   [0:0] icmp_ln214_fu_4069_p2;
wire   [8:0] sub_ln214_fu_4093_p2;
wire   [8:0] sub_ln214_2_fu_4105_p2;
reg   [287:0] tmp_537_fu_4083_p4;
wire   [8:0] sub_ln214_1_fu_4099_p2;
wire   [8:0] select_ln214_fu_4111_p3;
wire   [8:0] select_ln214_2_fu_4127_p3;
wire   [8:0] sub_ln214_3_fu_4135_p2;
wire   [287:0] select_ln214_1_fu_4119_p3;
wire   [287:0] zext_ln214_2_fu_4141_p1;
wire   [287:0] zext_ln214_3_fu_4145_p1;
wire   [287:0] lshr_ln214_fu_4149_p2;
wire   [287:0] lshr_ln214_1_fu_4155_p2;
wire   [287:0] and_ln214_fu_4161_p2;
wire   [4:0] shl_ln2_fu_4046_p3;
wire   [4:0] or_ln214_fu_4171_p2;
wire   [2:0] tmp_377_fu_4183_p4;
wire   [4:0] empty_46_fu_4177_p2;
wire   [7:0] tmp_378_fu_4193_p3;
wire   [8:0] p_cast163_fu_4205_p1;
wire   [8:0] empty_47_fu_4209_p2;
wire   [9:0] p_cast164_fu_4201_p1;
wire   [9:0] p_cast162_fu_4215_p1;
wire   [8:0] zext_ln214_4_fu_4225_p1;
wire   [0:0] icmp_ln214_1_fu_4219_p2;
wire   [8:0] sub_ln214_4_fu_4239_p2;
wire   [8:0] sub_ln214_6_fu_4251_p2;
reg   [287:0] tmp_538_fu_4229_p4;
wire   [8:0] sub_ln214_5_fu_4245_p2;
wire   [8:0] select_ln214_3_fu_4257_p3;
wire   [8:0] select_ln214_5_fu_4273_p3;
wire   [8:0] sub_ln214_7_fu_4281_p2;
wire   [287:0] select_ln214_4_fu_4265_p3;
wire   [287:0] zext_ln214_5_fu_4287_p1;
wire   [287:0] zext_ln214_6_fu_4291_p1;
wire   [287:0] lshr_ln214_2_fu_4295_p2;
wire   [287:0] lshr_ln214_3_fu_4301_p2;
wire   [287:0] and_ln214_1_fu_4307_p2;
wire   [4:0] or_ln214_1_fu_4317_p2;
wire   [7:0] p_shl3_fu_4327_p3;
wire   [8:0] zext_ln214_2_cast161_fu_4323_p1;
wire   [8:0] p_shl118_cast_fu_4335_p1;
wire   [8:0] empty_48_fu_4339_p2;
wire   [8:0] empty_49_fu_4345_p2;
wire   [0:0] icmp_ln214_2_fu_4351_p2;
wire   [8:0] sub_ln214_8_fu_4367_p2;
wire   [8:0] sub_ln214_10_fu_4379_p2;
reg   [287:0] tmp_539_fu_4357_p4;
wire   [8:0] sub_ln214_9_fu_4373_p2;
wire   [8:0] select_ln214_6_fu_4385_p3;
wire   [8:0] select_ln214_8_fu_4401_p3;
wire   [8:0] sub_ln214_11_fu_4409_p2;
wire   [287:0] select_ln214_7_fu_4393_p3;
wire   [287:0] zext_ln214_7_fu_4415_p1;
wire   [287:0] zext_ln214_8_fu_4419_p1;
wire   [287:0] lshr_ln214_4_fu_4423_p2;
wire   [287:0] lshr_ln214_5_fu_4429_p2;
wire   [287:0] and_ln214_2_fu_4435_p2;
wire   [4:0] or_ln214_2_fu_4445_p2;
wire   [7:0] p_shl4_fu_4455_p3;
wire   [8:0] zext_ln214_3_cast158_fu_4451_p1;
wire   [8:0] p_shl117_cast_fu_4463_p1;
wire   [8:0] empty_50_fu_4467_p2;
wire   [287:0] zext_ln214_9_fu_4473_p1;
wire   [287:0] lshr_ln214_6_fu_4477_p2;
wire   [4:0] or_ln214_3_fu_4487_p2;
wire   [2:0] tmp_379_fu_4493_p4;
wire   [7:0] tmp_380_fu_4503_p3;
wire   [7:0] empty_51_fu_4511_p2;
wire   [8:0] zext_ln214_10_fu_4523_p1;
wire   [8:0] zext_ln214_11_fu_4527_p1;
wire   [0:0] icmp_ln214_3_fu_4517_p2;
wire   [8:0] sub_ln214_12_fu_4541_p2;
wire   [8:0] sub_ln214_14_fu_4553_p2;
reg   [287:0] tmp_540_fu_4531_p4;
wire   [8:0] sub_ln214_13_fu_4547_p2;
wire   [8:0] select_ln214_9_fu_4559_p3;
wire   [8:0] select_ln214_11_fu_4575_p3;
wire   [8:0] sub_ln214_15_fu_4583_p2;
wire   [287:0] select_ln214_10_fu_4567_p3;
wire   [287:0] zext_ln214_12_fu_4589_p1;
wire   [287:0] zext_ln214_13_fu_4593_p1;
wire   [287:0] lshr_ln214_7_fu_4597_p2;
wire   [287:0] lshr_ln214_8_fu_4603_p2;
wire   [287:0] and_ln214_3_fu_4609_p2;
wire   [4:0] or_ln214_4_fu_4619_p2;
wire   [2:0] tmp_381_fu_4631_p4;
wire   [4:0] empty_52_fu_4625_p2;
wire   [7:0] tmp_382_fu_4641_p3;
wire   [8:0] empty_53_fu_4649_p1;
wire   [8:0] empty_54_fu_4657_p2;
wire   [9:0] p_cast151_fu_4653_p1;
wire   [9:0] p_cast150_fu_4663_p1;
wire   [8:0] zext_ln214_14_fu_4673_p1;
wire   [0:0] icmp_ln214_4_fu_4667_p2;
wire   [8:0] sub_ln214_16_fu_4687_p2;
wire   [8:0] sub_ln214_18_fu_4699_p2;
reg   [287:0] tmp_541_fu_4677_p4;
wire   [8:0] sub_ln214_17_fu_4693_p2;
wire   [8:0] select_ln214_12_fu_4705_p3;
wire   [8:0] select_ln214_14_fu_4721_p3;
wire   [8:0] sub_ln214_19_fu_4729_p2;
wire   [287:0] select_ln214_13_fu_4713_p3;
wire   [287:0] zext_ln214_15_fu_4735_p1;
wire   [287:0] zext_ln214_16_fu_4739_p1;
wire   [287:0] lshr_ln214_9_fu_4743_p2;
wire   [287:0] lshr_ln214_10_fu_4749_p2;
wire   [287:0] and_ln214_4_fu_4755_p2;
wire   [4:0] or_ln214_5_fu_4765_p2;
wire   [7:0] p_shl5_fu_4775_p3;
wire   [8:0] zext_ln214_6_cast149_fu_4771_p1;
wire   [8:0] p_shl114_cast_fu_4783_p1;
wire   [8:0] empty_55_fu_4787_p2;
wire   [8:0] empty_56_fu_4793_p2;
wire   [0:0] icmp_ln214_5_fu_4799_p2;
wire   [8:0] sub_ln214_20_fu_4815_p2;
wire   [8:0] sub_ln214_22_fu_4827_p2;
reg   [287:0] tmp_542_fu_4805_p4;
wire   [8:0] sub_ln214_21_fu_4821_p2;
wire   [8:0] select_ln214_15_fu_4833_p3;
wire   [8:0] select_ln214_17_fu_4849_p3;
wire   [8:0] sub_ln214_23_fu_4857_p2;
wire   [287:0] select_ln214_16_fu_4841_p3;
wire   [287:0] zext_ln214_17_fu_4863_p1;
wire   [287:0] zext_ln214_18_fu_4867_p1;
wire   [287:0] lshr_ln214_11_fu_4871_p2;
wire   [287:0] lshr_ln214_12_fu_4877_p2;
wire   [287:0] and_ln214_5_fu_4883_p2;
wire   [4:0] or_ln214_6_fu_4893_p2;
wire   [7:0] p_shl6_fu_4903_p3;
wire   [8:0] zext_ln214_7_cast146_fu_4899_p1;
wire   [8:0] p_shl113_cast_fu_4911_p1;
wire   [8:0] empty_57_fu_4915_p2;
wire   [287:0] zext_ln214_19_fu_4921_p1;
wire   [287:0] lshr_ln214_13_fu_4925_p2;
wire   [4:0] or_ln214_7_fu_4935_p2;
wire   [2:0] tmp_383_fu_4941_p4;
wire   [7:0] tmp_384_fu_4951_p3;
wire   [8:0] empty_58_fu_4959_p1;
wire   [8:0] empty_59_fu_4967_p2;
wire   [9:0] p_cast142_fu_4963_p1;
wire   [9:0] p_cast141_fu_4973_p1;
wire   [8:0] zext_ln214_20_fu_4983_p1;
wire   [0:0] icmp_ln214_6_fu_4977_p2;
wire   [8:0] sub_ln214_24_fu_4997_p2;
wire   [8:0] sub_ln214_26_fu_5009_p2;
reg   [287:0] tmp_543_fu_4987_p4;
wire   [8:0] sub_ln214_25_fu_5003_p2;
wire   [8:0] select_ln214_18_fu_5015_p3;
wire   [8:0] select_ln214_20_fu_5031_p3;
wire   [8:0] sub_ln214_27_fu_5039_p2;
wire   [287:0] select_ln214_19_fu_5023_p3;
wire   [287:0] zext_ln214_21_fu_5045_p1;
wire   [287:0] zext_ln214_22_fu_5049_p1;
wire   [287:0] lshr_ln214_14_fu_5053_p2;
wire   [287:0] lshr_ln214_15_fu_5059_p2;
wire   [287:0] and_ln214_6_fu_5065_p2;
wire   [7:0] p_shl7_fu_5079_p3;
wire   [8:0] zext_ln214_9_cast140_fu_5075_p1;
wire   [8:0] p_shl111_cast_fu_5087_p1;
wire   [8:0] empty_60_fu_5091_p2;
wire   [287:0] zext_ln214_23_fu_5097_p1;
wire   [287:0] lshr_ln214_16_fu_5101_p2;
wire   [4:0] or_ln214_8_fu_5111_p2;
wire   [7:0] p_shl8_fu_5121_p3;
wire   [8:0] zext_ln214_10_cast13_fu_5117_p1;
wire   [8:0] p_shl110_cast_fu_5129_p1;
wire   [8:0] empty_61_fu_5133_p2;
wire   [287:0] zext_ln214_24_fu_5139_p1;
wire   [287:0] lshr_ln214_17_fu_5143_p2;
wire   [4:0] or_ln214_9_fu_5153_p2;
wire   [7:0] p_shl9_fu_5163_p3;
wire   [8:0] zext_ln214_11_cast13_fu_5159_p1;
wire   [8:0] p_shl109_cast_fu_5171_p1;
wire   [8:0] empty_62_fu_5175_p2;
wire   [287:0] zext_ln214_25_fu_5181_p1;
wire   [287:0] lshr_ln214_18_fu_5185_p2;
wire   [4:0] or_ln214_10_fu_5195_p2;
wire   [2:0] tmp_385_fu_5201_p4;
wire   [7:0] tmp_386_fu_5211_p3;
wire   [8:0] empty_63_fu_5219_p1;
wire   [8:0] empty_64_fu_5227_p2;
wire   [9:0] p_cast130_fu_5223_p1;
wire   [9:0] p_cast129_fu_5233_p1;
wire   [8:0] zext_ln214_26_fu_5243_p1;
wire   [0:0] icmp_ln214_7_fu_5237_p2;
wire   [8:0] sub_ln214_28_fu_5257_p2;
wire   [8:0] sub_ln214_30_fu_5269_p2;
reg   [287:0] tmp_544_fu_5247_p4;
wire   [8:0] sub_ln214_29_fu_5263_p2;
wire   [8:0] select_ln214_21_fu_5275_p3;
wire   [8:0] select_ln214_23_fu_5291_p3;
wire   [8:0] sub_ln214_31_fu_5299_p2;
wire   [287:0] select_ln214_22_fu_5283_p3;
wire   [287:0] zext_ln214_27_fu_5305_p1;
wire   [287:0] zext_ln214_28_fu_5309_p1;
wire   [287:0] lshr_ln214_19_fu_5313_p2;
wire   [287:0] lshr_ln214_20_fu_5319_p2;
wire   [287:0] and_ln214_7_fu_5325_p2;
wire   [7:0] p_shl_fu_5339_p3;
wire   [8:0] zext_ln214_13_cast12_fu_5335_p1;
wire   [8:0] p_shl107_cast_fu_5347_p1;
wire   [8:0] empty_65_fu_5351_p2;
wire   [287:0] zext_ln214_29_fu_5357_p1;
wire   [287:0] lshr_ln214_21_fu_5361_p2;
wire   [4:0] or_ln214_11_fu_5371_p2;
wire   [7:0] p_shl1_fu_5381_p3;
wire   [8:0] zext_ln214_14_cast12_fu_5377_p1;
wire   [8:0] p_shl106_cast_fu_5389_p1;
wire   [8:0] empty_66_fu_5393_p2;
wire   [287:0] zext_ln214_30_fu_5399_p1;
wire   [287:0] lshr_ln214_22_fu_5403_p2;
wire   [4:0] or_ln214_12_fu_5413_p2;
wire   [7:0] p_shl2_fu_5423_p3;
wire   [8:0] zext_ln214_15_cast12_fu_5419_p1;
wire   [8:0] p_shl105_cast_fu_5431_p1;
wire   [8:0] empty_67_fu_5435_p2;
wire   [287:0] zext_ln214_31_fu_5441_p1;
wire   [287:0] lshr_ln214_23_fu_5445_p2;
wire   [7:0] trunc_ln214_16_fu_5451_p1;
wire   [7:0] trunc_ln214_15_fu_5409_p1;
wire   [7:0] trunc_ln214_14_fu_5367_p1;
wire   [7:0] trunc_ln214_13_fu_5331_p1;
wire   [7:0] trunc_ln214_12_fu_5191_p1;
wire   [7:0] trunc_ln214_11_fu_5149_p1;
wire   [7:0] trunc_ln214_10_fu_5107_p1;
wire   [7:0] trunc_ln214_9_fu_5071_p1;
wire   [7:0] trunc_ln214_8_fu_4931_p1;
wire   [7:0] trunc_ln214_7_fu_4889_p1;
wire   [7:0] trunc_ln214_6_fu_4761_p1;
wire   [7:0] trunc_ln214_5_fu_4615_p1;
wire   [7:0] trunc_ln214_4_fu_4483_p1;
wire   [7:0] trunc_ln214_3_fu_4441_p1;
wire   [7:0] trunc_ln214_2_fu_4313_p1;
wire   [7:0] trunc_ln214_1_fu_4167_p1;
wire   [127:0] tmp_369_fu_5455_p17;
reg    grp_fu_1384_ce;
reg    grp_fu_1389_ce;
reg    grp_fu_1394_ce;
reg    grp_fu_1399_ce;
reg    grp_fu_1404_ce;
reg    grp_fu_1409_ce;
reg    grp_fu_1414_ce;
reg    grp_fu_1419_ce;
reg    ap_block_state42;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 input_V_0_sel_rd = 1'b0;
#0 input_V_0_sel_wr = 1'b0;
#0 input_V_0_state = 2'd0;
#0 sw0out_V_1_sel_rd = 1'b0;
#0 sw0out_V_1_sel_wr = 1'b0;
#0 sw0out_V_1_state = 2'd0;
#0 startt_V_1_sel_rd = 1'b0;
#0 startt_V_1_state = 2'd0;
#0 stopt_V_1_sel_rd = 1'b0;
#0 stopt_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 grp_conv_layer_fu_851_ap_start_reg = 1'b0;
#0 grp_add_fu_891_ap_start_reg = 1'b0;
#0 grp_conv1_fu_914_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_conv1_fu_914_ap_ready = 1'b0;
#0 ap_sync_reg_grp_conv1_fu_914_ap_done = 1'b0;
#0 grp_maxpool_fu_1304_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1312_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1321_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1330_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1339_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1348_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1357_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1366_ap_start_reg = 1'b0;
#0 grp_roundf_fu_1375_ap_start_reg = 1'b0;
end

resnet50_0_inbuf_V #(
    .DataWidth( 216 ),
    .AddressRange( 6272 ),
    .AddressWidth( 13 ))
inbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inbuf_V_address0),
    .ce0(inbuf_V_ce0),
    .q0(inbuf_V_q0),
    .address1(inbuf_V_addr_reg_5633_pp0_iter11_reg),
    .ce1(inbuf_V_ce1),
    .we1(inbuf_V_we1),
    .d1(inbuf_V_d1)
);

resnet50_0_buf1_V #(
    .DataWidth( 288 ),
    .AddressRange( 25088 ),
    .AddressWidth( 15 ))
buf1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf1_V_address0),
    .ce0(buf1_V_ce0),
    .q0(buf1_V_q0),
    .address1(buf1_V_address1),
    .ce1(buf1_V_ce1),
    .we1(buf1_V_we1),
    .d1(buf1_V_d1),
    .q1(buf1_V_q1)
);

resnet50_0_buf0_V #(
    .DataWidth( 288 ),
    .AddressRange( 25088 ),
    .AddressWidth( 15 ))
buf0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf0_V_address0),
    .ce0(buf0_V_ce0),
    .q0(buf0_V_q0),
    .address1(buf0_V_address1),
    .ce1(buf0_V_ce1),
    .we1(buf0_V_we1),
    .d1(buf0_V_d1)
);

resnet50_0_buf0_V #(
    .DataWidth( 288 ),
    .AddressRange( 25088 ),
    .AddressWidth( 15 ))
buf2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf2_V_address0),
    .ce0(buf2_V_ce0),
    .q0(buf2_V_q0),
    .address1(buf2_V_address1),
    .ce1(buf2_V_ce1),
    .we1(buf2_V_we1),
    .d1(buf2_V_d1)
);

resnet50_0_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
resnet50_0_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

resnet50_0_ddr_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DDR_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DDR_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DDR_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DDR_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DDR_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DDR_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DDR_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DDR_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DDR_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DDR_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR_V_CACHE_VALUE ))
resnet50_0_ddr_V_m_axi_U(
    .AWVALID(m_axi_ddr_V_AWVALID),
    .AWREADY(m_axi_ddr_V_AWREADY),
    .AWADDR(m_axi_ddr_V_AWADDR),
    .AWID(m_axi_ddr_V_AWID),
    .AWLEN(m_axi_ddr_V_AWLEN),
    .AWSIZE(m_axi_ddr_V_AWSIZE),
    .AWBURST(m_axi_ddr_V_AWBURST),
    .AWLOCK(m_axi_ddr_V_AWLOCK),
    .AWCACHE(m_axi_ddr_V_AWCACHE),
    .AWPROT(m_axi_ddr_V_AWPROT),
    .AWQOS(m_axi_ddr_V_AWQOS),
    .AWREGION(m_axi_ddr_V_AWREGION),
    .AWUSER(m_axi_ddr_V_AWUSER),
    .WVALID(m_axi_ddr_V_WVALID),
    .WREADY(m_axi_ddr_V_WREADY),
    .WDATA(m_axi_ddr_V_WDATA),
    .WSTRB(m_axi_ddr_V_WSTRB),
    .WLAST(m_axi_ddr_V_WLAST),
    .WID(m_axi_ddr_V_WID),
    .WUSER(m_axi_ddr_V_WUSER),
    .ARVALID(m_axi_ddr_V_ARVALID),
    .ARREADY(m_axi_ddr_V_ARREADY),
    .ARADDR(m_axi_ddr_V_ARADDR),
    .ARID(m_axi_ddr_V_ARID),
    .ARLEN(m_axi_ddr_V_ARLEN),
    .ARSIZE(m_axi_ddr_V_ARSIZE),
    .ARBURST(m_axi_ddr_V_ARBURST),
    .ARLOCK(m_axi_ddr_V_ARLOCK),
    .ARCACHE(m_axi_ddr_V_ARCACHE),
    .ARPROT(m_axi_ddr_V_ARPROT),
    .ARQOS(m_axi_ddr_V_ARQOS),
    .ARREGION(m_axi_ddr_V_ARREGION),
    .ARUSER(m_axi_ddr_V_ARUSER),
    .RVALID(m_axi_ddr_V_RVALID),
    .RREADY(m_axi_ddr_V_RREADY),
    .RDATA(m_axi_ddr_V_RDATA),
    .RLAST(m_axi_ddr_V_RLAST),
    .RID(m_axi_ddr_V_RID),
    .RUSER(m_axi_ddr_V_RUSER),
    .RRESP(m_axi_ddr_V_RRESP),
    .BVALID(m_axi_ddr_V_BVALID),
    .BREADY(m_axi_ddr_V_BREADY),
    .BRESP(m_axi_ddr_V_BRESP),
    .BID(m_axi_ddr_V_BID),
    .BUSER(m_axi_ddr_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ddr_V_ARVALID),
    .I_ARREADY(ddr_V_ARREADY),
    .I_ARADDR(grp_conv_layer_fu_851_m_axi_ddr_V_ARADDR),
    .I_ARID(grp_conv_layer_fu_851_m_axi_ddr_V_ARID),
    .I_ARLEN(grp_conv_layer_fu_851_m_axi_ddr_V_ARLEN),
    .I_ARSIZE(grp_conv_layer_fu_851_m_axi_ddr_V_ARSIZE),
    .I_ARLOCK(grp_conv_layer_fu_851_m_axi_ddr_V_ARLOCK),
    .I_ARCACHE(grp_conv_layer_fu_851_m_axi_ddr_V_ARCACHE),
    .I_ARQOS(grp_conv_layer_fu_851_m_axi_ddr_V_ARQOS),
    .I_ARPROT(grp_conv_layer_fu_851_m_axi_ddr_V_ARPROT),
    .I_ARUSER(grp_conv_layer_fu_851_m_axi_ddr_V_ARUSER),
    .I_ARBURST(grp_conv_layer_fu_851_m_axi_ddr_V_ARBURST),
    .I_ARREGION(grp_conv_layer_fu_851_m_axi_ddr_V_ARREGION),
    .I_RVALID(ddr_V_RVALID),
    .I_RREADY(ddr_V_RREADY),
    .I_RDATA(ddr_V_RDATA),
    .I_RID(ddr_V_RID),
    .I_RUSER(ddr_V_RUSER),
    .I_RRESP(ddr_V_RRESP),
    .I_RLAST(ddr_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ddr_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ddr_V_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(ddr_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ddr_V_BRESP),
    .I_BID(ddr_V_BID),
    .I_BUSER(ddr_V_BUSER)
);

conv_layer grp_conv_layer_fu_851(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_layer_fu_851_ap_start),
    .ap_done(grp_conv_layer_fu_851_ap_done),
    .ap_idle(grp_conv_layer_fu_851_ap_idle),
    .ap_ready(grp_conv_layer_fu_851_ap_ready),
    .input_V_address0(grp_conv_layer_fu_851_input_V_address0),
    .input_V_ce0(grp_conv_layer_fu_851_input_V_ce0),
    .input_V_q0(grp_conv_layer_fu_851_input_V_q0),
    .output_V_address1(grp_conv_layer_fu_851_output_V_address1),
    .output_V_ce1(grp_conv_layer_fu_851_output_V_ce1),
    .output_V_we1(grp_conv_layer_fu_851_output_V_we1),
    .output_V_d1(grp_conv_layer_fu_851_output_V_d1),
    .m_axi_ddr_V_AWVALID(grp_conv_layer_fu_851_m_axi_ddr_V_AWVALID),
    .m_axi_ddr_V_AWREADY(1'b0),
    .m_axi_ddr_V_AWADDR(grp_conv_layer_fu_851_m_axi_ddr_V_AWADDR),
    .m_axi_ddr_V_AWID(grp_conv_layer_fu_851_m_axi_ddr_V_AWID),
    .m_axi_ddr_V_AWLEN(grp_conv_layer_fu_851_m_axi_ddr_V_AWLEN),
    .m_axi_ddr_V_AWSIZE(grp_conv_layer_fu_851_m_axi_ddr_V_AWSIZE),
    .m_axi_ddr_V_AWBURST(grp_conv_layer_fu_851_m_axi_ddr_V_AWBURST),
    .m_axi_ddr_V_AWLOCK(grp_conv_layer_fu_851_m_axi_ddr_V_AWLOCK),
    .m_axi_ddr_V_AWCACHE(grp_conv_layer_fu_851_m_axi_ddr_V_AWCACHE),
    .m_axi_ddr_V_AWPROT(grp_conv_layer_fu_851_m_axi_ddr_V_AWPROT),
    .m_axi_ddr_V_AWQOS(grp_conv_layer_fu_851_m_axi_ddr_V_AWQOS),
    .m_axi_ddr_V_AWREGION(grp_conv_layer_fu_851_m_axi_ddr_V_AWREGION),
    .m_axi_ddr_V_AWUSER(grp_conv_layer_fu_851_m_axi_ddr_V_AWUSER),
    .m_axi_ddr_V_WVALID(grp_conv_layer_fu_851_m_axi_ddr_V_WVALID),
    .m_axi_ddr_V_WREADY(1'b0),
    .m_axi_ddr_V_WDATA(grp_conv_layer_fu_851_m_axi_ddr_V_WDATA),
    .m_axi_ddr_V_WSTRB(grp_conv_layer_fu_851_m_axi_ddr_V_WSTRB),
    .m_axi_ddr_V_WLAST(grp_conv_layer_fu_851_m_axi_ddr_V_WLAST),
    .m_axi_ddr_V_WID(grp_conv_layer_fu_851_m_axi_ddr_V_WID),
    .m_axi_ddr_V_WUSER(grp_conv_layer_fu_851_m_axi_ddr_V_WUSER),
    .m_axi_ddr_V_ARVALID(grp_conv_layer_fu_851_m_axi_ddr_V_ARVALID),
    .m_axi_ddr_V_ARREADY(ddr_V_ARREADY),
    .m_axi_ddr_V_ARADDR(grp_conv_layer_fu_851_m_axi_ddr_V_ARADDR),
    .m_axi_ddr_V_ARID(grp_conv_layer_fu_851_m_axi_ddr_V_ARID),
    .m_axi_ddr_V_ARLEN(grp_conv_layer_fu_851_m_axi_ddr_V_ARLEN),
    .m_axi_ddr_V_ARSIZE(grp_conv_layer_fu_851_m_axi_ddr_V_ARSIZE),
    .m_axi_ddr_V_ARBURST(grp_conv_layer_fu_851_m_axi_ddr_V_ARBURST),
    .m_axi_ddr_V_ARLOCK(grp_conv_layer_fu_851_m_axi_ddr_V_ARLOCK),
    .m_axi_ddr_V_ARCACHE(grp_conv_layer_fu_851_m_axi_ddr_V_ARCACHE),
    .m_axi_ddr_V_ARPROT(grp_conv_layer_fu_851_m_axi_ddr_V_ARPROT),
    .m_axi_ddr_V_ARQOS(grp_conv_layer_fu_851_m_axi_ddr_V_ARQOS),
    .m_axi_ddr_V_ARREGION(grp_conv_layer_fu_851_m_axi_ddr_V_ARREGION),
    .m_axi_ddr_V_ARUSER(grp_conv_layer_fu_851_m_axi_ddr_V_ARUSER),
    .m_axi_ddr_V_RVALID(ddr_V_RVALID),
    .m_axi_ddr_V_RREADY(grp_conv_layer_fu_851_m_axi_ddr_V_RREADY),
    .m_axi_ddr_V_RDATA(ddr_V_RDATA),
    .m_axi_ddr_V_RLAST(ddr_V_RLAST),
    .m_axi_ddr_V_RID(ddr_V_RID),
    .m_axi_ddr_V_RUSER(ddr_V_RUSER),
    .m_axi_ddr_V_RRESP(ddr_V_RRESP),
    .m_axi_ddr_V_BVALID(1'b0),
    .m_axi_ddr_V_BREADY(grp_conv_layer_fu_851_m_axi_ddr_V_BREADY),
    .m_axi_ddr_V_BRESP(2'd0),
    .m_axi_ddr_V_BID(1'd0),
    .m_axi_ddr_V_BUSER(1'd0),
    .TO_r(grp_conv_layer_fu_851_TO_r),
    .TI(grp_conv_layer_fu_851_TI),
    .K(grp_conv_layer_fu_851_K),
    .P(grp_conv_layer_fu_851_P),
    .OFFSET(grp_conv_layer_fu_851_OFFSET)
);

add grp_add_fu_891(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_add_fu_891_ap_start),
    .ap_done(grp_add_fu_891_ap_done),
    .ap_idle(grp_add_fu_891_ap_idle),
    .ap_ready(grp_add_fu_891_ap_ready),
    .input1_V_address0(grp_add_fu_891_input1_V_address0),
    .input1_V_ce0(grp_add_fu_891_input1_V_ce0),
    .input1_V_q0(grp_add_fu_891_input1_V_q0),
    .input2_V_address0(grp_add_fu_891_input2_V_address0),
    .input2_V_ce0(grp_add_fu_891_input2_V_ce0),
    .input2_V_q0(grp_add_fu_891_input2_V_q0),
    .output_V_address1(grp_add_fu_891_output_V_address1),
    .output_V_ce1(grp_add_fu_891_output_V_ce1),
    .output_V_we1(grp_add_fu_891_output_V_we1),
    .output_V_d1(grp_add_fu_891_output_V_d1),
    .SCALE1(grp_add_fu_891_SCALE1),
    .SCALE2(grp_add_fu_891_SCALE2)
);

conv1 grp_conv1_fu_914(
    .input_V_address0(grp_conv1_fu_914_input_V_address0),
    .input_V_ce0(grp_conv1_fu_914_input_V_ce0),
    .input_V_d0(grp_conv1_fu_914_input_V_d0),
    .input_V_q0(inbuf_V_q0),
    .input_V_we0(grp_conv1_fu_914_input_V_we0),
    .input_V_address1(grp_conv1_fu_914_input_V_address1),
    .input_V_ce1(grp_conv1_fu_914_input_V_ce1),
    .input_V_d1(grp_conv1_fu_914_input_V_d1),
    .input_V_q1(216'd0),
    .input_V_we1(grp_conv1_fu_914_input_V_we1),
    .output_V_address0(grp_conv1_fu_914_output_V_address0),
    .output_V_ce0(grp_conv1_fu_914_output_V_ce0),
    .output_V_d0(grp_conv1_fu_914_output_V_d0),
    .output_V_q0(288'd0),
    .output_V_we0(grp_conv1_fu_914_output_V_we0),
    .output_V_address1(grp_conv1_fu_914_output_V_address1),
    .output_V_ce1(grp_conv1_fu_914_output_V_ce1),
    .output_V_d1(grp_conv1_fu_914_output_V_d1),
    .output_V_q1(288'd0),
    .output_V_we1(grp_conv1_fu_914_output_V_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv1_fu_914_ap_start),
    .ap_done(grp_conv1_fu_914_ap_done),
    .ap_ready(grp_conv1_fu_914_ap_ready),
    .ap_idle(grp_conv1_fu_914_ap_idle),
    .ap_continue(grp_conv1_fu_914_ap_continue)
);

maxpool grp_maxpool_fu_1304(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_maxpool_fu_1304_ap_start),
    .ap_done(grp_maxpool_fu_1304_ap_done),
    .ap_idle(grp_maxpool_fu_1304_ap_idle),
    .ap_ready(grp_maxpool_fu_1304_ap_ready),
    .buf0_V_address1(grp_maxpool_fu_1304_buf0_V_address1),
    .buf0_V_ce1(grp_maxpool_fu_1304_buf0_V_ce1),
    .buf0_V_we1(grp_maxpool_fu_1304_buf0_V_we1),
    .buf0_V_d1(grp_maxpool_fu_1304_buf0_V_d1),
    .buf1_V_address0(grp_maxpool_fu_1304_buf1_V_address0),
    .buf1_V_ce0(grp_maxpool_fu_1304_buf1_V_ce0),
    .buf1_V_q0(buf1_V_q0),
    .buf1_V_address1(grp_maxpool_fu_1304_buf1_V_address1),
    .buf1_V_ce1(grp_maxpool_fu_1304_buf1_V_ce1),
    .buf1_V_q1(buf1_V_q1)
);

roundf grp_roundf_fu_1312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1312_ap_start),
    .ap_done(grp_roundf_fu_1312_ap_done),
    .ap_idle(grp_roundf_fu_1312_ap_idle),
    .ap_ready(grp_roundf_fu_1312_ap_ready),
    .ap_ce(grp_roundf_fu_1312_ap_ce),
    .x(tmp345_reg_5592),
    .ap_return(grp_roundf_fu_1312_ap_return)
);

roundf grp_roundf_fu_1321(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1321_ap_start),
    .ap_done(grp_roundf_fu_1321_ap_done),
    .ap_idle(grp_roundf_fu_1321_ap_idle),
    .ap_ready(grp_roundf_fu_1321_ap_ready),
    .ap_ce(grp_roundf_fu_1321_ap_ce),
    .x(tmp_1_reg_5597),
    .ap_return(grp_roundf_fu_1321_ap_return)
);

roundf grp_roundf_fu_1330(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1330_ap_start),
    .ap_done(grp_roundf_fu_1330_ap_done),
    .ap_idle(grp_roundf_fu_1330_ap_idle),
    .ap_ready(grp_roundf_fu_1330_ap_ready),
    .ap_ce(grp_roundf_fu_1330_ap_ce),
    .x(tmp_2_reg_5602),
    .ap_return(grp_roundf_fu_1330_ap_return)
);

roundf grp_roundf_fu_1339(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1339_ap_start),
    .ap_done(grp_roundf_fu_1339_ap_done),
    .ap_idle(grp_roundf_fu_1339_ap_idle),
    .ap_ready(grp_roundf_fu_1339_ap_ready),
    .ap_ce(grp_roundf_fu_1339_ap_ce),
    .x(tmp_3_reg_5607),
    .ap_return(grp_roundf_fu_1339_ap_return)
);

roundf grp_roundf_fu_1348(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1348_ap_start),
    .ap_done(grp_roundf_fu_1348_ap_done),
    .ap_idle(grp_roundf_fu_1348_ap_idle),
    .ap_ready(grp_roundf_fu_1348_ap_ready),
    .ap_ce(grp_roundf_fu_1348_ap_ce),
    .x(tmp_4_reg_5612),
    .ap_return(grp_roundf_fu_1348_ap_return)
);

roundf grp_roundf_fu_1357(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1357_ap_start),
    .ap_done(grp_roundf_fu_1357_ap_done),
    .ap_idle(grp_roundf_fu_1357_ap_idle),
    .ap_ready(grp_roundf_fu_1357_ap_ready),
    .ap_ce(grp_roundf_fu_1357_ap_ce),
    .x(tmp_5_reg_5644),
    .ap_return(grp_roundf_fu_1357_ap_return)
);

roundf grp_roundf_fu_1366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1366_ap_start),
    .ap_done(grp_roundf_fu_1366_ap_done),
    .ap_idle(grp_roundf_fu_1366_ap_idle),
    .ap_ready(grp_roundf_fu_1366_ap_ready),
    .ap_ce(grp_roundf_fu_1366_ap_ce),
    .x(tmp_6_reg_5649),
    .ap_return(grp_roundf_fu_1366_ap_return)
);

roundf grp_roundf_fu_1375(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_roundf_fu_1375_ap_start),
    .ap_done(grp_roundf_fu_1375_ap_done),
    .ap_idle(grp_roundf_fu_1375_ap_idle),
    .ap_ready(grp_roundf_fu_1375_ap_ready),
    .ap_ce(grp_roundf_fu_1375_ap_ce),
    .x(tmp_7_reg_5654),
    .ap_return(grp_roundf_fu_1375_ap_return)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4151(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1384_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1384_ce),
    .dout(grp_fu_1384_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4152(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1389_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1389_ce),
    .dout(grp_fu_1389_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4153(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1394_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1394_ce),
    .dout(grp_fu_1394_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4154(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1399_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1399_ce),
    .dout(grp_fu_1399_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4155(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1404_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1404_ce),
    .dout(grp_fu_1404_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4156(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1409_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1409_ce),
    .dout(grp_fu_1409_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4157(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1414_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1414_ce),
    .dout(grp_fu_1414_p2)
);

resnet50_0_fdiv_32ns_32ns_32_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
resnet50_0_fdiv_32ns_32ns_32_8_1_U4158(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1419_p0),
    .din1(32'd1025075893),
    .ce(grp_fu_1419_ce),
    .dout(grp_fu_1419_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state38)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_conv1_fu_914_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_block_state17_on_subcall_done))) begin
            ap_sync_reg_grp_conv1_fu_914_ap_done <= 1'b0;
        end else if ((grp_conv1_fu_914_ap_done == 1'b1)) begin
            ap_sync_reg_grp_conv1_fu_914_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_conv1_fu_914_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_block_state17_on_subcall_done))) begin
            ap_sync_reg_grp_conv1_fu_914_ap_ready <= 1'b0;
        end else if ((grp_conv1_fu_914_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_conv1_fu_914_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_add_fu_891_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28))) begin
            grp_add_fu_891_ap_start_reg <= 1'b1;
        end else if ((grp_add_fu_891_ap_ready == 1'b1)) begin
            grp_add_fu_891_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv1_fu_914_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state16) | ((ap_sync_grp_conv1_fu_914_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state17)))) begin
            grp_conv1_fu_914_ap_start_reg <= 1'b1;
        end else if ((grp_conv1_fu_914_ap_ready == 1'b1)) begin
            grp_conv1_fu_914_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_layer_fu_851_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
            grp_conv_layer_fu_851_ap_start_reg <= 1'b1;
        end else if ((grp_conv_layer_fu_851_ap_ready == 1'b1)) begin
            grp_conv_layer_fu_851_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_maxpool_fu_1304_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_maxpool_fu_1304_ap_start_reg <= 1'b1;
        end else if ((grp_maxpool_fu_1304_ap_ready == 1'b1)) begin
            grp_maxpool_fu_1304_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1312_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            grp_roundf_fu_1312_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1312_ap_ready == 1'b1)) begin
            grp_roundf_fu_1312_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1321_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            grp_roundf_fu_1321_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1321_ap_ready == 1'b1)) begin
            grp_roundf_fu_1321_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1330_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
            grp_roundf_fu_1330_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1330_ap_ready == 1'b1)) begin
            grp_roundf_fu_1330_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1339_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
            grp_roundf_fu_1339_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1339_ap_ready == 1'b1)) begin
            grp_roundf_fu_1339_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1348_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
            grp_roundf_fu_1348_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1348_ap_ready == 1'b1)) begin
            grp_roundf_fu_1348_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1357_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
            grp_roundf_fu_1357_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1357_ap_ready == 1'b1)) begin
            grp_roundf_fu_1357_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1366_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
            grp_roundf_fu_1366_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1366_ap_ready == 1'b1)) begin
            grp_roundf_fu_1366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_roundf_fu_1375_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_reg_5513_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
            grp_roundf_fu_1375_ap_start_reg <= 1'b1;
        end else if ((grp_roundf_fu_1375_ap_ready == 1'b1)) begin
            grp_roundf_fu_1375_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_0_ack_out == 1'b1) & (input_V_0_vld_out == 1'b1))) begin
            input_V_0_sel_rd <= ~input_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_0_ack_in == 1'b1) & (input_V_0_vld_in == 1'b1))) begin
            input_V_0_sel_wr <= ~input_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_0_state == 2'd2) & (input_V_0_vld_in == 1'b0)) | ((input_V_0_state == 2'd3) & (input_V_0_vld_in == 1'b0) & (input_V_0_ack_out == 1'b1)))) begin
            input_V_0_state <= 2'd2;
        end else if ((((input_V_0_state == 2'd1) & (input_V_0_ack_out == 1'b0)) | ((input_V_0_state == 2'd3) & (input_V_0_ack_out == 1'b0) & (input_V_0_vld_in == 1'b1)))) begin
            input_V_0_state <= 2'd1;
        end else if (((~((input_V_0_vld_in == 1'b0) & (input_V_0_ack_out == 1'b1)) & ~((input_V_0_ack_out == 1'b0) & (input_V_0_vld_in == 1'b1)) & (input_V_0_state == 2'd3)) | ((input_V_0_state == 2'd1) & (input_V_0_ack_out == 1'b1)) | ((input_V_0_state == 2'd2) & (input_V_0_vld_in == 1'b1)))) begin
            input_V_0_state <= 2'd3;
        end else begin
            input_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        startt_V_1_sel_rd <= 1'b0;
    end else begin
        if (((startt_V_1_ack_out == 1'b1) & (startt_V_1_vld_out == 1'b1))) begin
            startt_V_1_sel_rd <= ~startt_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        startt_V_1_state <= 2'd0;
    end else begin
        if ((((startt_V_1_state == 2'd2) & (startt_V_1_vld_in == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_1_vld_in == 1'b0) & (startt_V_1_ack_out == 1'b1)))) begin
            startt_V_1_state <= 2'd2;
        end else if ((((startt_V_1_state == 2'd1) & (startt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0) & (startt_V_1_vld_in == 1'b1)))) begin
            startt_V_1_state <= 2'd1;
        end else if (((~((startt_V_1_vld_in == 1'b0) & (startt_V_1_ack_out == 1'b1)) & ~((startt_V_TREADY == 1'b0) & (startt_V_1_vld_in == 1'b1)) & (startt_V_1_state == 2'd3)) | ((startt_V_1_state == 2'd1) & (startt_V_1_ack_out == 1'b1)) | ((startt_V_1_state == 2'd2) & (startt_V_1_vld_in == 1'b1)))) begin
            startt_V_1_state <= 2'd3;
        end else begin
            startt_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stopt_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stopt_V_1_ack_out == 1'b1) & (stopt_V_1_vld_out == 1'b1))) begin
            stopt_V_1_sel_rd <= ~stopt_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stopt_V_1_state <= 2'd0;
    end else begin
        if ((((stopt_V_1_state == 2'd2) & (stopt_V_1_vld_in == 1'b0)) | ((stopt_V_1_state == 2'd3) & (stopt_V_1_vld_in == 1'b0) & (stopt_V_1_ack_out == 1'b1)))) begin
            stopt_V_1_state <= 2'd2;
        end else if ((((stopt_V_1_state == 2'd1) & (stopt_V_TREADY == 1'b0)) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0) & (stopt_V_1_vld_in == 1'b1)))) begin
            stopt_V_1_state <= 2'd1;
        end else if (((~((stopt_V_1_vld_in == 1'b0) & (stopt_V_1_ack_out == 1'b1)) & ~((stopt_V_TREADY == 1'b0) & (stopt_V_1_vld_in == 1'b1)) & (stopt_V_1_state == 2'd3)) | ((stopt_V_1_state == 2'd1) & (stopt_V_1_ack_out == 1'b1)) | ((stopt_V_1_state == 2'd2) & (stopt_V_1_vld_in == 1'b1)))) begin
            stopt_V_1_state <= 2'd3;
        end else begin
            stopt_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((sw0out_V_1_ack_out == 1'b1) & (sw0out_V_1_vld_out == 1'b1))) begin
            sw0out_V_1_sel_rd <= ~sw0out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((sw0out_V_1_ack_in == 1'b1) & (sw0out_V_1_vld_in == 1'b1))) begin
            sw0out_V_1_sel_wr <= ~sw0out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sw0out_V_1_state <= 2'd0;
    end else begin
        if ((((sw0out_V_1_state == 2'd2) & (sw0out_V_1_vld_in == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_1_vld_in == 1'b0) & (sw0out_V_1_ack_out == 1'b1)))) begin
            sw0out_V_1_state <= 2'd2;
        end else if ((((sw0out_V_1_state == 2'd1) & (sw0out_V_TREADY == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_TREADY == 1'b0) & (sw0out_V_1_vld_in == 1'b1)))) begin
            sw0out_V_1_state <= 2'd1;
        end else if (((~((sw0out_V_1_vld_in == 1'b0) & (sw0out_V_1_ack_out == 1'b1)) & ~((sw0out_V_TREADY == 1'b0) & (sw0out_V_1_vld_in == 1'b1)) & (sw0out_V_1_state == 2'd3)) | ((sw0out_V_1_state == 2'd1) & (sw0out_V_1_ack_out == 1'b1)) | ((sw0out_V_1_state == 2'd2) & (sw0out_V_1_vld_in == 1'b1)))) begin
            sw0out_V_1_state <= 2'd3;
        end else begin
            sw0out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        ch_0_reg_770 <= select_ln399_1_reg_5669;
    end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
        ch_0_reg_770 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        col_0_reg_806 <= col_reg_5659;
    end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
        col_0_reg_806 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_fu_3988_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_0_reg_840 <= i_fu_4037_p2;
    end else if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_0_reg_840 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_1424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten47_reg_759 <= add_ln395_fu_1430_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
        indvar_flatten47_reg_759 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_fu_3988_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten55_reg_818 <= add_ln425_fu_3994_p2;
    end else if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        indvar_flatten55_reg_818 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        indvar_flatten_reg_782 <= select_ln396_2_reg_5664;
    end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
        indvar_flatten_reg_782 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        row_0_reg_794 <= select_ln396_1_reg_5623;
    end else if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
        row_0_reg_794 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_reg_5756 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        s_0_reg_829 <= select_ln431_1_reg_5765;
    end else if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        s_0_reg_829 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bitcast_ln705_2_reg_5696 <= bitcast_ln705_2_fu_2287_p1;
        or_ln180_1_reg_5690 <= or_ln180_1_fu_2281_p2;
        select_ln284_65_reg_5701 <= select_ln284_65_fu_2481_p3;
        select_ln399_2_reg_5674[4 : 3] <= select_ln399_2_fu_1706_p3[4 : 3];
select_ln399_2_reg_5674[7 : 6] <= select_ln399_2_fu_1706_p3[7 : 6];
        val_assign_3_reg_5707 <= grp_roundf_fu_1339_ap_return;
        val_assign_4_reg_5712 <= grp_roundf_fu_1348_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bitcast_ln705_5_reg_5723 <= bitcast_ln705_5_fu_3138_p1;
        bitcast_ln705_6_reg_5734 <= bitcast_ln705_6_fu_3340_p1;
        or_ln180_4_reg_5717 <= or_ln180_4_fu_3132_p2;
        select_ln284_68_reg_5728 <= select_ln284_68_fu_3332_p3;
        select_ln284_69_reg_5739 <= select_ln284_69_fu_3534_p3;
        val_assign_7_reg_5745 <= grp_roundf_fu_1375_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        col_reg_5659 <= col_fu_1649_p2;
        select_ln396_1_reg_5623 <= select_ln396_1_fu_1596_p3;
        select_ln396_2_reg_5664 <= select_ln396_2_fu_1661_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln395_reg_5513 <= icmp_ln395_fu_1424_p2;
        icmp_ln395_reg_5513_pp0_iter1_reg <= icmp_ln395_reg_5513;
        p_Result_5_reg_5547_pp0_iter1_reg <= p_Result_5_reg_5547;
        p_Result_6_reg_5552_pp0_iter1_reg <= p_Result_6_reg_5552;
        p_Result_7_reg_5557_pp0_iter1_reg <= p_Result_7_reg_5557;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln395_reg_5513_pp0_iter10_reg <= icmp_ln395_reg_5513_pp0_iter9_reg;
        icmp_ln395_reg_5513_pp0_iter11_reg <= icmp_ln395_reg_5513_pp0_iter10_reg;
        icmp_ln395_reg_5513_pp0_iter2_reg <= icmp_ln395_reg_5513_pp0_iter1_reg;
        icmp_ln395_reg_5513_pp0_iter3_reg <= icmp_ln395_reg_5513_pp0_iter2_reg;
        icmp_ln395_reg_5513_pp0_iter4_reg <= icmp_ln395_reg_5513_pp0_iter3_reg;
        icmp_ln395_reg_5513_pp0_iter5_reg <= icmp_ln395_reg_5513_pp0_iter4_reg;
        icmp_ln395_reg_5513_pp0_iter6_reg <= icmp_ln395_reg_5513_pp0_iter5_reg;
        icmp_ln395_reg_5513_pp0_iter7_reg <= icmp_ln395_reg_5513_pp0_iter6_reg;
        icmp_ln395_reg_5513_pp0_iter8_reg <= icmp_ln395_reg_5513_pp0_iter7_reg;
        icmp_ln395_reg_5513_pp0_iter9_reg <= icmp_ln395_reg_5513_pp0_iter8_reg;
        inbuf_V_addr_reg_5633_pp0_iter10_reg <= inbuf_V_addr_reg_5633;
        inbuf_V_addr_reg_5633_pp0_iter11_reg <= inbuf_V_addr_reg_5633_pp0_iter10_reg;
        select_ln399_2_reg_5674_pp0_iter11_reg[4 : 3] <= select_ln399_2_reg_5674[4 : 3];
select_ln399_2_reg_5674_pp0_iter11_reg[7 : 6] <= select_ln399_2_reg_5674[7 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln396_reg_5617 <= icmp_ln396_fu_1544_p2;
        inbuf_V_addr_reg_5633 <= zext_ln180_3_fu_1644_p1;
        tmp_5_reg_5644 <= grp_fu_1409_p2;
        tmp_6_reg_5649 <= grp_fu_1414_p2;
        tmp_7_reg_5654 <= grp_fu_1419_p2;
        val_assign_1_reg_5639 <= grp_roundf_fu_1321_ap_return;
        val_assign_reg_5628 <= grp_roundf_fu_1312_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln425_reg_5756 <= icmp_ln425_fu_3988_p2;
        icmp_ln425_reg_5756_pp1_iter1_reg <= icmp_ln425_reg_5756;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_0_load_A == 1'b1)) begin
        input_V_0_payload_A <= input_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_0_load_B == 1'b1)) begin
        input_V_0_payload_B <= input_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_reg_5756 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_0106_1_fu_696 <= p_Result_30_s_fu_5491_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_1424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_2_reg_5532 <= {{input_V_0_data_out[95:64]}};
        p_Result_3_reg_5537 <= {{input_V_0_data_out[127:96]}};
        p_Result_4_reg_5542 <= {{input_V_0_data_out[159:128]}};
        p_Result_5_reg_5547 <= {{input_V_0_data_out[191:160]}};
        p_Result_6_reg_5552 <= {{input_V_0_data_out[223:192]}};
        p_Result_7_reg_5557 <= {{input_V_0_data_out[255:224]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        select_ln399_1_reg_5669 <= select_ln399_1_fu_1675_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_fu_3988_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln431_1_reg_5765 <= select_ln431_1_fu_4020_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((sw0out_V_1_load_A == 1'b1)) begin
        sw0out_V_1_payload_A <= zext_ln332_fu_5503_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((sw0out_V_1_load_B == 1'b1)) begin
        sw0out_V_1_payload_B <= zext_ln332_fu_5503_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp345_reg_5592 <= grp_fu_1384_p2;
        tmp_1_reg_5597 <= grp_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_reg_5513_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_5602 <= grp_fu_1394_p2;
        tmp_3_reg_5607 <= grp_fu_1399_p2;
        tmp_4_reg_5612 <= grp_fu_1404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_fu_3988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        trunc_ln214_reg_5770 <= trunc_ln214_fu_4033_p1;
    end
end

always @ (*) begin
    if ((icmp_ln395_fu_1424_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln425_fu_3988_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (sw0out_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln395_reg_5513_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        ap_phi_mux_ch_0_phi_fu_774_p4 = select_ln399_1_reg_5669;
    end else begin
        ap_phi_mux_ch_0_phi_fu_774_p4 = ch_0_reg_770;
    end
end

always @ (*) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_mux_col_0_phi_fu_810_p4 = col_reg_5659;
    end else begin
        ap_phi_mux_col_0_phi_fu_810_p4 = col_0_reg_806;
    end
end

always @ (*) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_786_p4 = select_ln396_2_reg_5664;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_786_p4 = indvar_flatten_reg_782;
    end
end

always @ (*) begin
    if (((icmp_ln395_reg_5513_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_mux_row_0_phi_fu_798_p4 = select_ln396_1_reg_5623;
    end else begin
        ap_phi_mux_row_0_phi_fu_798_p4 = row_0_reg_794;
    end
end

always @ (*) begin
    if (((icmp_ln425_reg_5756 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_s_0_phi_fu_833_p4 = select_ln431_1_reg_5765;
    end else begin
        ap_phi_mux_s_0_phi_fu_833_p4 = s_0_reg_829;
    end
end

always @ (*) begin
    if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (sw0out_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf0_V_address0 = grp_add_fu_891_input1_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        buf0_V_address0 = grp_conv_layer_fu_851_input_V_address0;
    end else begin
        buf0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_address1 = grp_maxpool_fu_1304_buf0_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf0_V_address1 = grp_add_fu_891_output_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_address1 = grp_conv_layer_fu_851_output_V_address1;
    end else begin
        buf0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf0_V_ce0 = grp_add_fu_891_input1_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        buf0_V_ce0 = grp_conv_layer_fu_851_input_V_ce0;
    end else begin
        buf0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_ce1 = grp_maxpool_fu_1304_buf0_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf0_V_ce1 = grp_add_fu_891_output_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_ce1 = grp_conv_layer_fu_851_output_V_ce1;
    end else begin
        buf0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_d1 = grp_maxpool_fu_1304_buf0_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf0_V_d1 = grp_add_fu_891_output_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_d1 = grp_conv_layer_fu_851_output_V_d1;
    end else begin
        buf0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf0_V_we1 = grp_maxpool_fu_1304_buf0_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf0_V_we1 = grp_add_fu_891_output_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf0_V_we1 = grp_conv_layer_fu_851_output_V_we1;
    end else begin
        buf0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf1_V_address0 = grp_maxpool_fu_1304_buf1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf1_V_address0 = grp_add_fu_891_input2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf1_V_address0 = grp_add_fu_891_input1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buf1_V_address0 = grp_conv_layer_fu_851_input_V_address0;
    end else begin
        buf1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf1_V_address1 = grp_maxpool_fu_1304_buf1_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf1_V_address1 = grp_conv1_fu_914_output_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21))) begin
        buf1_V_address1 = grp_conv_layer_fu_851_output_V_address1;
    end else begin
        buf1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf1_V_ce0 = grp_maxpool_fu_1304_buf1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf1_V_ce0 = grp_add_fu_891_input2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf1_V_ce0 = grp_add_fu_891_input1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buf1_V_ce0 = grp_conv_layer_fu_851_input_V_ce0;
    end else begin
        buf1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        buf1_V_ce1 = grp_maxpool_fu_1304_buf1_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf1_V_ce1 = grp_conv1_fu_914_output_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21))) begin
        buf1_V_ce1 = grp_conv_layer_fu_851_output_V_ce1;
    end else begin
        buf1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        buf1_V_d1 = grp_conv1_fu_914_output_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21))) begin
        buf1_V_d1 = grp_conv_layer_fu_851_output_V_d1;
    end else begin
        buf1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        buf1_V_we1 = grp_conv1_fu_914_output_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21))) begin
        buf1_V_we1 = grp_conv_layer_fu_851_output_V_we1;
    end else begin
        buf1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buf2_V_address0 = zext_ln431_fu_4028_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf2_V_address0 = grp_add_fu_891_input2_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25))) begin
        buf2_V_address0 = grp_conv_layer_fu_851_input_V_address0;
    end else begin
        buf2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf2_V_address1 = grp_add_fu_891_output_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        buf2_V_address1 = grp_conv_layer_fu_851_output_V_address1;
    end else begin
        buf2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buf2_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf2_V_ce0 = grp_add_fu_891_input2_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25))) begin
        buf2_V_ce0 = grp_conv_layer_fu_851_input_V_ce0;
    end else begin
        buf2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf2_V_ce1 = grp_add_fu_891_output_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        buf2_V_ce1 = grp_conv_layer_fu_851_output_V_ce1;
    end else begin
        buf2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf2_V_d1 = grp_add_fu_891_output_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        buf2_V_d1 = grp_conv_layer_fu_851_output_V_d1;
    end else begin
        buf2_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        buf2_V_we1 = grp_add_fu_891_output_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        buf2_V_we1 = grp_conv_layer_fu_851_output_V_we1;
    end else begin
        buf2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
        ddr_V_ARVALID = grp_conv_layer_fu_851_m_axi_ddr_V_ARVALID;
    end else begin
        ddr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
        ddr_V_RREADY = grp_conv_layer_fu_851_m_axi_ddr_V_RREADY;
    end else begin
        ddr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_add_fu_891_SCALE1 = 32'd1069819433;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_add_fu_891_SCALE1 = 32'd1064224658;
    end else begin
        grp_add_fu_891_SCALE1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_add_fu_891_SCALE2 = 32'd1060388102;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_add_fu_891_SCALE2 = 32'd1058381329;
    end else begin
        grp_add_fu_891_SCALE2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_add_fu_891_input1_V_q0 = buf0_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_add_fu_891_input1_V_q0 = buf1_V_q0;
    end else begin
        grp_add_fu_891_input1_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_add_fu_891_input2_V_q0 = buf1_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_add_fu_891_input2_V_q0 = buf2_V_q0;
    end else begin
        grp_add_fu_891_input2_V_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_block_state17_on_subcall_done))) begin
        grp_conv1_fu_914_ap_continue = 1'b1;
    end else begin
        grp_conv1_fu_914_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_conv_layer_fu_851_K = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_conv_layer_fu_851_K = 4'd1;
    end else begin
        grp_conv_layer_fu_851_K = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd133120;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd95744;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd78848;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd60416;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd23040;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd18432;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_conv_layer_fu_851_OFFSET = 19'd0;
    end else begin
        grp_conv_layer_fu_851_OFFSET = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_conv_layer_fu_851_P = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_conv_layer_fu_851_P = 1'd0;
    end else begin
        grp_conv_layer_fu_851_P = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_conv_layer_fu_851_TI = 5'd8;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_conv_layer_fu_851_TI = 5'd2;
    end else begin
        grp_conv_layer_fu_851_TI = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_conv_layer_fu_851_TO_r = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_conv_layer_fu_851_TO_r = 4'd4;
    end else begin
        grp_conv_layer_fu_851_TO_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_conv_layer_fu_851_input_V_q0 = buf1_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_conv_layer_fu_851_input_V_q0 = buf2_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_conv_layer_fu_851_input_V_q0 = buf0_V_q0;
    end else begin
        grp_conv_layer_fu_851_input_V_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1384_ce = 1'b1;
    end else begin
        grp_fu_1384_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1389_ce = 1'b1;
    end else begin
        grp_fu_1389_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1394_ce = 1'b1;
    end else begin
        grp_fu_1394_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1399_ce = 1'b1;
    end else begin
        grp_fu_1399_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1404_ce = 1'b1;
    end else begin
        grp_fu_1404_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1409_ce = 1'b1;
    end else begin
        grp_fu_1409_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1414_ce = 1'b1;
    end else begin
        grp_fu_1414_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1419_ce = 1'b1;
    end else begin
        grp_fu_1419_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp143))) begin
        grp_roundf_fu_1312_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1312_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp144))) begin
        grp_roundf_fu_1321_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1321_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp172))) begin
        grp_roundf_fu_1330_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1330_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp173))) begin
        grp_roundf_fu_1339_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1339_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp174))) begin
        grp_roundf_fu_1348_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1348_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp317))) begin
        grp_roundf_fu_1357_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1357_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp318))) begin
        grp_roundf_fu_1366_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1366_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp319))) begin
        grp_roundf_fu_1375_ap_ce = 1'b1;
    end else begin
        grp_roundf_fu_1375_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        inbuf_V_address0 = zext_ln180_3_fu_1644_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        inbuf_V_address0 = grp_conv1_fu_914_input_V_address0;
    end else begin
        inbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        inbuf_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        inbuf_V_ce0 = grp_conv1_fu_914_input_V_ce0;
    end else begin
        inbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        inbuf_V_ce1 = 1'b1;
    end else begin
        inbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln395_reg_5513_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        inbuf_V_we1 = 1'b1;
    end else begin
        inbuf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln395_fu_1424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_V_0_ack_out = 1'b1;
    end else begin
        input_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_0_sel == 1'b1)) begin
        input_V_0_data_out = input_V_0_payload_B;
    end else begin
        input_V_0_data_out = input_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln395_fu_1424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_V_TDATA_blk_n = input_V_0_state[1'd0];
    end else begin
        input_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (startt_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        startt_V_1_vld_in = 1'b1;
    end else begin
        startt_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        startt_V_TDATA_blk_n = startt_V_1_state[1'd1];
    end else begin
        startt_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stopt_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        stopt_V_1_vld_in = 1'b1;
    end else begin
        stopt_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        stopt_V_TDATA_blk_n = stopt_V_1_state[1'd1];
    end else begin
        stopt_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((sw0out_V_1_sel == 1'b1)) begin
        sw0out_V_1_data_out = sw0out_V_1_payload_B;
    end else begin
        sw0out_V_1_data_out = sw0out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln425_reg_5756 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sw0out_V_1_vld_in = 1'b1;
    end else begin
        sw0out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln425_reg_5756_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln425_reg_5756 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        sw0out_V_TDATA_blk_n = sw0out_V_1_state[1'd1];
    end else begin
        sw0out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (startt_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (startt_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln395_fu_1424_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln395_fu_1424_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_block_state17_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_maxpool_fu_1304_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((grp_conv_layer_fu_851_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_add_fu_891_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln425_fu_3988_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln425_fu_3988_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((stopt_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if ((~((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (sw0out_V_1_state == 2'd1) | (stopt_V_1_ack_in == 1'b0) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_1638_p2 = (zext_ln180_2_fu_1634_p1 + sub_ln180_fu_1628_p2);

assign add_ln395_fu_1430_p2 = (indvar_flatten47_reg_759 + 15'd1);

assign add_ln396_1_fu_1655_p2 = (13'd1 + ap_phi_mux_indvar_flatten_phi_fu_786_p4);

assign add_ln425_fu_3994_p2 = (indvar_flatten55_reg_818 + 16'd1);

assign and_ln180_1_fu_2265_p2 = (xor_ln180_1_fu_2259_p2 & or_ln180_fu_1994_p2);

assign and_ln180_2_fu_2547_p2 = (xor_ln180_2_fu_2541_p2 & or_ln180_1_reg_5690);

assign and_ln180_3_fu_2831_p2 = (xor_ln180_3_fu_2825_p2 & or_ln180_2_fu_2562_p2);

assign and_ln180_4_fu_3116_p2 = (xor_ln180_4_fu_3110_p2 & or_ln180_3_fu_2847_p2);

assign and_ln180_5_fu_3600_p2 = (xor_ln180_5_fu_3594_p2 & or_ln180_4_reg_5717);

assign and_ln180_6_fu_3680_p2 = (xor_ln180_6_fu_3674_p2 & or_ln180_5_fu_3615_p2);

assign and_ln180_7_fu_3965_p2 = (xor_ln180_7_fu_3959_p2 & or_ln180_6_fu_3696_p2);

assign and_ln180_fu_1978_p2 = (xor_ln180_fu_1972_p2 & inbuf_V_q0);

assign and_ln214_1_fu_4307_p2 = (lshr_ln214_3_fu_4301_p2 & lshr_ln214_2_fu_4295_p2);

assign and_ln214_2_fu_4435_p2 = (lshr_ln214_5_fu_4429_p2 & lshr_ln214_4_fu_4423_p2);

assign and_ln214_3_fu_4609_p2 = (lshr_ln214_8_fu_4603_p2 & lshr_ln214_7_fu_4597_p2);

assign and_ln214_4_fu_4755_p2 = (lshr_ln214_9_fu_4743_p2 & lshr_ln214_10_fu_4749_p2);

assign and_ln214_5_fu_4883_p2 = (lshr_ln214_12_fu_4877_p2 & lshr_ln214_11_fu_4871_p2);

assign and_ln214_6_fu_5065_p2 = (lshr_ln214_15_fu_5059_p2 & lshr_ln214_14_fu_5053_p2);

assign and_ln214_7_fu_5325_p2 = (lshr_ln214_20_fu_5319_p2 & lshr_ln214_19_fu_5313_p2);

assign and_ln214_fu_4161_p2 = (lshr_ln214_fu_4149_p2 & lshr_ln214_1_fu_4155_p2);

assign and_ln282_64_fu_2181_p2 = (xor_ln278_64_fu_2175_p2 & icmp_ln282_1_fu_2061_p2);

assign and_ln282_65_fu_2461_p2 = (xor_ln278_65_fu_2455_p2 & icmp_ln282_2_fu_2341_p2);

assign and_ln282_66_fu_2749_p2 = (xor_ln278_66_fu_2743_p2 & icmp_ln282_3_fu_2629_p2);

assign and_ln282_67_fu_3034_p2 = (xor_ln278_67_fu_3028_p2 & icmp_ln282_4_fu_2914_p2);

assign and_ln282_68_fu_3312_p2 = (xor_ln278_68_fu_3306_p2 & icmp_ln282_5_fu_3192_p2);

assign and_ln282_69_fu_3514_p2 = (xor_ln278_69_fu_3508_p2 & icmp_ln282_6_fu_3394_p2);

assign and_ln282_70_fu_3883_p2 = (xor_ln278_70_fu_3877_p2 & icmp_ln282_7_fu_3763_p2);

assign and_ln282_fu_1894_p2 = (xor_ln278_fu_1888_p2 & icmp_ln282_fu_1774_p2);

assign and_ln285_128_fu_1866_p2 = (icmp_ln284_fu_1780_p2 & and_ln285_fu_1860_p2);

assign and_ln285_129_fu_2147_p2 = (xor_ln282_64_fu_2141_p2 & icmp_ln285_1_fu_2073_p2);

assign and_ln285_130_fu_2153_p2 = (icmp_ln284_1_fu_2067_p2 & and_ln285_129_fu_2147_p2);

assign and_ln285_131_fu_2427_p2 = (xor_ln282_65_fu_2421_p2 & icmp_ln285_2_fu_2353_p2);

assign and_ln285_132_fu_2433_p2 = (icmp_ln284_2_fu_2347_p2 & and_ln285_131_fu_2427_p2);

assign and_ln285_133_fu_2715_p2 = (xor_ln282_66_fu_2709_p2 & icmp_ln285_3_fu_2641_p2);

assign and_ln285_134_fu_2721_p2 = (icmp_ln284_3_fu_2635_p2 & and_ln285_133_fu_2715_p2);

assign and_ln285_135_fu_3000_p2 = (xor_ln282_67_fu_2994_p2 & icmp_ln285_4_fu_2926_p2);

assign and_ln285_136_fu_3006_p2 = (icmp_ln284_4_fu_2920_p2 & and_ln285_135_fu_3000_p2);

assign and_ln285_137_fu_3278_p2 = (xor_ln282_68_fu_3272_p2 & icmp_ln285_5_fu_3204_p2);

assign and_ln285_138_fu_3284_p2 = (icmp_ln284_5_fu_3198_p2 & and_ln285_137_fu_3278_p2);

assign and_ln285_139_fu_3480_p2 = (xor_ln282_69_fu_3474_p2 & icmp_ln285_6_fu_3406_p2);

assign and_ln285_140_fu_3486_p2 = (icmp_ln284_6_fu_3400_p2 & and_ln285_139_fu_3480_p2);

assign and_ln285_141_fu_3849_p2 = (xor_ln282_70_fu_3843_p2 & icmp_ln285_7_fu_3775_p2);

assign and_ln285_142_fu_3855_p2 = (icmp_ln284_7_fu_3769_p2 & and_ln285_141_fu_3849_p2);

assign and_ln285_fu_1860_p2 = (xor_ln282_fu_1854_p2 & icmp_ln285_fu_1786_p2);

assign and_ln399_fu_1570_p2 = (xor_ln399_fu_1558_p2 & icmp_ln397_fu_1564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd27];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp143 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp144 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp172 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp173 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp174 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp317 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp318 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp319 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12_ignore_call82 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_on_subcall_done = ((ap_sync_grp_conv1_fu_914_ap_ready & ap_sync_grp_conv1_fu_914_ap_done) == 1'b0);
end

assign ap_block_state38_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_io = ((icmp_ln425_reg_5756 == 1'd0) & (sw0out_V_1_ack_in == 1'b0));
end

assign ap_block_state39_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call133 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call184 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call235 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call26 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call286 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call337 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call388 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0_ignore_call82 = ((icmp_ln395_fu_1424_p2 == 1'd0) & (input_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state40_io = ((icmp_ln425_reg_5756_pp1_iter1_reg == 1'd0) & (sw0out_V_1_ack_in == 1'b0));
end

assign ap_block_state40_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42 = ((stopt_V_1_state == 2'd1) | (startt_V_1_state == 2'd1) | (sw0out_V_1_state == 2'd1) | ((stopt_V_1_state == 2'd3) & (stopt_V_TREADY == 1'b0)) | ((startt_V_1_state == 2'd3) & (startt_V_TREADY == 1'b0)) | ((sw0out_V_1_state == 2'd3) & (sw0out_V_TREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call133 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call184 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call235 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call286 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call337 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call388 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_conv1_fu_914_ap_done = (grp_conv1_fu_914_ap_done | ap_sync_reg_grp_conv1_fu_914_ap_done);

assign ap_sync_grp_conv1_fu_914_ap_ready = (grp_conv1_fu_914_ap_ready | ap_sync_reg_grp_conv1_fu_914_ap_ready);

assign bitcast_ln705_1_fu_2000_p1 = val_assign_1_reg_5639;

assign bitcast_ln705_2_fu_2287_p1 = grp_roundf_fu_1330_ap_return;

assign bitcast_ln705_3_fu_2568_p1 = val_assign_3_reg_5707;

assign bitcast_ln705_4_fu_2853_p1 = val_assign_4_reg_5712;

assign bitcast_ln705_5_fu_3138_p1 = grp_roundf_fu_1357_ap_return;

assign bitcast_ln705_6_fu_3340_p1 = grp_roundf_fu_1366_ap_return;

assign bitcast_ln705_7_fu_3702_p1 = val_assign_7_reg_5745;

assign bitcast_ln705_fu_1713_p1 = val_assign_reg_5628;

assign ch_fu_1669_p2 = (2'd1 + ap_phi_mux_ch_0_phi_fu_774_p4);

assign col_fu_1649_p2 = (5'd1 + select_ln396_fu_1588_p3);

assign empty_45_fu_4063_p2 = (tmp_376_fu_4053_p5 | 8'd8);

assign empty_46_fu_4177_p2 = (shl_ln2_fu_4046_p3 | 5'd9);

assign empty_47_fu_4209_p2 = (p_cast163_fu_4205_p1 + 9'd8);

assign empty_48_fu_4339_p2 = (zext_ln214_2_cast161_fu_4323_p1 + p_shl118_cast_fu_4335_p1);

assign empty_49_fu_4345_p2 = (empty_48_fu_4339_p2 | 9'd8);

assign empty_50_fu_4467_p2 = (zext_ln214_3_cast158_fu_4451_p1 + p_shl117_cast_fu_4463_p1);

assign empty_51_fu_4511_p2 = (tmp_380_fu_4503_p3 | 8'd8);

assign empty_52_fu_4625_p2 = (shl_ln2_fu_4046_p3 | 5'd13);

assign empty_53_fu_4649_p1 = tmp_382_fu_4641_p3;

assign empty_54_fu_4657_p2 = (empty_53_fu_4649_p1 + 9'd8);

assign empty_55_fu_4787_p2 = (zext_ln214_6_cast149_fu_4771_p1 + p_shl114_cast_fu_4783_p1);

assign empty_56_fu_4793_p2 = (empty_55_fu_4787_p2 | 9'd8);

assign empty_57_fu_4915_p2 = (zext_ln214_7_cast146_fu_4899_p1 + p_shl113_cast_fu_4911_p1);

assign empty_58_fu_4959_p1 = tmp_384_fu_4951_p3;

assign empty_59_fu_4967_p2 = (empty_58_fu_4959_p1 + 9'd8);

assign empty_60_fu_5091_p2 = (zext_ln214_9_cast140_fu_5075_p1 + p_shl111_cast_fu_5087_p1);

assign empty_61_fu_5133_p2 = (zext_ln214_10_cast13_fu_5117_p1 + p_shl110_cast_fu_5129_p1);

assign empty_62_fu_5175_p2 = (zext_ln214_11_cast13_fu_5159_p1 + p_shl109_cast_fu_5171_p1);

assign empty_63_fu_5219_p1 = tmp_386_fu_5211_p3;

assign empty_64_fu_5227_p2 = (empty_63_fu_5219_p1 + 9'd8);

assign empty_65_fu_5351_p2 = (zext_ln214_13_cast12_fu_5335_p1 + p_shl107_cast_fu_5347_p1);

assign empty_66_fu_5393_p2 = (zext_ln214_14_cast12_fu_5377_p1 + p_shl106_cast_fu_5389_p1);

assign empty_67_fu_5435_p2 = (zext_ln214_15_cast12_fu_5419_p1 + p_shl105_cast_fu_5431_p1);

assign grp_add_fu_891_ap_start = grp_add_fu_891_ap_start_reg;

assign grp_conv1_fu_914_ap_start = grp_conv1_fu_914_ap_start_reg;

assign grp_conv_layer_fu_851_ap_start = grp_conv_layer_fu_851_ap_start_reg;

assign grp_fu_1384_p0 = trunc_ln681_fu_1436_p1;

assign grp_fu_1389_p0 = p_Result_1_fu_1445_p4;

assign grp_fu_1394_p0 = p_Result_2_reg_5532;

assign grp_fu_1399_p0 = p_Result_3_reg_5537;

assign grp_fu_1404_p0 = p_Result_4_reg_5542;

assign grp_fu_1409_p0 = p_Result_5_reg_5547_pp0_iter1_reg;

assign grp_fu_1414_p0 = p_Result_6_reg_5552_pp0_iter1_reg;

assign grp_fu_1419_p0 = p_Result_7_reg_5557_pp0_iter1_reg;

assign grp_maxpool_fu_1304_ap_start = grp_maxpool_fu_1304_ap_start_reg;

assign grp_roundf_fu_1312_ap_start = grp_roundf_fu_1312_ap_start_reg;

assign grp_roundf_fu_1321_ap_start = grp_roundf_fu_1321_ap_start_reg;

assign grp_roundf_fu_1330_ap_start = grp_roundf_fu_1330_ap_start_reg;

assign grp_roundf_fu_1339_ap_start = grp_roundf_fu_1339_ap_start_reg;

assign grp_roundf_fu_1348_ap_start = grp_roundf_fu_1348_ap_start_reg;

assign grp_roundf_fu_1357_ap_start = grp_roundf_fu_1357_ap_start_reg;

assign grp_roundf_fu_1366_ap_start = grp_roundf_fu_1366_ap_start_reg;

assign grp_roundf_fu_1375_ap_start = grp_roundf_fu_1375_ap_start_reg;

assign i_fu_4037_p2 = (select_ln431_fu_4012_p3 + 2'd1);

assign icmp_ln214_1_fu_4219_p2 = ((p_cast164_fu_4201_p1 > p_cast162_fu_4215_p1) ? 1'b1 : 1'b0);

assign icmp_ln214_2_fu_4351_p2 = ((empty_48_fu_4339_p2 > empty_49_fu_4345_p2) ? 1'b1 : 1'b0);

assign icmp_ln214_3_fu_4517_p2 = ((tmp_380_fu_4503_p3 > empty_51_fu_4511_p2) ? 1'b1 : 1'b0);

assign icmp_ln214_4_fu_4667_p2 = ((p_cast151_fu_4653_p1 > p_cast150_fu_4663_p1) ? 1'b1 : 1'b0);

assign icmp_ln214_5_fu_4799_p2 = ((empty_55_fu_4787_p2 > empty_56_fu_4793_p2) ? 1'b1 : 1'b0);

assign icmp_ln214_6_fu_4977_p2 = ((p_cast142_fu_4963_p1 > p_cast141_fu_4973_p1) ? 1'b1 : 1'b0);

assign icmp_ln214_7_fu_5237_p2 = ((p_cast130_fu_5223_p1 > p_cast129_fu_5233_p1) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_4069_p2 = ((tmp_376_fu_4053_p5 > empty_45_fu_4063_p2) ? 1'b1 : 1'b0);

assign icmp_ln278_1_fu_2045_p2 = ((trunc_ln263_64_fu_2003_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_2_fu_2325_p2 = ((trunc_ln263_65_fu_2291_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_3_fu_2613_p2 = ((trunc_ln263_66_fu_2571_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_4_fu_2898_p2 = ((trunc_ln263_67_fu_2856_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_5_fu_3176_p2 = ((trunc_ln263_68_fu_3142_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_6_fu_3378_p2 = ((trunc_ln263_69_fu_3344_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_7_fu_3747_p2 = ((trunc_ln263_70_fu_3705_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_1758_p2 = ((trunc_ln263_fu_1716_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_2061_p2 = ((p_Result_24_1_fu_2015_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_2_fu_2341_p2 = ((p_Result_24_2_fu_2295_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_3_fu_2629_p2 = ((p_Result_24_3_fu_2583_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_4_fu_2914_p2 = ((p_Result_24_4_fu_2868_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_5_fu_3192_p2 = ((p_Result_24_5_fu_3146_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_6_fu_3394_p2 = ((p_Result_24_6_fu_3348_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_7_fu_3763_p2 = ((p_Result_24_7_fu_3717_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_1774_p2 = ((p_Result_s_fu_1728_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_1_fu_2067_p2 = (($signed(sub_ln281_64_fu_2051_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_2_fu_2347_p2 = (($signed(sub_ln281_65_fu_2331_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_3_fu_2635_p2 = (($signed(sub_ln281_66_fu_2619_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_4_fu_2920_p2 = (($signed(sub_ln281_67_fu_2904_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_5_fu_3198_p2 = (($signed(sub_ln281_68_fu_3182_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_6_fu_3400_p2 = (($signed(sub_ln281_69_fu_3384_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_7_fu_3769_p2 = (($signed(sub_ln281_70_fu_3753_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_1780_p2 = (($signed(sub_ln281_fu_1764_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_1_fu_2073_p2 = (($signed(sub_ln281_64_fu_2051_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_2_fu_2353_p2 = (($signed(sub_ln281_65_fu_2331_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_3_fu_2641_p2 = (($signed(sub_ln281_66_fu_2619_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_4_fu_2926_p2 = (($signed(sub_ln281_67_fu_2904_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_5_fu_3204_p2 = (($signed(sub_ln281_68_fu_3182_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_6_fu_3406_p2 = (($signed(sub_ln281_69_fu_3384_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_7_fu_3775_p2 = (($signed(sub_ln281_70_fu_3753_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_1786_p2 = (($signed(sub_ln281_fu_1764_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_2089_p2 = (($signed(trunc_ln294_64_fu_2085_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_2_fu_2369_p2 = (($signed(trunc_ln294_65_fu_2365_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_3_fu_2657_p2 = (($signed(trunc_ln294_66_fu_2653_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_4_fu_2942_p2 = (($signed(trunc_ln294_67_fu_2938_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_5_fu_3220_p2 = (($signed(trunc_ln294_68_fu_3216_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_6_fu_3422_p2 = (($signed(trunc_ln294_69_fu_3418_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_7_fu_3791_p2 = (($signed(trunc_ln294_70_fu_3787_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_1802_p2 = (($signed(trunc_ln294_fu_1798_p1) < $signed(8'd9)) ? 1'b1 : 1'b0);

assign icmp_ln395_fu_1424_p2 = ((indvar_flatten47_reg_759 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln396_fu_1544_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_786_p4 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln397_fu_1564_p2 = ((ap_phi_mux_col_0_phi_fu_810_p4 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln425_fu_3988_p2 = ((indvar_flatten55_reg_818 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln426_fu_4006_p2 = ((i_0_reg_840 == 2'd2) ? 1'b1 : 1'b0);

assign inbuf_V_d1 = (shl_ln180_15_fu_3975_p2 | and_ln180_7_fu_3965_p2);

assign input_V_0_ack_in = input_V_0_state[1'd1];

assign input_V_0_load_A = (input_V_0_state_cmp_full & ~input_V_0_sel_wr);

assign input_V_0_load_B = (input_V_0_state_cmp_full & input_V_0_sel_wr);

assign input_V_0_sel = input_V_0_sel_rd;

assign input_V_0_state_cmp_full = ((input_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_0_vld_in = input_V_TVALID;

assign input_V_0_vld_out = input_V_0_state[1'd0];

assign input_V_TREADY = input_V_0_state[1'd1];

assign lshr_ln180_1_fu_2227_p2 = or_ln180_fu_1994_p2 >> zext_ln180_7_fu_2223_p1;

assign lshr_ln180_2_fu_2511_p2 = or_ln180_1_reg_5690 >> zext_ln180_10_fu_2508_p1;

assign lshr_ln180_3_fu_2794_p2 = or_ln180_2_fu_2562_p2 >> zext_ln180_13_fu_2791_p1;

assign lshr_ln180_4_fu_3079_p2 = or_ln180_3_fu_2847_p2 >> zext_ln180_16_fu_3076_p1;

assign lshr_ln180_5_fu_3564_p2 = or_ln180_4_reg_5717 >> zext_ln180_19_fu_3561_p1;

assign lshr_ln180_6_fu_3643_p2 = or_ln180_5_fu_3615_p2 >> zext_ln180_22_fu_3640_p1;

assign lshr_ln180_7_fu_3928_p2 = or_ln180_6_fu_3696_p2 >> zext_ln180_25_fu_3925_p1;

assign lshr_ln180_fu_1940_p2 = inbuf_V_q0 >> zext_ln180_4_fu_1936_p1;

assign lshr_ln214_10_fu_4749_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_16_fu_4739_p1;

assign lshr_ln214_11_fu_4871_p2 = select_ln214_16_fu_4841_p3 >> zext_ln214_17_fu_4863_p1;

assign lshr_ln214_12_fu_4877_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_18_fu_4867_p1;

assign lshr_ln214_13_fu_4925_p2 = buf2_V_q0 >> zext_ln214_19_fu_4921_p1;

assign lshr_ln214_14_fu_5053_p2 = select_ln214_19_fu_5023_p3 >> zext_ln214_21_fu_5045_p1;

assign lshr_ln214_15_fu_5059_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_22_fu_5049_p1;

assign lshr_ln214_16_fu_5101_p2 = buf2_V_q0 >> zext_ln214_23_fu_5097_p1;

assign lshr_ln214_17_fu_5143_p2 = buf2_V_q0 >> zext_ln214_24_fu_5139_p1;

assign lshr_ln214_18_fu_5185_p2 = buf2_V_q0 >> zext_ln214_25_fu_5181_p1;

assign lshr_ln214_19_fu_5313_p2 = select_ln214_22_fu_5283_p3 >> zext_ln214_27_fu_5305_p1;

assign lshr_ln214_1_fu_4155_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_3_fu_4145_p1;

assign lshr_ln214_20_fu_5319_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_28_fu_5309_p1;

assign lshr_ln214_21_fu_5361_p2 = buf2_V_q0 >> zext_ln214_29_fu_5357_p1;

assign lshr_ln214_22_fu_5403_p2 = buf2_V_q0 >> zext_ln214_30_fu_5399_p1;

assign lshr_ln214_23_fu_5445_p2 = buf2_V_q0 >> zext_ln214_31_fu_5441_p1;

assign lshr_ln214_2_fu_4295_p2 = select_ln214_4_fu_4265_p3 >> zext_ln214_5_fu_4287_p1;

assign lshr_ln214_3_fu_4301_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_6_fu_4291_p1;

assign lshr_ln214_4_fu_4423_p2 = select_ln214_7_fu_4393_p3 >> zext_ln214_7_fu_4415_p1;

assign lshr_ln214_5_fu_4429_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_8_fu_4419_p1;

assign lshr_ln214_6_fu_4477_p2 = buf2_V_q0 >> zext_ln214_9_fu_4473_p1;

assign lshr_ln214_7_fu_4597_p2 = select_ln214_10_fu_4567_p3 >> zext_ln214_12_fu_4589_p1;

assign lshr_ln214_8_fu_4603_p2 = 288'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533055 >> zext_ln214_13_fu_4593_p1;

assign lshr_ln214_9_fu_4743_p2 = select_ln214_13_fu_4713_p3 >> zext_ln214_15_fu_4735_p1;

assign lshr_ln214_fu_4149_p2 = select_ln214_1_fu_4119_p3 >> zext_ln214_2_fu_4141_p1;

assign lshr_ln286_64_fu_2109_p2 = tmp_361_fu_2037_p3 >> sext_ln281_64_fu_2057_p1;

assign lshr_ln286_65_fu_2389_p2 = tmp_363_fu_2317_p3 >> sext_ln281_65_fu_2337_p1;

assign lshr_ln286_66_fu_2677_p2 = tmp_365_fu_2605_p3 >> sext_ln281_66_fu_2625_p1;

assign lshr_ln286_67_fu_2962_p2 = tmp_367_fu_2890_p3 >> sext_ln281_67_fu_2910_p1;

assign lshr_ln286_68_fu_3240_p2 = tmp_370_fu_3168_p3 >> sext_ln281_68_fu_3188_p1;

assign lshr_ln286_69_fu_3442_p2 = tmp_372_fu_3370_p3 >> sext_ln281_69_fu_3390_p1;

assign lshr_ln286_70_fu_3811_p2 = tmp_374_fu_3739_p3 >> sext_ln281_70_fu_3759_p1;

assign lshr_ln286_fu_1822_p2 = tmp_359_fu_1750_p3 >> sext_ln281_fu_1770_p1;

assign or_ln180_1_fu_2281_p2 = (shl_ln180_3_fu_2275_p2 | and_ln180_1_fu_2265_p2);

assign or_ln180_2_fu_2562_p2 = (shl_ln180_5_fu_2556_p2 | and_ln180_2_fu_2547_p2);

assign or_ln180_3_fu_2847_p2 = (shl_ln180_7_fu_2841_p2 | and_ln180_3_fu_2831_p2);

assign or_ln180_4_fu_3132_p2 = (shl_ln180_9_fu_3126_p2 | and_ln180_4_fu_3116_p2);

assign or_ln180_5_fu_3615_p2 = (shl_ln180_11_fu_3609_p2 | and_ln180_5_fu_3600_p2);

assign or_ln180_6_fu_3696_p2 = (shl_ln180_13_fu_3690_p2 | and_ln180_6_fu_3680_p2);

assign or_ln180_fu_1994_p2 = (shl_ln180_1_fu_1988_p2 | and_ln180_fu_1978_p2);

assign or_ln214_10_fu_5195_p2 = (shl_ln2_fu_4046_p3 | 5'd12);

assign or_ln214_11_fu_5371_p2 = (shl_ln2_fu_4046_p3 | 5'd14);

assign or_ln214_12_fu_5413_p2 = (shl_ln2_fu_4046_p3 | 5'd15);

assign or_ln214_1_fu_4317_p2 = (shl_ln2_fu_4046_p3 | 5'd2);

assign or_ln214_2_fu_4445_p2 = (shl_ln2_fu_4046_p3 | 5'd3);

assign or_ln214_3_fu_4487_p2 = (shl_ln2_fu_4046_p3 | 5'd4);

assign or_ln214_4_fu_4619_p2 = (shl_ln2_fu_4046_p3 | 5'd5);

assign or_ln214_5_fu_4765_p2 = (shl_ln2_fu_4046_p3 | 5'd6);

assign or_ln214_6_fu_4893_p2 = (shl_ln2_fu_4046_p3 | 5'd7);

assign or_ln214_7_fu_4935_p2 = (shl_ln2_fu_4046_p3 | 5'd8);

assign or_ln214_8_fu_5111_p2 = (shl_ln2_fu_4046_p3 | 5'd10);

assign or_ln214_9_fu_5153_p2 = (shl_ln2_fu_4046_p3 | 5'd11);

assign or_ln214_fu_4171_p2 = (shl_ln2_fu_4046_p3 | 5'd1);

assign or_ln282_64_fu_2135_p2 = (icmp_ln282_1_fu_2061_p2 | icmp_ln278_1_fu_2045_p2);

assign or_ln282_65_fu_2415_p2 = (icmp_ln282_2_fu_2341_p2 | icmp_ln278_2_fu_2325_p2);

assign or_ln282_66_fu_2703_p2 = (icmp_ln282_3_fu_2629_p2 | icmp_ln278_3_fu_2613_p2);

assign or_ln282_67_fu_2988_p2 = (icmp_ln282_4_fu_2914_p2 | icmp_ln278_4_fu_2898_p2);

assign or_ln282_68_fu_3266_p2 = (icmp_ln282_5_fu_3192_p2 | icmp_ln278_5_fu_3176_p2);

assign or_ln282_69_fu_3468_p2 = (icmp_ln282_6_fu_3394_p2 | icmp_ln278_6_fu_3378_p2);

assign or_ln282_70_fu_3837_p2 = (icmp_ln282_7_fu_3763_p2 | icmp_ln278_7_fu_3747_p2);

assign or_ln282_fu_1848_p2 = (icmp_ln282_fu_1774_p2 | icmp_ln278_fu_1758_p2);

assign or_ln284_64_fu_2195_p2 = (or_ln282_64_fu_2135_p2 | icmp_ln284_1_fu_2067_p2);

assign or_ln284_65_fu_2475_p2 = (or_ln282_65_fu_2415_p2 | icmp_ln284_2_fu_2347_p2);

assign or_ln284_66_fu_2763_p2 = (or_ln282_66_fu_2703_p2 | icmp_ln284_3_fu_2635_p2);

assign or_ln284_67_fu_3048_p2 = (or_ln282_67_fu_2988_p2 | icmp_ln284_4_fu_2920_p2);

assign or_ln284_68_fu_3326_p2 = (or_ln282_68_fu_3266_p2 | icmp_ln284_5_fu_3198_p2);

assign or_ln284_69_fu_3528_p2 = (or_ln282_69_fu_3468_p2 | icmp_ln284_6_fu_3400_p2);

assign or_ln284_70_fu_3897_p2 = (or_ln282_70_fu_3837_p2 | icmp_ln284_7_fu_3769_p2);

assign or_ln284_fu_1908_p2 = (or_ln282_fu_1848_p2 | icmp_ln284_fu_1780_p2);

assign or_ln396_fu_1582_p2 = (icmp_ln396_fu_1544_p2 | and_ln399_fu_1570_p2);

assign p_Result_1_fu_1445_p4 = {{input_V_0_data_out[63:32]}};

assign p_Result_24_1_fu_2015_p4 = {{bitcast_ln705_1_fu_2000_p1[30:23]}};

assign p_Result_24_2_fu_2295_p4 = {{bitcast_ln705_2_fu_2287_p1[30:23]}};

assign p_Result_24_3_fu_2583_p4 = {{bitcast_ln705_3_fu_2568_p1[30:23]}};

assign p_Result_24_4_fu_2868_p4 = {{bitcast_ln705_4_fu_2853_p1[30:23]}};

assign p_Result_24_5_fu_3146_p4 = {{bitcast_ln705_5_fu_3138_p1[30:23]}};

assign p_Result_24_6_fu_3348_p4 = {{bitcast_ln705_6_fu_3340_p1[30:23]}};

assign p_Result_24_7_fu_3717_p4 = {{bitcast_ln705_7_fu_3702_p1[30:23]}};

assign p_Result_30_s_fu_5491_p5 = {{p_0106_1_fu_696[168:128]}, {tmp_369_fu_5455_p17}};

assign p_Result_s_fu_1728_p4 = {{bitcast_ln705_fu_1713_p1[30:23]}};

assign p_cast129_fu_5233_p1 = empty_64_fu_5227_p2;

assign p_cast130_fu_5223_p1 = tmp_386_fu_5211_p3;

assign p_cast141_fu_4973_p1 = empty_59_fu_4967_p2;

assign p_cast142_fu_4963_p1 = tmp_384_fu_4951_p3;

assign p_cast150_fu_4663_p1 = empty_54_fu_4657_p2;

assign p_cast151_fu_4653_p1 = tmp_382_fu_4641_p3;

assign p_cast162_fu_4215_p1 = empty_47_fu_4209_p2;

assign p_cast163_fu_4205_p1 = tmp_378_fu_4193_p3;

assign p_cast164_fu_4201_p1 = tmp_378_fu_4193_p3;

assign p_shl105_cast_fu_5431_p1 = p_shl2_fu_5423_p3;

assign p_shl106_cast_fu_5389_p1 = p_shl1_fu_5381_p3;

assign p_shl107_cast_fu_5347_p1 = p_shl_fu_5339_p3;

assign p_shl109_cast_fu_5171_p1 = p_shl9_fu_5163_p3;

assign p_shl110_cast_fu_5129_p1 = p_shl8_fu_5121_p3;

assign p_shl111_cast_fu_5087_p1 = p_shl7_fu_5079_p3;

assign p_shl113_cast_fu_4911_p1 = p_shl6_fu_4903_p3;

assign p_shl114_cast_fu_4783_p1 = p_shl5_fu_4775_p3;

assign p_shl117_cast_fu_4463_p1 = p_shl4_fu_4455_p3;

assign p_shl118_cast_fu_4335_p1 = p_shl3_fu_4327_p3;

assign p_shl1_fu_5381_p3 = {{or_ln214_11_fu_5371_p2}, {3'd0}};

assign p_shl2_fu_5423_p3 = {{or_ln214_12_fu_5413_p2}, {3'd0}};

assign p_shl3_fu_4327_p3 = {{or_ln214_1_fu_4317_p2}, {3'd0}};

assign p_shl4_fu_4455_p3 = {{or_ln214_2_fu_4445_p2}, {3'd0}};

assign p_shl5_fu_4775_p3 = {{or_ln214_5_fu_4765_p2}, {3'd0}};

assign p_shl6_fu_4903_p3 = {{or_ln214_6_fu_4893_p2}, {3'd0}};

assign p_shl7_fu_5079_p3 = {{empty_46_fu_4177_p2}, {3'd0}};

assign p_shl8_fu_5121_p3 = {{or_ln214_8_fu_5111_p2}, {3'd0}};

assign p_shl9_fu_5163_p3 = {{or_ln214_9_fu_5153_p2}, {3'd0}};

assign p_shl_fu_5339_p3 = {{empty_52_fu_4625_p2}, {3'd0}};

assign row_fu_1576_p2 = (8'd1 + select_ln399_fu_1550_p3);

assign s_fu_4000_p2 = (ap_phi_mux_s_0_phi_fu_833_p4 + 15'd1);

assign select_ln214_10_fu_4567_p3 = ((icmp_ln214_3_fu_4517_p2[0:0] === 1'b1) ? tmp_540_fu_4531_p4 : buf2_V_q0);

assign select_ln214_11_fu_4575_p3 = ((icmp_ln214_3_fu_4517_p2[0:0] === 1'b1) ? sub_ln214_13_fu_4547_p2 : zext_ln214_10_fu_4523_p1);

assign select_ln214_12_fu_4705_p3 = ((icmp_ln214_4_fu_4667_p2[0:0] === 1'b1) ? sub_ln214_16_fu_4687_p2 : sub_ln214_18_fu_4699_p2);

assign select_ln214_13_fu_4713_p3 = ((icmp_ln214_4_fu_4667_p2[0:0] === 1'b1) ? tmp_541_fu_4677_p4 : buf2_V_q0);

assign select_ln214_14_fu_4721_p3 = ((icmp_ln214_4_fu_4667_p2[0:0] === 1'b1) ? sub_ln214_17_fu_4693_p2 : zext_ln214_14_fu_4673_p1);

assign select_ln214_15_fu_4833_p3 = ((icmp_ln214_5_fu_4799_p2[0:0] === 1'b1) ? sub_ln214_20_fu_4815_p2 : sub_ln214_22_fu_4827_p2);

assign select_ln214_16_fu_4841_p3 = ((icmp_ln214_5_fu_4799_p2[0:0] === 1'b1) ? tmp_542_fu_4805_p4 : buf2_V_q0);

assign select_ln214_17_fu_4849_p3 = ((icmp_ln214_5_fu_4799_p2[0:0] === 1'b1) ? sub_ln214_21_fu_4821_p2 : empty_55_fu_4787_p2);

assign select_ln214_18_fu_5015_p3 = ((icmp_ln214_6_fu_4977_p2[0:0] === 1'b1) ? sub_ln214_24_fu_4997_p2 : sub_ln214_26_fu_5009_p2);

assign select_ln214_19_fu_5023_p3 = ((icmp_ln214_6_fu_4977_p2[0:0] === 1'b1) ? tmp_543_fu_4987_p4 : buf2_V_q0);

assign select_ln214_1_fu_4119_p3 = ((icmp_ln214_fu_4069_p2[0:0] === 1'b1) ? tmp_537_fu_4083_p4 : buf2_V_q0);

assign select_ln214_20_fu_5031_p3 = ((icmp_ln214_6_fu_4977_p2[0:0] === 1'b1) ? sub_ln214_25_fu_5003_p2 : zext_ln214_20_fu_4983_p1);

assign select_ln214_21_fu_5275_p3 = ((icmp_ln214_7_fu_5237_p2[0:0] === 1'b1) ? sub_ln214_28_fu_5257_p2 : sub_ln214_30_fu_5269_p2);

assign select_ln214_22_fu_5283_p3 = ((icmp_ln214_7_fu_5237_p2[0:0] === 1'b1) ? tmp_544_fu_5247_p4 : buf2_V_q0);

assign select_ln214_23_fu_5291_p3 = ((icmp_ln214_7_fu_5237_p2[0:0] === 1'b1) ? sub_ln214_29_fu_5263_p2 : zext_ln214_26_fu_5243_p1);

assign select_ln214_2_fu_4127_p3 = ((icmp_ln214_fu_4069_p2[0:0] === 1'b1) ? sub_ln214_1_fu_4099_p2 : zext_ln214_fu_4075_p1);

assign select_ln214_3_fu_4257_p3 = ((icmp_ln214_1_fu_4219_p2[0:0] === 1'b1) ? sub_ln214_4_fu_4239_p2 : sub_ln214_6_fu_4251_p2);

assign select_ln214_4_fu_4265_p3 = ((icmp_ln214_1_fu_4219_p2[0:0] === 1'b1) ? tmp_538_fu_4229_p4 : buf2_V_q0);

assign select_ln214_5_fu_4273_p3 = ((icmp_ln214_1_fu_4219_p2[0:0] === 1'b1) ? sub_ln214_5_fu_4245_p2 : zext_ln214_4_fu_4225_p1);

assign select_ln214_6_fu_4385_p3 = ((icmp_ln214_2_fu_4351_p2[0:0] === 1'b1) ? sub_ln214_8_fu_4367_p2 : sub_ln214_10_fu_4379_p2);

assign select_ln214_7_fu_4393_p3 = ((icmp_ln214_2_fu_4351_p2[0:0] === 1'b1) ? tmp_539_fu_4357_p4 : buf2_V_q0);

assign select_ln214_8_fu_4401_p3 = ((icmp_ln214_2_fu_4351_p2[0:0] === 1'b1) ? sub_ln214_9_fu_4373_p2 : empty_48_fu_4339_p2);

assign select_ln214_9_fu_4559_p3 = ((icmp_ln214_3_fu_4517_p2[0:0] === 1'b1) ? sub_ln214_12_fu_4541_p2 : sub_ln214_14_fu_4553_p2);

assign select_ln214_fu_4111_p3 = ((icmp_ln214_fu_4069_p2[0:0] === 1'b1) ? sub_ln214_fu_4093_p2 : sub_ln214_2_fu_4105_p2);

assign select_ln278_64_fu_2167_p3 = ((icmp_ln278_1_fu_2045_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_64_fu_2159_p3);

assign select_ln278_65_fu_2447_p3 = ((icmp_ln278_2_fu_2325_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_65_fu_2439_p3);

assign select_ln278_66_fu_2735_p3 = ((icmp_ln278_3_fu_2613_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_66_fu_2727_p3);

assign select_ln278_67_fu_3020_p3 = ((icmp_ln278_4_fu_2898_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_67_fu_3012_p3);

assign select_ln278_68_fu_3298_p3 = ((icmp_ln278_5_fu_3176_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_68_fu_3290_p3);

assign select_ln278_69_fu_3500_p3 = ((icmp_ln278_6_fu_3378_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_69_fu_3492_p3);

assign select_ln278_70_fu_3869_p3 = ((icmp_ln278_7_fu_3747_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_70_fu_3861_p3);

assign select_ln278_fu_1880_p3 = ((icmp_ln278_fu_1758_p2[0:0] === 1'b1) ? 9'd0 : select_ln285_fu_1872_p3);

assign select_ln282_64_fu_2187_p3 = ((and_ln282_64_fu_2181_p2[0:0] === 1'b1) ? trunc_ln296_64_fu_2033_p1 : select_ln278_64_fu_2167_p3);

assign select_ln282_65_fu_2467_p3 = ((and_ln282_65_fu_2461_p2[0:0] === 1'b1) ? trunc_ln296_65_fu_2313_p1 : select_ln278_65_fu_2447_p3);

assign select_ln282_66_fu_2755_p3 = ((and_ln282_66_fu_2749_p2[0:0] === 1'b1) ? trunc_ln296_66_fu_2601_p1 : select_ln278_66_fu_2735_p3);

assign select_ln282_67_fu_3040_p3 = ((and_ln282_67_fu_3034_p2[0:0] === 1'b1) ? trunc_ln296_67_fu_2886_p1 : select_ln278_67_fu_3020_p3);

assign select_ln282_68_fu_3318_p3 = ((and_ln282_68_fu_3312_p2[0:0] === 1'b1) ? trunc_ln296_68_fu_3164_p1 : select_ln278_68_fu_3298_p3);

assign select_ln282_69_fu_3520_p3 = ((and_ln282_69_fu_3514_p2[0:0] === 1'b1) ? trunc_ln296_69_fu_3366_p1 : select_ln278_69_fu_3500_p3);

assign select_ln282_70_fu_3889_p3 = ((and_ln282_70_fu_3883_p2[0:0] === 1'b1) ? trunc_ln296_70_fu_3735_p1 : select_ln278_70_fu_3869_p3);

assign select_ln282_fu_1900_p3 = ((and_ln282_fu_1894_p2[0:0] === 1'b1) ? trunc_ln296_fu_1746_p1 : select_ln278_fu_1880_p3);

assign select_ln284_64_fu_2201_p3 = ((or_ln284_64_fu_2195_p2[0:0] === 1'b1) ? select_ln282_64_fu_2187_p3 : select_ln295_64_fu_2101_p3);

assign select_ln284_65_fu_2481_p3 = ((or_ln284_65_fu_2475_p2[0:0] === 1'b1) ? select_ln282_65_fu_2467_p3 : select_ln295_65_fu_2381_p3);

assign select_ln284_66_fu_2769_p3 = ((or_ln284_66_fu_2763_p2[0:0] === 1'b1) ? select_ln282_66_fu_2755_p3 : select_ln295_66_fu_2669_p3);

assign select_ln284_67_fu_3054_p3 = ((or_ln284_67_fu_3048_p2[0:0] === 1'b1) ? select_ln282_67_fu_3040_p3 : select_ln295_67_fu_2954_p3);

assign select_ln284_68_fu_3332_p3 = ((or_ln284_68_fu_3326_p2[0:0] === 1'b1) ? select_ln282_68_fu_3318_p3 : select_ln295_68_fu_3232_p3);

assign select_ln284_69_fu_3534_p3 = ((or_ln284_69_fu_3528_p2[0:0] === 1'b1) ? select_ln282_69_fu_3520_p3 : select_ln295_69_fu_3434_p3);

assign select_ln284_70_fu_3903_p3 = ((or_ln284_70_fu_3897_p2[0:0] === 1'b1) ? select_ln282_70_fu_3889_p3 : select_ln295_70_fu_3803_p3);

assign select_ln284_fu_1914_p3 = ((or_ln284_fu_1908_p2[0:0] === 1'b1) ? select_ln282_fu_1900_p3 : select_ln295_fu_1814_p3);

assign select_ln285_64_fu_2159_p3 = ((and_ln285_130_fu_2153_p2[0:0] === 1'b1) ? trunc_ln286_64_fu_2115_p1 : select_ln288_64_fu_2127_p3);

assign select_ln285_65_fu_2439_p3 = ((and_ln285_132_fu_2433_p2[0:0] === 1'b1) ? trunc_ln286_65_fu_2395_p1 : select_ln288_65_fu_2407_p3);

assign select_ln285_66_fu_2727_p3 = ((and_ln285_134_fu_2721_p2[0:0] === 1'b1) ? trunc_ln286_66_fu_2683_p1 : select_ln288_66_fu_2695_p3);

assign select_ln285_67_fu_3012_p3 = ((and_ln285_136_fu_3006_p2[0:0] === 1'b1) ? trunc_ln286_67_fu_2968_p1 : select_ln288_67_fu_2980_p3);

assign select_ln285_68_fu_3290_p3 = ((and_ln285_138_fu_3284_p2[0:0] === 1'b1) ? trunc_ln286_68_fu_3246_p1 : select_ln288_68_fu_3258_p3);

assign select_ln285_69_fu_3492_p3 = ((and_ln285_140_fu_3486_p2[0:0] === 1'b1) ? trunc_ln286_69_fu_3448_p1 : select_ln288_69_fu_3460_p3);

assign select_ln285_70_fu_3861_p3 = ((and_ln285_142_fu_3855_p2[0:0] === 1'b1) ? trunc_ln286_70_fu_3817_p1 : select_ln288_70_fu_3829_p3);

assign select_ln285_fu_1872_p3 = ((and_ln285_128_fu_1866_p2[0:0] === 1'b1) ? trunc_ln286_fu_1828_p1 : select_ln288_fu_1840_p3);

assign select_ln288_64_fu_2127_p3 = ((tmp_524_fu_2119_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_65_fu_2407_p3 = ((tmp_526_fu_2399_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_66_fu_2695_p3 = ((tmp_528_fu_2687_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_67_fu_2980_p3 = ((tmp_530_fu_2972_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_68_fu_3258_p3 = ((tmp_532_fu_3250_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_69_fu_3460_p3 = ((tmp_534_fu_3452_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_70_fu_3829_p3 = ((tmp_536_fu_3821_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln288_fu_1840_p3 = ((tmp_522_fu_1832_p3[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln295_64_fu_2101_p3 = ((icmp_ln295_1_fu_2089_p2[0:0] === 1'b1) ? shl_ln297_1_fu_2095_p2 : 9'd0);

assign select_ln295_65_fu_2381_p3 = ((icmp_ln295_2_fu_2369_p2[0:0] === 1'b1) ? shl_ln297_2_fu_2375_p2 : 9'd0);

assign select_ln295_66_fu_2669_p3 = ((icmp_ln295_3_fu_2657_p2[0:0] === 1'b1) ? shl_ln297_3_fu_2663_p2 : 9'd0);

assign select_ln295_67_fu_2954_p3 = ((icmp_ln295_4_fu_2942_p2[0:0] === 1'b1) ? shl_ln297_4_fu_2948_p2 : 9'd0);

assign select_ln295_68_fu_3232_p3 = ((icmp_ln295_5_fu_3220_p2[0:0] === 1'b1) ? shl_ln297_5_fu_3226_p2 : 9'd0);

assign select_ln295_69_fu_3434_p3 = ((icmp_ln295_6_fu_3422_p2[0:0] === 1'b1) ? shl_ln297_6_fu_3428_p2 : 9'd0);

assign select_ln295_70_fu_3803_p3 = ((icmp_ln295_7_fu_3791_p2[0:0] === 1'b1) ? shl_ln297_7_fu_3797_p2 : 9'd0);

assign select_ln295_fu_1814_p3 = ((icmp_ln295_fu_1802_p2[0:0] === 1'b1) ? shl_ln297_fu_1808_p2 : 9'd0);

assign select_ln303_1_fu_2215_p3 = ((tmp_523_fu_2007_p3[0:0] === 1'b1) ? sub_ln461_1_fu_2209_p2 : select_ln284_64_fu_2201_p3);

assign select_ln303_2_fu_2501_p3 = ((tmp_525_fu_2489_p3[0:0] === 1'b1) ? sub_ln461_2_fu_2496_p2 : select_ln284_65_reg_5701);

assign select_ln303_3_fu_2783_p3 = ((tmp_527_fu_2575_p3[0:0] === 1'b1) ? sub_ln461_3_fu_2777_p2 : select_ln284_66_fu_2769_p3);

assign select_ln303_4_fu_3068_p3 = ((tmp_529_fu_2860_p3[0:0] === 1'b1) ? sub_ln461_4_fu_3062_p2 : select_ln284_67_fu_3054_p3);

assign select_ln303_5_fu_3554_p3 = ((tmp_531_fu_3542_p3[0:0] === 1'b1) ? sub_ln461_5_fu_3549_p2 : select_ln284_68_reg_5728);

assign select_ln303_6_fu_3633_p3 = ((tmp_533_fu_3621_p3[0:0] === 1'b1) ? sub_ln461_6_fu_3628_p2 : select_ln284_69_reg_5739);

assign select_ln303_7_fu_3917_p3 = ((tmp_535_fu_3709_p3[0:0] === 1'b1) ? sub_ln461_7_fu_3911_p2 : select_ln284_70_fu_3903_p3);

assign select_ln303_fu_1928_p3 = ((tmp_521_fu_1720_p3[0:0] === 1'b1) ? sub_ln461_fu_1922_p2 : select_ln284_fu_1914_p3);

assign select_ln396_1_fu_1596_p3 = ((and_ln399_fu_1570_p2[0:0] === 1'b1) ? row_fu_1576_p2 : select_ln399_fu_1550_p3);

assign select_ln396_2_fu_1661_p3 = ((icmp_ln396_fu_1544_p2[0:0] === 1'b1) ? 13'd1 : add_ln396_1_fu_1655_p2);

assign select_ln396_fu_1588_p3 = ((or_ln396_fu_1582_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_col_0_phi_fu_810_p4);

assign select_ln399_1_fu_1675_p3 = ((icmp_ln396_reg_5617[0:0] === 1'b1) ? ch_fu_1669_p2 : ap_phi_mux_ch_0_phi_fu_774_p4);

assign select_ln399_2_fu_1706_p3 = ((icmp_ln396_reg_5617[0:0] === 1'b1) ? tmp_403_mid1_fu_1682_p5 : tmp_s_fu_1694_p5);

assign select_ln399_fu_1550_p3 = ((icmp_ln396_fu_1544_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_row_0_phi_fu_798_p4);

assign select_ln431_1_fu_4020_p3 = ((icmp_ln426_fu_4006_p2[0:0] === 1'b1) ? s_fu_4000_p2 : ap_phi_mux_s_0_phi_fu_833_p4);

assign select_ln431_fu_4012_p3 = ((icmp_ln426_fu_4006_p2[0:0] === 1'b1) ? 2'd0 : i_0_reg_840);

assign sext_ln281_64_fu_2057_p1 = sub_ln281_64_fu_2051_p2;

assign sext_ln281_65_fu_2337_p1 = sub_ln281_65_fu_2331_p2;

assign sext_ln281_66_fu_2625_p1 = sub_ln281_66_fu_2619_p2;

assign sext_ln281_67_fu_2910_p1 = sub_ln281_67_fu_2904_p2;

assign sext_ln281_68_fu_3188_p1 = sub_ln281_68_fu_3182_p2;

assign sext_ln281_69_fu_3390_p1 = sub_ln281_69_fu_3384_p2;

assign sext_ln281_70_fu_3759_p1 = sub_ln281_70_fu_3753_p2;

assign sext_ln281_fu_1770_p1 = sub_ln281_fu_1764_p2;

assign shl_ln180_10_fu_3588_p2 = 216'd4722366482869645213695 << zext_ln180_20_fu_3585_p1;

assign shl_ln180_11_fu_3609_p2 = zext_ln180_21_fu_3605_p1 << zext_ln180_20_fu_3585_p1;

assign shl_ln180_12_fu_3668_p2 = 216'd4722366482869645213695 << zext_ln180_23_fu_3665_p1;

assign shl_ln180_13_fu_3690_p2 = zext_ln180_24_fu_3686_p1 << zext_ln180_23_fu_3665_p1;

assign shl_ln180_14_fu_3953_p2 = 216'd4722366482869645213695 << zext_ln180_26_fu_3950_p1;

assign shl_ln180_15_fu_3975_p2 = zext_ln180_27_fu_3971_p1 << zext_ln180_26_fu_3950_p1;

assign shl_ln180_1_fu_1988_p2 = zext_ln180_6_fu_1984_p1 << zext_ln180_5_fu_1962_p1;

assign shl_ln180_2_fu_2253_p2 = 216'd4722366482869645213695 << zext_ln180_8_fu_2249_p1;

assign shl_ln180_3_fu_2275_p2 = zext_ln180_9_fu_2271_p1 << zext_ln180_8_fu_2249_p1;

assign shl_ln180_4_fu_2535_p2 = 216'd4722366482869645213695 << zext_ln180_11_fu_2532_p1;

assign shl_ln180_5_fu_2556_p2 = zext_ln180_12_fu_2552_p1 << zext_ln180_11_fu_2532_p1;

assign shl_ln180_6_fu_2819_p2 = 216'd4722366482869645213695 << zext_ln180_14_fu_2816_p1;

assign shl_ln180_7_fu_2841_p2 = zext_ln180_15_fu_2837_p1 << zext_ln180_14_fu_2816_p1;

assign shl_ln180_8_fu_3104_p2 = 216'd4722366482869645213695 << zext_ln180_17_fu_3101_p1;

assign shl_ln180_9_fu_3126_p2 = zext_ln180_18_fu_3122_p1 << zext_ln180_17_fu_3101_p1;

assign shl_ln180_fu_1966_p2 = 216'd4722366482869645213695 << zext_ln180_5_fu_1962_p1;

assign shl_ln297_1_fu_2095_p2 = trunc_ln296_64_fu_2033_p1 << sub_ln294_64_fu_2079_p2;

assign shl_ln297_2_fu_2375_p2 = trunc_ln296_65_fu_2313_p1 << sub_ln294_65_fu_2359_p2;

assign shl_ln297_3_fu_2663_p2 = trunc_ln296_66_fu_2601_p1 << sub_ln294_66_fu_2647_p2;

assign shl_ln297_4_fu_2948_p2 = trunc_ln296_67_fu_2886_p1 << sub_ln294_67_fu_2932_p2;

assign shl_ln297_5_fu_3226_p2 = trunc_ln296_68_fu_3164_p1 << sub_ln294_68_fu_3210_p2;

assign shl_ln297_6_fu_3428_p2 = trunc_ln296_69_fu_3366_p1 << sub_ln294_69_fu_3412_p2;

assign shl_ln297_7_fu_3797_p2 = trunc_ln296_70_fu_3735_p1 << sub_ln294_70_fu_3781_p2;

assign shl_ln297_fu_1808_p2 = trunc_ln296_fu_1746_p1 << sub_ln294_fu_1792_p2;

assign shl_ln2_fu_4046_p3 = {{trunc_ln214_reg_5770}, {4'd0}};

assign startt_V_1_ack_in = startt_V_1_state[1'd1];

assign startt_V_1_ack_out = startt_V_TREADY;

assign startt_V_1_data_out = 8'd1;

assign startt_V_1_sel = startt_V_1_sel_rd;

assign startt_V_1_vld_out = startt_V_1_state[1'd0];

assign startt_V_TDATA = startt_V_1_data_out;

assign startt_V_TVALID = startt_V_1_state[1'd0];

assign stopt_V_1_ack_in = stopt_V_1_state[1'd1];

assign stopt_V_1_ack_out = stopt_V_TREADY;

assign stopt_V_1_data_out = 8'd1;

assign stopt_V_1_sel = stopt_V_1_sel_rd;

assign stopt_V_1_vld_out = stopt_V_1_state[1'd0];

assign stopt_V_TDATA = stopt_V_1_data_out;

assign stopt_V_TVALID = stopt_V_1_state[1'd0];

assign sub_ln180_fu_1628_p2 = (zext_ln180_fu_1612_p1 - zext_ln180_1_fu_1624_p1);

assign sub_ln214_10_fu_4379_p2 = (empty_49_fu_4345_p2 - empty_48_fu_4339_p2);

assign sub_ln214_11_fu_4409_p2 = ($signed(9'd287) - $signed(select_ln214_6_fu_4385_p3));

assign sub_ln214_12_fu_4541_p2 = (zext_ln214_10_fu_4523_p1 - zext_ln214_11_fu_4527_p1);

assign sub_ln214_13_fu_4547_p2 = ($signed(9'd287) - $signed(zext_ln214_10_fu_4523_p1));

assign sub_ln214_14_fu_4553_p2 = (zext_ln214_11_fu_4527_p1 - zext_ln214_10_fu_4523_p1);

assign sub_ln214_15_fu_4583_p2 = ($signed(9'd287) - $signed(select_ln214_9_fu_4559_p3));

assign sub_ln214_16_fu_4687_p2 = (zext_ln214_14_fu_4673_p1 - empty_54_fu_4657_p2);

assign sub_ln214_17_fu_4693_p2 = ($signed(9'd287) - $signed(zext_ln214_14_fu_4673_p1));

assign sub_ln214_18_fu_4699_p2 = (empty_54_fu_4657_p2 - zext_ln214_14_fu_4673_p1);

assign sub_ln214_19_fu_4729_p2 = ($signed(9'd287) - $signed(select_ln214_12_fu_4705_p3));

assign sub_ln214_1_fu_4099_p2 = ($signed(9'd287) - $signed(zext_ln214_fu_4075_p1));

assign sub_ln214_20_fu_4815_p2 = (empty_55_fu_4787_p2 - empty_56_fu_4793_p2);

assign sub_ln214_21_fu_4821_p2 = ($signed(9'd287) - $signed(empty_55_fu_4787_p2));

assign sub_ln214_22_fu_4827_p2 = (empty_56_fu_4793_p2 - empty_55_fu_4787_p2);

assign sub_ln214_23_fu_4857_p2 = ($signed(9'd287) - $signed(select_ln214_15_fu_4833_p3));

assign sub_ln214_24_fu_4997_p2 = (zext_ln214_20_fu_4983_p1 - empty_59_fu_4967_p2);

assign sub_ln214_25_fu_5003_p2 = ($signed(9'd287) - $signed(zext_ln214_20_fu_4983_p1));

assign sub_ln214_26_fu_5009_p2 = (empty_59_fu_4967_p2 - zext_ln214_20_fu_4983_p1);

assign sub_ln214_27_fu_5039_p2 = ($signed(9'd287) - $signed(select_ln214_18_fu_5015_p3));

assign sub_ln214_28_fu_5257_p2 = (zext_ln214_26_fu_5243_p1 - empty_64_fu_5227_p2);

assign sub_ln214_29_fu_5263_p2 = ($signed(9'd287) - $signed(zext_ln214_26_fu_5243_p1));

assign sub_ln214_2_fu_4105_p2 = (zext_ln214_1_fu_4079_p1 - zext_ln214_fu_4075_p1);

assign sub_ln214_30_fu_5269_p2 = (empty_64_fu_5227_p2 - zext_ln214_26_fu_5243_p1);

assign sub_ln214_31_fu_5299_p2 = ($signed(9'd287) - $signed(select_ln214_21_fu_5275_p3));

assign sub_ln214_3_fu_4135_p2 = ($signed(9'd287) - $signed(select_ln214_fu_4111_p3));

assign sub_ln214_4_fu_4239_p2 = (zext_ln214_4_fu_4225_p1 - empty_47_fu_4209_p2);

assign sub_ln214_5_fu_4245_p2 = ($signed(9'd287) - $signed(zext_ln214_4_fu_4225_p1));

assign sub_ln214_6_fu_4251_p2 = (empty_47_fu_4209_p2 - zext_ln214_4_fu_4225_p1);

assign sub_ln214_7_fu_4281_p2 = ($signed(9'd287) - $signed(select_ln214_3_fu_4257_p3));

assign sub_ln214_8_fu_4367_p2 = (empty_48_fu_4339_p2 - empty_49_fu_4345_p2);

assign sub_ln214_9_fu_4373_p2 = ($signed(9'd287) - $signed(empty_48_fu_4339_p2));

assign sub_ln214_fu_4093_p2 = (zext_ln214_fu_4075_p1 - zext_ln214_1_fu_4079_p1);

assign sub_ln281_64_fu_2051_p2 = (9'd150 - zext_ln266_64_fu_2025_p1);

assign sub_ln281_65_fu_2331_p2 = (9'd150 - zext_ln266_65_fu_2305_p1);

assign sub_ln281_66_fu_2619_p2 = (9'd150 - zext_ln266_66_fu_2593_p1);

assign sub_ln281_67_fu_2904_p2 = (9'd150 - zext_ln266_67_fu_2878_p1);

assign sub_ln281_68_fu_3182_p2 = (9'd150 - zext_ln266_68_fu_3156_p1);

assign sub_ln281_69_fu_3384_p2 = (9'd150 - zext_ln266_69_fu_3358_p1);

assign sub_ln281_70_fu_3753_p2 = (9'd150 - zext_ln266_70_fu_3727_p1);

assign sub_ln281_fu_1764_p2 = (9'd150 - zext_ln266_fu_1738_p1);

assign sub_ln294_64_fu_2079_p2 = ($signed(9'd0) - $signed(sub_ln281_64_fu_2051_p2));

assign sub_ln294_65_fu_2359_p2 = ($signed(9'd0) - $signed(sub_ln281_65_fu_2331_p2));

assign sub_ln294_66_fu_2647_p2 = ($signed(9'd0) - $signed(sub_ln281_66_fu_2619_p2));

assign sub_ln294_67_fu_2932_p2 = ($signed(9'd0) - $signed(sub_ln281_67_fu_2904_p2));

assign sub_ln294_68_fu_3210_p2 = ($signed(9'd0) - $signed(sub_ln281_68_fu_3182_p2));

assign sub_ln294_69_fu_3412_p2 = ($signed(9'd0) - $signed(sub_ln281_69_fu_3384_p2));

assign sub_ln294_70_fu_3781_p2 = ($signed(9'd0) - $signed(sub_ln281_70_fu_3753_p2));

assign sub_ln294_fu_1792_p2 = ($signed(9'd0) - $signed(sub_ln281_fu_1764_p2));

assign sub_ln461_1_fu_2209_p2 = (9'd0 - select_ln284_64_fu_2201_p3);

assign sub_ln461_2_fu_2496_p2 = (9'd0 - select_ln284_65_reg_5701);

assign sub_ln461_3_fu_2777_p2 = (9'd0 - select_ln284_66_fu_2769_p3);

assign sub_ln461_4_fu_3062_p2 = (9'd0 - select_ln284_67_fu_3054_p3);

assign sub_ln461_5_fu_3549_p2 = (9'd0 - select_ln284_68_reg_5728);

assign sub_ln461_6_fu_3628_p2 = (9'd0 - select_ln284_69_reg_5739);

assign sub_ln461_7_fu_3911_p2 = (9'd0 - select_ln284_70_fu_3903_p3);

assign sub_ln461_fu_1922_p2 = (9'd0 - select_ln284_fu_1914_p3);

assign sw0out_V_1_ack_in = sw0out_V_1_state[1'd1];

assign sw0out_V_1_ack_out = sw0out_V_TREADY;

assign sw0out_V_1_load_A = (sw0out_V_1_state_cmp_full & ~sw0out_V_1_sel_wr);

assign sw0out_V_1_load_B = (sw0out_V_1_state_cmp_full & sw0out_V_1_sel_wr);

assign sw0out_V_1_sel = sw0out_V_1_sel_rd;

assign sw0out_V_1_state_cmp_full = ((sw0out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sw0out_V_1_vld_out = sw0out_V_1_state[1'd0];

assign sw0out_V_TDATA = sw0out_V_1_data_out;

assign sw0out_V_TVALID = sw0out_V_1_state[1'd0];

assign tmp_359_fu_1750_p3 = {{1'd1}, {trunc_ln270_fu_1742_p1}};

assign tmp_360_fu_1950_p5 = {{trunc_ln180_fu_1946_p1[71:9]}, {select_ln303_fu_1928_p3}};

assign tmp_361_fu_2037_p3 = {{1'd1}, {trunc_ln270_1_fu_2029_p1}};

assign tmp_362_fu_2237_p5 = {{trunc_ln180_1_fu_2233_p1[71:18]}, {select_ln303_1_fu_2215_p3}, {trunc_ln180_1_fu_2233_p1[8:0]}};

assign tmp_363_fu_2317_p3 = {{1'd1}, {trunc_ln270_2_fu_2309_p1}};

assign tmp_364_fu_2520_p5 = {{trunc_ln180_2_fu_2516_p1[71:27]}, {select_ln303_2_fu_2501_p3}, {trunc_ln180_2_fu_2516_p1[17:0]}};

assign tmp_365_fu_2605_p3 = {{1'd1}, {trunc_ln270_3_fu_2597_p1}};

assign tmp_366_fu_2804_p5 = {{trunc_ln180_3_fu_2800_p1[71:36]}, {select_ln303_3_fu_2783_p3}, {trunc_ln180_3_fu_2800_p1[26:0]}};

assign tmp_367_fu_2890_p3 = {{1'd1}, {trunc_ln270_4_fu_2882_p1}};

assign tmp_368_fu_3089_p5 = {{trunc_ln180_4_fu_3085_p1[71:45]}, {select_ln303_4_fu_3068_p3}, {trunc_ln180_4_fu_3085_p1[35:0]}};

assign tmp_369_fu_5455_p17 = {{{{{{{{{{{{{{{{trunc_ln214_16_fu_5451_p1}, {trunc_ln214_15_fu_5409_p1}}, {trunc_ln214_14_fu_5367_p1}}, {trunc_ln214_13_fu_5331_p1}}, {trunc_ln214_12_fu_5191_p1}}, {trunc_ln214_11_fu_5149_p1}}, {trunc_ln214_10_fu_5107_p1}}, {trunc_ln214_9_fu_5071_p1}}, {trunc_ln214_8_fu_4931_p1}}, {trunc_ln214_7_fu_4889_p1}}, {trunc_ln214_6_fu_4761_p1}}, {trunc_ln214_5_fu_4615_p1}}, {trunc_ln214_4_fu_4483_p1}}, {trunc_ln214_3_fu_4441_p1}}, {trunc_ln214_2_fu_4313_p1}}, {trunc_ln214_1_fu_4167_p1}};

assign tmp_370_fu_3168_p3 = {{1'd1}, {trunc_ln270_5_fu_3160_p1}};

assign tmp_371_fu_3573_p5 = {{trunc_ln180_5_fu_3569_p1[71:54]}, {select_ln303_5_fu_3554_p3}, {trunc_ln180_5_fu_3569_p1[44:0]}};

assign tmp_372_fu_3370_p3 = {{1'd1}, {trunc_ln270_6_fu_3362_p1}};

assign tmp_373_fu_3653_p5 = {{trunc_ln180_6_fu_3649_p1[71:63]}, {select_ln303_6_fu_3633_p3}, {trunc_ln180_6_fu_3649_p1[53:0]}};

assign tmp_374_fu_3739_p3 = {{1'd1}, {trunc_ln270_7_fu_3731_p1}};

assign tmp_375_fu_3938_p5 = {{select_ln303_7_fu_3917_p3}, {trunc_ln180_7_fu_3934_p1[62:0]}};

assign tmp_376_fu_4053_p5 = {{{{trunc_ln214_reg_5770}, {2'd0}}, {trunc_ln214_reg_5770}}, {4'd0}};

assign tmp_377_fu_4183_p4 = {{or_ln214_fu_4171_p2[4:2]}};

assign tmp_378_fu_4193_p3 = {{tmp_377_fu_4183_p4}, {empty_46_fu_4177_p2}};

assign tmp_379_fu_4493_p4 = {{or_ln214_3_fu_4487_p2[4:2]}};

assign tmp_380_fu_4503_p3 = {{tmp_379_fu_4493_p4}, {or_ln214_3_fu_4487_p2}};

assign tmp_381_fu_4631_p4 = {{or_ln214_4_fu_4619_p2[4:2]}};

assign tmp_382_fu_4641_p3 = {{tmp_381_fu_4631_p4}, {empty_52_fu_4625_p2}};

assign tmp_383_fu_4941_p4 = {{or_ln214_7_fu_4935_p2[4:2]}};

assign tmp_384_fu_4951_p3 = {{tmp_383_fu_4941_p4}, {or_ln214_7_fu_4935_p2}};

assign tmp_385_fu_5201_p4 = {{or_ln214_10_fu_5195_p2[4:2]}};

assign tmp_386_fu_5211_p3 = {{tmp_385_fu_5201_p4}, {or_ln214_10_fu_5195_p2}};

assign tmp_403_mid1_fu_1682_p5 = {{{{ch_fu_1669_p2}, {1'd0}}, {ch_fu_1669_p2}}, {3'd0}};

assign tmp_519_fu_1604_p3 = {{select_ln396_1_fu_1596_p3}, {5'd0}};

assign tmp_520_fu_1616_p3 = {{select_ln396_1_fu_1596_p3}, {2'd0}};

assign tmp_521_fu_1720_p3 = bitcast_ln705_fu_1713_p1[32'd31];

assign tmp_522_fu_1832_p3 = bitcast_ln705_fu_1713_p1[32'd31];

assign tmp_523_fu_2007_p3 = bitcast_ln705_1_fu_2000_p1[32'd31];

assign tmp_524_fu_2119_p3 = bitcast_ln705_1_fu_2000_p1[32'd31];

assign tmp_525_fu_2489_p3 = bitcast_ln705_2_reg_5696[32'd31];

assign tmp_526_fu_2399_p3 = bitcast_ln705_2_fu_2287_p1[32'd31];

assign tmp_527_fu_2575_p3 = bitcast_ln705_3_fu_2568_p1[32'd31];

assign tmp_528_fu_2687_p3 = bitcast_ln705_3_fu_2568_p1[32'd31];

assign tmp_529_fu_2860_p3 = bitcast_ln705_4_fu_2853_p1[32'd31];

assign tmp_530_fu_2972_p3 = bitcast_ln705_4_fu_2853_p1[32'd31];

assign tmp_531_fu_3542_p3 = bitcast_ln705_5_reg_5723[32'd31];

assign tmp_532_fu_3250_p3 = bitcast_ln705_5_fu_3138_p1[32'd31];

assign tmp_533_fu_3621_p3 = bitcast_ln705_6_reg_5734[32'd31];

assign tmp_534_fu_3452_p3 = bitcast_ln705_6_fu_3340_p1[32'd31];

assign tmp_535_fu_3709_p3 = bitcast_ln705_7_fu_3702_p1[32'd31];

assign tmp_536_fu_3821_p3 = bitcast_ln705_7_fu_3702_p1[32'd31];

integer ap_tvar_int_0;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_0 = 288 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 287 - 0) begin
            tmp_537_fu_4083_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_537_fu_4083_p4[ap_tvar_int_0] = buf2_V_q0[287 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_1 = 288 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 287 - 0) begin
            tmp_538_fu_4229_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_538_fu_4229_p4[ap_tvar_int_1] = buf2_V_q0[287 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_2 = 288 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 287 - 0) begin
            tmp_539_fu_4357_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_539_fu_4357_p4[ap_tvar_int_2] = buf2_V_q0[287 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_3 = 288 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 287 - 0) begin
            tmp_540_fu_4531_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_540_fu_4531_p4[ap_tvar_int_3] = buf2_V_q0[287 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_4 = 288 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 287 - 0) begin
            tmp_541_fu_4677_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_541_fu_4677_p4[ap_tvar_int_4] = buf2_V_q0[287 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_5 = 288 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 287 - 0) begin
            tmp_542_fu_4805_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_542_fu_4805_p4[ap_tvar_int_5] = buf2_V_q0[287 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_6 = 288 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 287 - 0) begin
            tmp_543_fu_4987_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_543_fu_4987_p4[ap_tvar_int_6] = buf2_V_q0[287 - ap_tvar_int_6];
        end
    end
end

integer ap_tvar_int_7;

always @ (buf2_V_q0) begin
    for (ap_tvar_int_7 = 288 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 287 - 0) begin
            tmp_544_fu_5247_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_544_fu_5247_p4[ap_tvar_int_7] = buf2_V_q0[287 - ap_tvar_int_7];
        end
    end
end

assign tmp_s_fu_1694_p5 = {{{{ap_phi_mux_ch_0_phi_fu_774_p4}, {1'd0}}, {ap_phi_mux_ch_0_phi_fu_774_p4}}, {3'd0}};

assign trunc_ln180_1_fu_2233_p1 = lshr_ln180_1_fu_2227_p2[71:0];

assign trunc_ln180_2_fu_2516_p1 = lshr_ln180_2_fu_2511_p2[71:0];

assign trunc_ln180_3_fu_2800_p1 = lshr_ln180_3_fu_2794_p2[71:0];

assign trunc_ln180_4_fu_3085_p1 = lshr_ln180_4_fu_3079_p2[71:0];

assign trunc_ln180_5_fu_3569_p1 = lshr_ln180_5_fu_3564_p2[71:0];

assign trunc_ln180_6_fu_3649_p1 = lshr_ln180_6_fu_3643_p2[71:0];

assign trunc_ln180_7_fu_3934_p1 = lshr_ln180_7_fu_3928_p2[71:0];

assign trunc_ln180_fu_1946_p1 = lshr_ln180_fu_1940_p2[71:0];

assign trunc_ln214_10_fu_5107_p1 = lshr_ln214_16_fu_5101_p2[7:0];

assign trunc_ln214_11_fu_5149_p1 = lshr_ln214_17_fu_5143_p2[7:0];

assign trunc_ln214_12_fu_5191_p1 = lshr_ln214_18_fu_5185_p2[7:0];

assign trunc_ln214_13_fu_5331_p1 = and_ln214_7_fu_5325_p2[7:0];

assign trunc_ln214_14_fu_5367_p1 = lshr_ln214_21_fu_5361_p2[7:0];

assign trunc_ln214_15_fu_5409_p1 = lshr_ln214_22_fu_5403_p2[7:0];

assign trunc_ln214_16_fu_5451_p1 = lshr_ln214_23_fu_5445_p2[7:0];

assign trunc_ln214_1_fu_4167_p1 = and_ln214_fu_4161_p2[7:0];

assign trunc_ln214_2_fu_4313_p1 = and_ln214_1_fu_4307_p2[7:0];

assign trunc_ln214_3_fu_4441_p1 = and_ln214_2_fu_4435_p2[7:0];

assign trunc_ln214_4_fu_4483_p1 = lshr_ln214_6_fu_4477_p2[7:0];

assign trunc_ln214_5_fu_4615_p1 = and_ln214_3_fu_4609_p2[7:0];

assign trunc_ln214_6_fu_4761_p1 = and_ln214_4_fu_4755_p2[7:0];

assign trunc_ln214_7_fu_4889_p1 = and_ln214_5_fu_4883_p2[7:0];

assign trunc_ln214_8_fu_4931_p1 = lshr_ln214_13_fu_4925_p2[7:0];

assign trunc_ln214_9_fu_5071_p1 = and_ln214_6_fu_5065_p2[7:0];

assign trunc_ln214_fu_4033_p1 = select_ln431_fu_4012_p3[0:0];

assign trunc_ln263_64_fu_2003_p1 = bitcast_ln705_1_fu_2000_p1[30:0];

assign trunc_ln263_65_fu_2291_p1 = bitcast_ln705_2_fu_2287_p1[30:0];

assign trunc_ln263_66_fu_2571_p1 = bitcast_ln705_3_fu_2568_p1[30:0];

assign trunc_ln263_67_fu_2856_p1 = bitcast_ln705_4_fu_2853_p1[30:0];

assign trunc_ln263_68_fu_3142_p1 = bitcast_ln705_5_fu_3138_p1[30:0];

assign trunc_ln263_69_fu_3344_p1 = bitcast_ln705_6_fu_3340_p1[30:0];

assign trunc_ln263_70_fu_3705_p1 = bitcast_ln705_7_fu_3702_p1[30:0];

assign trunc_ln263_fu_1716_p1 = bitcast_ln705_fu_1713_p1[30:0];

assign trunc_ln270_1_fu_2029_p1 = bitcast_ln705_1_fu_2000_p1[22:0];

assign trunc_ln270_2_fu_2309_p1 = bitcast_ln705_2_fu_2287_p1[22:0];

assign trunc_ln270_3_fu_2597_p1 = bitcast_ln705_3_fu_2568_p1[22:0];

assign trunc_ln270_4_fu_2882_p1 = bitcast_ln705_4_fu_2853_p1[22:0];

assign trunc_ln270_5_fu_3160_p1 = bitcast_ln705_5_fu_3138_p1[22:0];

assign trunc_ln270_6_fu_3362_p1 = bitcast_ln705_6_fu_3340_p1[22:0];

assign trunc_ln270_7_fu_3731_p1 = bitcast_ln705_7_fu_3702_p1[22:0];

assign trunc_ln270_fu_1742_p1 = bitcast_ln705_fu_1713_p1[22:0];

assign trunc_ln286_64_fu_2115_p1 = lshr_ln286_64_fu_2109_p2[8:0];

assign trunc_ln286_65_fu_2395_p1 = lshr_ln286_65_fu_2389_p2[8:0];

assign trunc_ln286_66_fu_2683_p1 = lshr_ln286_66_fu_2677_p2[8:0];

assign trunc_ln286_67_fu_2968_p1 = lshr_ln286_67_fu_2962_p2[8:0];

assign trunc_ln286_68_fu_3246_p1 = lshr_ln286_68_fu_3240_p2[8:0];

assign trunc_ln286_69_fu_3448_p1 = lshr_ln286_69_fu_3442_p2[8:0];

assign trunc_ln286_70_fu_3817_p1 = lshr_ln286_70_fu_3811_p2[8:0];

assign trunc_ln286_fu_1828_p1 = lshr_ln286_fu_1822_p2[8:0];

assign trunc_ln294_64_fu_2085_p1 = sub_ln294_64_fu_2079_p2[7:0];

assign trunc_ln294_65_fu_2365_p1 = sub_ln294_65_fu_2359_p2[7:0];

assign trunc_ln294_66_fu_2653_p1 = sub_ln294_66_fu_2647_p2[7:0];

assign trunc_ln294_67_fu_2938_p1 = sub_ln294_67_fu_2932_p2[7:0];

assign trunc_ln294_68_fu_3216_p1 = sub_ln294_68_fu_3210_p2[7:0];

assign trunc_ln294_69_fu_3418_p1 = sub_ln294_69_fu_3412_p2[7:0];

assign trunc_ln294_70_fu_3787_p1 = sub_ln294_70_fu_3781_p2[7:0];

assign trunc_ln294_fu_1798_p1 = sub_ln294_fu_1792_p2[7:0];

assign trunc_ln296_64_fu_2033_p1 = bitcast_ln705_1_fu_2000_p1[8:0];

assign trunc_ln296_65_fu_2313_p1 = bitcast_ln705_2_fu_2287_p1[8:0];

assign trunc_ln296_66_fu_2601_p1 = bitcast_ln705_3_fu_2568_p1[8:0];

assign trunc_ln296_67_fu_2886_p1 = bitcast_ln705_4_fu_2853_p1[8:0];

assign trunc_ln296_68_fu_3164_p1 = bitcast_ln705_5_fu_3138_p1[8:0];

assign trunc_ln296_69_fu_3366_p1 = bitcast_ln705_6_fu_3340_p1[8:0];

assign trunc_ln296_70_fu_3735_p1 = bitcast_ln705_7_fu_3702_p1[8:0];

assign trunc_ln296_fu_1746_p1 = bitcast_ln705_fu_1713_p1[8:0];

assign trunc_ln681_fu_1436_p1 = input_V_0_data_out[31:0];

assign xor_ln180_1_fu_2259_p2 = (shl_ln180_2_fu_2253_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_2_fu_2541_p2 = (shl_ln180_4_fu_2535_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_3_fu_2825_p2 = (shl_ln180_6_fu_2819_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_4_fu_3110_p2 = (shl_ln180_8_fu_3104_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_5_fu_3594_p2 = (shl_ln180_10_fu_3588_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_6_fu_3674_p2 = (shl_ln180_12_fu_3668_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_7_fu_3959_p2 = (shl_ln180_14_fu_3953_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln180_fu_1972_p2 = (shl_ln180_fu_1966_p2 ^ 216'd105312291668557186697918027683670432318895095400549111254310977535);

assign xor_ln278_64_fu_2175_p2 = (icmp_ln278_1_fu_2045_p2 ^ 1'd1);

assign xor_ln278_65_fu_2455_p2 = (icmp_ln278_2_fu_2325_p2 ^ 1'd1);

assign xor_ln278_66_fu_2743_p2 = (icmp_ln278_3_fu_2613_p2 ^ 1'd1);

assign xor_ln278_67_fu_3028_p2 = (icmp_ln278_4_fu_2898_p2 ^ 1'd1);

assign xor_ln278_68_fu_3306_p2 = (icmp_ln278_5_fu_3176_p2 ^ 1'd1);

assign xor_ln278_69_fu_3508_p2 = (icmp_ln278_6_fu_3378_p2 ^ 1'd1);

assign xor_ln278_70_fu_3877_p2 = (icmp_ln278_7_fu_3747_p2 ^ 1'd1);

assign xor_ln278_fu_1888_p2 = (icmp_ln278_fu_1758_p2 ^ 1'd1);

assign xor_ln282_64_fu_2141_p2 = (or_ln282_64_fu_2135_p2 ^ 1'd1);

assign xor_ln282_65_fu_2421_p2 = (or_ln282_65_fu_2415_p2 ^ 1'd1);

assign xor_ln282_66_fu_2709_p2 = (or_ln282_66_fu_2703_p2 ^ 1'd1);

assign xor_ln282_67_fu_2994_p2 = (or_ln282_67_fu_2988_p2 ^ 1'd1);

assign xor_ln282_68_fu_3272_p2 = (or_ln282_68_fu_3266_p2 ^ 1'd1);

assign xor_ln282_69_fu_3474_p2 = (or_ln282_69_fu_3468_p2 ^ 1'd1);

assign xor_ln282_70_fu_3843_p2 = (or_ln282_70_fu_3837_p2 ^ 1'd1);

assign xor_ln282_fu_1854_p2 = (or_ln282_fu_1848_p2 ^ 1'd1);

assign xor_ln399_fu_1558_p2 = (icmp_ln396_fu_1544_p2 ^ 1'd1);

assign zext_ln180_10_fu_2508_p1 = select_ln399_2_reg_5674;

assign zext_ln180_11_fu_2532_p1 = select_ln399_2_reg_5674;

assign zext_ln180_12_fu_2552_p1 = tmp_364_fu_2520_p5;

assign zext_ln180_13_fu_2791_p1 = select_ln399_2_reg_5674;

assign zext_ln180_14_fu_2816_p1 = select_ln399_2_reg_5674;

assign zext_ln180_15_fu_2837_p1 = tmp_366_fu_2804_p5;

assign zext_ln180_16_fu_3076_p1 = select_ln399_2_reg_5674;

assign zext_ln180_17_fu_3101_p1 = select_ln399_2_reg_5674;

assign zext_ln180_18_fu_3122_p1 = tmp_368_fu_3089_p5;

assign zext_ln180_19_fu_3561_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_1_fu_1624_p1 = tmp_520_fu_1616_p3;

assign zext_ln180_20_fu_3585_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_21_fu_3605_p1 = tmp_371_fu_3573_p5;

assign zext_ln180_22_fu_3640_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_23_fu_3665_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_24_fu_3686_p1 = tmp_373_fu_3653_p5;

assign zext_ln180_25_fu_3925_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_26_fu_3950_p1 = select_ln399_2_reg_5674_pp0_iter11_reg;

assign zext_ln180_27_fu_3971_p1 = tmp_375_fu_3938_p5;

assign zext_ln180_2_fu_1634_p1 = select_ln396_fu_1588_p3;

assign zext_ln180_3_fu_1644_p1 = add_ln180_fu_1638_p2;

assign zext_ln180_4_fu_1936_p1 = select_ln399_2_fu_1706_p3;

assign zext_ln180_5_fu_1962_p1 = select_ln399_2_fu_1706_p3;

assign zext_ln180_6_fu_1984_p1 = tmp_360_fu_1950_p5;

assign zext_ln180_7_fu_2223_p1 = select_ln399_2_fu_1706_p3;

assign zext_ln180_8_fu_2249_p1 = select_ln399_2_fu_1706_p3;

assign zext_ln180_9_fu_2271_p1 = tmp_362_fu_2237_p5;

assign zext_ln180_fu_1612_p1 = tmp_519_fu_1604_p3;

assign zext_ln214_10_cast13_fu_5117_p1 = or_ln214_8_fu_5111_p2;

assign zext_ln214_10_fu_4523_p1 = tmp_380_fu_4503_p3;

assign zext_ln214_11_cast13_fu_5159_p1 = or_ln214_9_fu_5153_p2;

assign zext_ln214_11_fu_4527_p1 = empty_51_fu_4511_p2;

assign zext_ln214_12_fu_4589_p1 = select_ln214_11_fu_4575_p3;

assign zext_ln214_13_cast12_fu_5335_p1 = empty_52_fu_4625_p2;

assign zext_ln214_13_fu_4593_p1 = sub_ln214_15_fu_4583_p2;

assign zext_ln214_14_cast12_fu_5377_p1 = or_ln214_11_fu_5371_p2;

assign zext_ln214_14_fu_4673_p1 = tmp_382_fu_4641_p3;

assign zext_ln214_15_cast12_fu_5419_p1 = or_ln214_12_fu_5413_p2;

assign zext_ln214_15_fu_4735_p1 = select_ln214_14_fu_4721_p3;

assign zext_ln214_16_fu_4739_p1 = sub_ln214_19_fu_4729_p2;

assign zext_ln214_17_fu_4863_p1 = select_ln214_17_fu_4849_p3;

assign zext_ln214_18_fu_4867_p1 = sub_ln214_23_fu_4857_p2;

assign zext_ln214_19_fu_4921_p1 = empty_57_fu_4915_p2;

assign zext_ln214_1_fu_4079_p1 = empty_45_fu_4063_p2;

assign zext_ln214_20_fu_4983_p1 = tmp_384_fu_4951_p3;

assign zext_ln214_21_fu_5045_p1 = select_ln214_20_fu_5031_p3;

assign zext_ln214_22_fu_5049_p1 = sub_ln214_27_fu_5039_p2;

assign zext_ln214_23_fu_5097_p1 = empty_60_fu_5091_p2;

assign zext_ln214_24_fu_5139_p1 = empty_61_fu_5133_p2;

assign zext_ln214_25_fu_5181_p1 = empty_62_fu_5175_p2;

assign zext_ln214_26_fu_5243_p1 = tmp_386_fu_5211_p3;

assign zext_ln214_27_fu_5305_p1 = select_ln214_23_fu_5291_p3;

assign zext_ln214_28_fu_5309_p1 = sub_ln214_31_fu_5299_p2;

assign zext_ln214_29_fu_5357_p1 = empty_65_fu_5351_p2;

assign zext_ln214_2_cast161_fu_4323_p1 = or_ln214_1_fu_4317_p2;

assign zext_ln214_2_fu_4141_p1 = select_ln214_2_fu_4127_p3;

assign zext_ln214_30_fu_5399_p1 = empty_66_fu_5393_p2;

assign zext_ln214_31_fu_5441_p1 = empty_67_fu_5435_p2;

assign zext_ln214_3_cast158_fu_4451_p1 = or_ln214_2_fu_4445_p2;

assign zext_ln214_3_fu_4145_p1 = sub_ln214_3_fu_4135_p2;

assign zext_ln214_4_fu_4225_p1 = tmp_378_fu_4193_p3;

assign zext_ln214_5_fu_4287_p1 = select_ln214_5_fu_4273_p3;

assign zext_ln214_6_cast149_fu_4771_p1 = or_ln214_5_fu_4765_p2;

assign zext_ln214_6_fu_4291_p1 = sub_ln214_7_fu_4281_p2;

assign zext_ln214_7_cast146_fu_4899_p1 = or_ln214_6_fu_4893_p2;

assign zext_ln214_7_fu_4415_p1 = select_ln214_8_fu_4401_p3;

assign zext_ln214_8_fu_4419_p1 = sub_ln214_11_fu_4409_p2;

assign zext_ln214_9_cast140_fu_5075_p1 = empty_46_fu_4177_p2;

assign zext_ln214_9_fu_4473_p1 = empty_50_fu_4467_p2;

assign zext_ln214_fu_4075_p1 = tmp_376_fu_4053_p5;

assign zext_ln266_64_fu_2025_p1 = p_Result_24_1_fu_2015_p4;

assign zext_ln266_65_fu_2305_p1 = p_Result_24_2_fu_2295_p4;

assign zext_ln266_66_fu_2593_p1 = p_Result_24_3_fu_2583_p4;

assign zext_ln266_67_fu_2878_p1 = p_Result_24_4_fu_2868_p4;

assign zext_ln266_68_fu_3156_p1 = p_Result_24_5_fu_3146_p4;

assign zext_ln266_69_fu_3358_p1 = p_Result_24_6_fu_3348_p4;

assign zext_ln266_70_fu_3727_p1 = p_Result_24_7_fu_3717_p4;

assign zext_ln266_fu_1738_p1 = p_Result_s_fu_1728_p4;

assign zext_ln332_fu_5503_p1 = p_Result_30_s_fu_5491_p5;

assign zext_ln431_fu_4028_p1 = select_ln431_1_fu_4020_p3;

always @ (posedge ap_clk) begin
    select_ln399_2_reg_5674[2:0] <= 3'b000;
    select_ln399_2_reg_5674[5] <= 1'b0;
    select_ln399_2_reg_5674_pp0_iter11_reg[2:0] <= 3'b000;
    select_ln399_2_reg_5674_pp0_iter11_reg[5] <= 1'b0;
end

endmodule //resnet50_0
