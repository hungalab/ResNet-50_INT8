// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "roundf.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic roundf::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic roundf::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> roundf::ap_ST_fsm_pp0_stage0 = "1";
const bool roundf::ap_const_boolean_1 = true;
const sc_lv<32> roundf::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool roundf::ap_const_boolean_0 = false;
const sc_lv<32> roundf::ap_const_lv32_17 = "10111";
const sc_lv<32> roundf::ap_const_lv32_1E = "11110";
const sc_lv<8> roundf::ap_const_lv8_7E = "1111110";
const sc_lv<8> roundf::ap_const_lv8_96 = "10010110";
const sc_lv<32> roundf::ap_const_lv32_1B = "11011";
const sc_lv<32> roundf::ap_const_lv32_1F = "11111";
const sc_lv<31> roundf::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<23> roundf::ap_const_lv23_7FFFFF = "11111111111111111111111";
const sc_lv<1> roundf::ap_const_lv1_1 = "1";

roundf::roundf(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mask_table1_U = new roundf_mask_table1("mask_table1_U");
    mask_table1_U->clk(ap_clk);
    mask_table1_U->reset(ap_rst);
    mask_table1_U->address0(mask_table1_address0);
    mask_table1_U->ce0(mask_table1_ce0);
    mask_table1_U->q0(mask_table1_q0);
    one_half_table2_U = new roundf_one_half_table2("one_half_table2_U");
    one_half_table2_U->clk(ap_clk);
    one_half_table2_U->reset(ap_rst);
    one_half_table2_U->address0(one_half_table2_address0);
    one_half_table2_U->ce0(one_half_table2_ce0);
    one_half_table2_U->q0(one_half_table2_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln849_fu_188_p2);
    sensitive << ( icmp_ln849_1_reg_217 );
    sensitive << ( xor_ln849_fu_183_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( x_read_reg_200 );
    sensitive << ( and_ln849_fu_188_p2 );
    sensitive << ( bitcast_ln849_fu_179_p1 );

    SC_METHOD(thread_bitcast_ln849_fu_179_p1);
    sensitive << ( select_ln849_fu_172_p3 );

    SC_METHOD(thread_icmp_ln849_1_fu_92_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_fu_76_p4 );

    SC_METHOD(thread_icmp_ln849_fu_86_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_fu_76_p4 );

    SC_METHOD(thread_index_V_fu_98_p4);
    sensitive << ( t_V_1_fu_72_p1 );

    SC_METHOD(thread_mask_table1_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln498_fu_108_p1 );

    SC_METHOD(thread_mask_table1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_one_half_table2_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln498_fu_108_p1 );

    SC_METHOD(thread_one_half_table2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_p_Result_11_fu_121_p3);
    sensitive << ( p_Result_s_fu_114_p3 );

    SC_METHOD(thread_p_Result_12_fu_164_p3);
    sensitive << ( tmp_fu_154_p4 );
    sensitive << ( xs_sig_V_fu_148_p2 );

    SC_METHOD(thread_p_Result_s_fu_114_p3);
    sensitive << ( t_V_1_reg_205 );

    SC_METHOD(thread_p_Val2_s_fu_133_p2);
    sensitive << ( t_V_1_reg_205 );
    sensitive << ( zext_ln209_fu_129_p1 );

    SC_METHOD(thread_select_ln849_fu_172_p3);
    sensitive << ( icmp_ln849_reg_211 );
    sensitive << ( p_Result_11_fu_121_p3 );
    sensitive << ( p_Result_12_fu_164_p3 );

    SC_METHOD(thread_t_V_1_fu_72_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_V_1_fu_138_p1);
    sensitive << ( p_Val2_s_fu_133_p2 );

    SC_METHOD(thread_tmp_V_fu_76_p4);
    sensitive << ( t_V_1_fu_72_p1 );

    SC_METHOD(thread_tmp_fu_154_p4);
    sensitive << ( p_Val2_s_fu_133_p2 );

    SC_METHOD(thread_xor_ln1309_fu_142_p2);
    sensitive << ( mask_table1_q0 );

    SC_METHOD(thread_xor_ln849_fu_183_p2);
    sensitive << ( icmp_ln849_reg_211 );

    SC_METHOD(thread_xs_sig_V_fu_148_p2);
    sensitive << ( tmp_V_1_fu_138_p1 );
    sensitive << ( xor_ln1309_fu_142_p2 );

    SC_METHOD(thread_zext_ln209_fu_129_p1);
    sensitive << ( one_half_table2_q0 );

    SC_METHOD(thread_zext_ln498_fu_108_p1);
    sensitive << ( index_V_fu_98_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "roundf_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, mask_table1_address0, "mask_table1_address0");
    sc_trace(mVcdFile, mask_table1_ce0, "mask_table1_ce0");
    sc_trace(mVcdFile, mask_table1_q0, "mask_table1_q0");
    sc_trace(mVcdFile, one_half_table2_address0, "one_half_table2_address0");
    sc_trace(mVcdFile, one_half_table2_ce0, "one_half_table2_ce0");
    sc_trace(mVcdFile, one_half_table2_q0, "one_half_table2_q0");
    sc_trace(mVcdFile, x_read_reg_200, "x_read_reg_200");
    sc_trace(mVcdFile, t_V_1_fu_72_p1, "t_V_1_fu_72_p1");
    sc_trace(mVcdFile, t_V_1_reg_205, "t_V_1_reg_205");
    sc_trace(mVcdFile, icmp_ln849_fu_86_p2, "icmp_ln849_fu_86_p2");
    sc_trace(mVcdFile, icmp_ln849_reg_211, "icmp_ln849_reg_211");
    sc_trace(mVcdFile, icmp_ln849_1_fu_92_p2, "icmp_ln849_1_fu_92_p2");
    sc_trace(mVcdFile, icmp_ln849_1_reg_217, "icmp_ln849_1_reg_217");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln498_fu_108_p1, "zext_ln498_fu_108_p1");
    sc_trace(mVcdFile, tmp_V_fu_76_p4, "tmp_V_fu_76_p4");
    sc_trace(mVcdFile, index_V_fu_98_p4, "index_V_fu_98_p4");
    sc_trace(mVcdFile, p_Result_s_fu_114_p3, "p_Result_s_fu_114_p3");
    sc_trace(mVcdFile, zext_ln209_fu_129_p1, "zext_ln209_fu_129_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_133_p2, "p_Val2_s_fu_133_p2");
    sc_trace(mVcdFile, tmp_V_1_fu_138_p1, "tmp_V_1_fu_138_p1");
    sc_trace(mVcdFile, xor_ln1309_fu_142_p2, "xor_ln1309_fu_142_p2");
    sc_trace(mVcdFile, tmp_fu_154_p4, "tmp_fu_154_p4");
    sc_trace(mVcdFile, xs_sig_V_fu_148_p2, "xs_sig_V_fu_148_p2");
    sc_trace(mVcdFile, p_Result_11_fu_121_p3, "p_Result_11_fu_121_p3");
    sc_trace(mVcdFile, p_Result_12_fu_164_p3, "p_Result_12_fu_164_p3");
    sc_trace(mVcdFile, select_ln849_fu_172_p3, "select_ln849_fu_172_p3");
    sc_trace(mVcdFile, xor_ln849_fu_183_p2, "xor_ln849_fu_183_p2");
    sc_trace(mVcdFile, and_ln849_fu_188_p2, "and_ln849_fu_188_p2");
    sc_trace(mVcdFile, bitcast_ln849_fu_179_p1, "bitcast_ln849_fu_179_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

roundf::~roundf() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mask_table1_U;
    delete one_half_table2_U;
}

void roundf::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        icmp_ln849_1_reg_217 = icmp_ln849_1_fu_92_p2.read();
        icmp_ln849_reg_211 = icmp_ln849_fu_86_p2.read();
        t_V_1_reg_205 = t_V_1_fu_72_p1.read();
        x_read_reg_200 = x.read();
    }
}

void roundf::thread_and_ln849_fu_188_p2() {
    and_ln849_fu_188_p2 = (icmp_ln849_1_reg_217.read() & xor_ln849_fu_183_p2.read());
}

void roundf::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void roundf::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void roundf::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void roundf::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void roundf::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void roundf::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void roundf::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void roundf::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void roundf::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void roundf::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void roundf::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void roundf::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void roundf::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void roundf::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void roundf::thread_ap_return() {
    ap_return = (!and_ln849_fu_188_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln849_fu_188_p2.read()[0].to_bool())? x_read_reg_200.read(): bitcast_ln849_fu_179_p1.read());
}

void roundf::thread_bitcast_ln849_fu_179_p1() {
    bitcast_ln849_fu_179_p1 = select_ln849_fu_172_p3.read();
}

void roundf::thread_icmp_ln849_1_fu_92_p2() {
    icmp_ln849_1_fu_92_p2 = (!tmp_V_fu_76_p4.read().is_01() || !ap_const_lv8_96.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_V_fu_76_p4.read()) > sc_biguint<8>(ap_const_lv8_96));
}

void roundf::thread_icmp_ln849_fu_86_p2() {
    icmp_ln849_fu_86_p2 = (!tmp_V_fu_76_p4.read().is_01() || !ap_const_lv8_7E.is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_V_fu_76_p4.read()) < sc_biguint<8>(ap_const_lv8_7E));
}

void roundf::thread_index_V_fu_98_p4() {
    index_V_fu_98_p4 = t_V_1_fu_72_p1.read().range(27, 23);
}

void roundf::thread_mask_table1_address0() {
    mask_table1_address0 =  (sc_lv<5>) (zext_ln498_fu_108_p1.read());
}

void roundf::thread_mask_table1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        mask_table1_ce0 = ap_const_logic_1;
    } else {
        mask_table1_ce0 = ap_const_logic_0;
    }
}

void roundf::thread_one_half_table2_address0() {
    one_half_table2_address0 =  (sc_lv<5>) (zext_ln498_fu_108_p1.read());
}

void roundf::thread_one_half_table2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        one_half_table2_ce0 = ap_const_logic_1;
    } else {
        one_half_table2_ce0 = ap_const_logic_0;
    }
}

void roundf::thread_p_Result_11_fu_121_p3() {
    p_Result_11_fu_121_p3 = esl_concat<1,31>(p_Result_s_fu_114_p3.read(), ap_const_lv31_0);
}

void roundf::thread_p_Result_12_fu_164_p3() {
    p_Result_12_fu_164_p3 = esl_concat<9,23>(tmp_fu_154_p4.read(), xs_sig_V_fu_148_p2.read());
}

void roundf::thread_p_Result_s_fu_114_p3() {
    p_Result_s_fu_114_p3 = t_V_1_reg_205.read().range(31, 31);
}

void roundf::thread_p_Val2_s_fu_133_p2() {
    p_Val2_s_fu_133_p2 = (!zext_ln209_fu_129_p1.read().is_01() || !t_V_1_reg_205.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln209_fu_129_p1.read()) + sc_biguint<32>(t_V_1_reg_205.read()));
}

void roundf::thread_select_ln849_fu_172_p3() {
    select_ln849_fu_172_p3 = (!icmp_ln849_reg_211.read()[0].is_01())? sc_lv<32>(): ((icmp_ln849_reg_211.read()[0].to_bool())? p_Result_11_fu_121_p3.read(): p_Result_12_fu_164_p3.read());
}

void roundf::thread_t_V_1_fu_72_p1() {
    t_V_1_fu_72_p1 = x.read();
}

void roundf::thread_tmp_V_1_fu_138_p1() {
    tmp_V_1_fu_138_p1 = p_Val2_s_fu_133_p2.read().range(23-1, 0);
}

void roundf::thread_tmp_V_fu_76_p4() {
    tmp_V_fu_76_p4 = t_V_1_fu_72_p1.read().range(30, 23);
}

void roundf::thread_tmp_fu_154_p4() {
    tmp_fu_154_p4 = p_Val2_s_fu_133_p2.read().range(31, 23);
}

void roundf::thread_xor_ln1309_fu_142_p2() {
    xor_ln1309_fu_142_p2 = (mask_table1_q0.read() ^ ap_const_lv23_7FFFFF);
}

void roundf::thread_xor_ln849_fu_183_p2() {
    xor_ln849_fu_183_p2 = (icmp_ln849_reg_211.read() ^ ap_const_lv1_1);
}

void roundf::thread_xs_sig_V_fu_148_p2() {
    xs_sig_V_fu_148_p2 = (tmp_V_1_fu_138_p1.read() & xor_ln1309_fu_142_p2.read());
}

void roundf::thread_zext_ln209_fu_129_p1() {
    zext_ln209_fu_129_p1 = esl_zext<32,24>(one_half_table2_q0.read());
}

void roundf::thread_zext_ln498_fu_108_p1() {
    zext_ln498_fu_108_p1 = esl_zext<64,5>(index_V_fu_98_p4.read());
}

void roundf::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

