// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _roundf_HH_
#define _roundf_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "roundf_mask_table1.h"
#include "roundf_one_half_table2.h"

namespace ap_rtl {

struct roundf : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<32> > x;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    roundf(sc_module_name name);
    SC_HAS_PROCESS(roundf);

    ~roundf();

    sc_trace_file* mVcdFile;

    roundf_mask_table1* mask_table1_U;
    roundf_one_half_table2* one_half_table2_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > mask_table1_address0;
    sc_signal< sc_logic > mask_table1_ce0;
    sc_signal< sc_lv<23> > mask_table1_q0;
    sc_signal< sc_lv<5> > one_half_table2_address0;
    sc_signal< sc_logic > one_half_table2_ce0;
    sc_signal< sc_lv<24> > one_half_table2_q0;
    sc_signal< sc_lv<32> > x_read_reg_200;
    sc_signal< sc_lv<32> > t_V_1_fu_72_p1;
    sc_signal< sc_lv<32> > t_V_1_reg_205;
    sc_signal< sc_lv<1> > icmp_ln849_fu_86_p2;
    sc_signal< sc_lv<1> > icmp_ln849_reg_211;
    sc_signal< sc_lv<1> > icmp_ln849_1_fu_92_p2;
    sc_signal< sc_lv<1> > icmp_ln849_1_reg_217;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln498_fu_108_p1;
    sc_signal< sc_lv<8> > tmp_V_fu_76_p4;
    sc_signal< sc_lv<5> > index_V_fu_98_p4;
    sc_signal< sc_lv<1> > p_Result_s_fu_114_p3;
    sc_signal< sc_lv<32> > zext_ln209_fu_129_p1;
    sc_signal< sc_lv<32> > p_Val2_s_fu_133_p2;
    sc_signal< sc_lv<23> > tmp_V_1_fu_138_p1;
    sc_signal< sc_lv<23> > xor_ln1309_fu_142_p2;
    sc_signal< sc_lv<9> > tmp_fu_154_p4;
    sc_signal< sc_lv<23> > xs_sig_V_fu_148_p2;
    sc_signal< sc_lv<32> > p_Result_11_fu_121_p3;
    sc_signal< sc_lv<32> > p_Result_12_fu_164_p3;
    sc_signal< sc_lv<32> > select_ln849_fu_172_p3;
    sc_signal< sc_lv<1> > xor_ln849_fu_183_p2;
    sc_signal< sc_lv<1> > and_ln849_fu_188_p2;
    sc_signal< sc_lv<32> > bitcast_ln849_fu_179_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_7E;
    static const sc_lv<8> ap_const_lv8_96;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<23> ap_const_lv23_7FFFFF;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln849_fu_188_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_bitcast_ln849_fu_179_p1();
    void thread_icmp_ln849_1_fu_92_p2();
    void thread_icmp_ln849_fu_86_p2();
    void thread_index_V_fu_98_p4();
    void thread_mask_table1_address0();
    void thread_mask_table1_ce0();
    void thread_one_half_table2_address0();
    void thread_one_half_table2_ce0();
    void thread_p_Result_11_fu_121_p3();
    void thread_p_Result_12_fu_164_p3();
    void thread_p_Result_s_fu_114_p3();
    void thread_p_Val2_s_fu_133_p2();
    void thread_select_ln849_fu_172_p3();
    void thread_t_V_1_fu_72_p1();
    void thread_tmp_V_1_fu_138_p1();
    void thread_tmp_V_fu_76_p4();
    void thread_tmp_fu_154_p4();
    void thread_xor_ln1309_fu_142_p2();
    void thread_xor_ln849_fu_183_p2();
    void thread_xs_sig_V_fu_148_p2();
    void thread_zext_ln209_fu_129_p1();
    void thread_zext_ln498_fu_108_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
